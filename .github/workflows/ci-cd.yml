# Continuous Integration and Deployment Pipeline
# Purpose: Full build, Docker image creation, security scanning, and Kubernetes deployment
# Runs on: Pushes to main/develop, tags, and PRs
# Focus: Production-ready builds, container images, Helm charts, and cloud deployments
# Note: ci.yml handles multi-version Rust testing - this workflow focuses on deployment
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/orbit-server

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Rust linting, testing, and security checks
  rust-checks:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: rustfmt, clippy
        override: true

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-v2-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-v2-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev libsqlite3-dev protobuf-compiler

    - name: Check code formatting
      run: cargo fmt --all -- --check

    - name: Run Clippy lints
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build all components
      run: cargo build --release --workspace

    - name: Run tests
      run: cargo test --workspace --verbose

    - name: Run security audit
      uses: actions-rs/audit-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Check for vulnerabilities
      run: |
        cargo install cargo-deny --locked
        cargo deny check

  # Build and push Docker image
  docker-build:
    needs: rust-checks
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Build and push image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ steps.meta.outputs.tags }}
        registry-username: ${{ github.actor }}
        registry-password: ${{ secrets.GITHUB_TOKEN }}

  # Security scanning
  security-scan:
    needs: docker-build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.docker-build.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Helm chart linting and testing
  helm-checks:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Helm
      uses: azure/setup-helm@v4
      with:
        version: '3.12.0'

    - name: Set up chart-testing
      uses: helm/chart-testing-action@v2.6.1

    - name: Lint Helm charts
      run: |
        helm lint helm/orbit-rs
        ct lint --chart-dirs helm --charts helm/orbit-rs

    - name: Test Helm chart installation
      run: |
        helm template orbit-rs helm/orbit-rs --values helm/orbit-rs/values.yaml > /dev/null

  # Kubernetes deployment (staging/production)
  deploy-staging:
    needs: [docker-build, security-scan, helm-checks]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://orbit-rs-staging.yourdomain.com
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

    - name: Set up Helm
      uses: azure/setup-helm@v4

    - name: Deploy to staging
      run: |
        helm upgrade --install orbit-rs-staging helm/orbit-rs \
          --namespace orbit-rs-staging \
          --create-namespace \
          --set orbitServer.image.tag=${{ github.sha }} \
          --set orbitServer.image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
          --set config.logging.level=debug \
          --set orbitServer.replicaCount=1 \
          --set monitoring.serviceMonitor.enabled=true \
          --wait --timeout=10m

    - name: Run smoke tests
      run: |
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=orbit-rs \
          -n orbit-rs-staging --timeout=300s
        kubectl port-forward svc/orbit-rs-staging 8080:8080 -n orbit-rs-staging &
        sleep 10
        curl -f http://localhost:8080/health || exit 1

  deploy-production:
    needs: [docker-build, security-scan, helm-checks]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://orbit-rs.yourdomain.com
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

    - name: Set up Helm
      uses: azure/setup-helm@v4

    - name: Deploy to production
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        helm upgrade --install orbit-rs helm/orbit-rs \
          --namespace orbit-rs \
          --create-namespace \
          --set orbitServer.image.tag=${VERSION} \
          --set orbitServer.image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
          --set orbitServer.replicaCount=3 \
          --set monitoring.serviceMonitor.enabled=true \
          --set monitoring.prometheusRule.enabled=true \
          --set monitoring.grafanaDashboard.enabled=true \
          --set autoscaling.enabled=true \
          --wait --timeout=15m

    - name: Run production health checks
      run: |
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=orbit-rs \
          -n orbit-rs --timeout=600s
        kubectl get pods -n orbit-rs
        kubectl get services -n orbit-rs

  # Create GitHub release for tags
  release:
    needs: [rust-checks, docker-build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build release artifacts
      run: |
        cargo build --release
        mkdir -p artifacts
        cp target/release/orbit-server artifacts/
        cp -r k8s artifacts/
        cp -r helm artifacts/
        tar -czf artifacts/orbit-rs-${{ github.ref_name }}.tar.gz -C artifacts .

    - name: Generate changelog
      run: |
        git log $(git describe --tags --abbrev=0 HEAD^)..HEAD --pretty=format:"* %s" > CHANGELOG.txt

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          artifacts/orbit-rs-${{ github.ref_name }}.tar.gz
        body_path: CHANGELOG.txt
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notification on failure using GitHub Issues
  notify-failure:
    needs: [rust-checks, docker-build, security-scan, helm-checks]
    runs-on: ubuntu-latest
    if: failure() && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    permissions:
      issues: write
    steps:
    - name: Create issue on failure
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const title = `CI/CD Pipeline Failed - ${context.workflow} (${context.ref})`;
          const body = `## Pipeline Failure Report
          
          **Workflow:** ${context.workflow}
          **Run:** [#${context.runNumber}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
          **Commit:** ${context.sha}
          **Branch:** ${context.ref}
          **Author:** @${context.actor}
          **Event:** ${context.eventName}
          **Timestamp:** ${new Date().toISOString()}
          
          ### Failed Jobs
          Please check the [workflow run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.
          
          ### Action Required
          - Review the failed jobs and error logs
          - Fix the issues in a new commit
          - Ensure all tests pass before merging
          
          This issue was automatically created by the CI/CD pipeline.`;
          
          // Check if there's already an open issue for this workflow failure
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: ['ci-failure', 'automated'],
            per_page: 10
          });
          
          const existingIssue = issues.data.find(issue => 
            issue.title.includes(context.workflow) && 
            issue.title.includes(context.ref.replace('refs/heads/', ''))
          );
          
          if (existingIssue) {
            // Add a comment to existing issue
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: existingIssue.number,
              body: `## New Failure Detected\n\n${body}`
            });
            console.log(`Added comment to existing issue #${existingIssue.number}`);
          } else {
            // Create a new issue
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['ci-failure', 'automated', 'bug']
            });
            console.log(`Created issue #${issue.data.number}`);
          }