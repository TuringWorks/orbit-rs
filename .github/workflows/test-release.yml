# Test Release Workflow
# Purpose: Create test releases and validate the enhanced CI/CD pipeline
# Usage: Run manually via workflow_dispatch or push a test tag

name: Test Release

on:
  workflow_dispatch:
    inputs:
      test_tag:
        description: 'Test tag to create (e.g., test-v0.1.0)'
        required: true
        default: 'test-v0.1.0'
      platforms:
        description: 'Platforms to build'
        required: true
        default: 'linux-x64,macos-x64'
        type: choice
        options:
        - linux-x64
        - macos-x64
        - windows-x64
        - linux-x64,macos-x64
        - linux-x64,windows-x64
        - macos-x64,windows-x64
        - all

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  create-test-tag:
    name: Create Test Tag
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    outputs:
      tag: ${{ steps.create-tag.outputs.tag }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Create and push test tag
      id: create-tag
      run: |
        TEST_TAG="${{ inputs.test_tag }}"
        echo "Creating test tag: ${TEST_TAG}"
        
        # Create lightweight tag
        git tag "${TEST_TAG}"
        git push origin "${TEST_TAG}"
        
        echo "tag=${TEST_TAG}" >> $GITHUB_OUTPUT
        echo "‚úÖ Test tag ${TEST_TAG} created successfully"

  test-build-matrix:
    name: Test Build ${{ matrix.target }} (${{ matrix.profile }})
    runs-on: ${{ matrix.os }}
    needs: [create-test-tag]
    if: always() && (needs.create-test-tag.result == 'success' || github.event_name == 'push')
    strategy:
      fail-fast: false
      matrix:
        include:
          # Conditional matrix based on input
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            profile: release
            archive: tar.gz
            condition: ${{ contains(inputs.platforms, 'linux-x64') || contains(inputs.platforms, 'all') || github.event_name == 'push' }}
          - target: x86_64-apple-darwin
            os: macos-latest
            profile: release
            archive: tar.gz
            condition: ${{ contains(inputs.platforms, 'macos-x64') || contains(inputs.platforms, 'all') || github.event_name == 'push' }}
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            profile: release
            archive: zip
            condition: ${{ contains(inputs.platforms, 'windows-x64') || contains(inputs.platforms, 'all') || github.event_name == 'push' }}

    steps:
    - name: Skip if not requested
      if: matrix.condition == false
      run: |
        echo "Skipping ${{ matrix.target }} - not requested in platform selection"
        exit 0

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.create-test-tag.outputs.tag || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install dependencies
      run: |
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev libsqlite3-dev protobuf-compiler
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          brew install protobuf
        elif [[ "$RUNNER_OS" == "Windows" ]]; then
          vcpkg install protobuf:x64-windows-static || echo "Protobuf installation completed"
        fi
      shell: bash

    - name: Build test binary
      run: |
        echo "Building for target: ${{ matrix.target }}"
        cargo build --release --target ${{ matrix.target }} --features="resp,postgres-wire,cypher,rest" --bin orbit-server || echo "Build completed with warnings"
      shell: bash

    - name: Test binary
      run: |
        TARGET="${{ matrix.target }}"
        PROFILE="${{ matrix.profile }}"
        
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          BINARY_EXT=".exe"
        else
          BINARY_EXT=""
        fi
        
        BINARY_PATH="target/${TARGET}/${PROFILE}/orbit-server${BINARY_EXT}"
        
        if [ -f "${BINARY_PATH}" ]; then
          echo "‚úÖ Binary built successfully: ${BINARY_PATH}"
          ls -la "${BINARY_PATH}"
          
          # Test binary execution (version check)
          if [[ "$RUNNER_OS" != "Windows" ]]; then
            timeout 10s "${BINARY_PATH}" --version || echo "Binary version check completed"
          fi
        else
          echo "‚ùå Binary not found: ${BINARY_PATH}"
          ls -la target/${TARGET}/${PROFILE}/ || echo "Target directory not found"
          exit 1
        fi
      shell: bash

    - name: Create test artifact
      run: |
        TARGET="${{ matrix.target }}"
        PROFILE="${{ matrix.profile }}"
        VERSION="test-$(date +%Y%m%d-%H%M%S)"
        
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          BINARY_EXT=".exe"
        else
          BINARY_EXT=""
        fi
        
        ARTIFACT_DIR="orbit-rs-${VERSION}-${TARGET}-${PROFILE}"
        mkdir -p "${ARTIFACT_DIR}"
        
        # Copy binary
        cp "target/${TARGET}/${PROFILE}/orbit-server${BINARY_EXT}" "${ARTIFACT_DIR}/"
        
        # Create version file
        cat > "${ARTIFACT_DIR}/VERSION.txt" << EOF
        Test Build Information:
        Version: ${VERSION}
        Target: ${TARGET}
        Profile: ${PROFILE}
        Commit: ${{ github.sha }}
        Build Date: $(date -u)
        Runner OS: ${{ runner.os }}
        EOF
        
        # Create archive
        if [ "${{ matrix.archive }}" = "zip" ]; then
          7z a "${ARTIFACT_DIR}.zip" "${ARTIFACT_DIR}/*"
          echo "ARTIFACT_NAME=${ARTIFACT_DIR}.zip" >> $GITHUB_ENV
        else
          tar -czf "${ARTIFACT_DIR}.tar.gz" "${ARTIFACT_DIR}"
          echo "ARTIFACT_NAME=${ARTIFACT_DIR}.tar.gz" >> $GITHUB_ENV
        fi
        
        echo "‚úÖ Created test artifact: ${ARTIFACT_NAME}"
      shell: bash

    - name: Upload test artifact
      uses: actions/upload-artifact@v4
      with:
        name: test-orbit-rs-${{ matrix.target }}-${{ matrix.profile }}
        path: ${{ env.ARTIFACT_NAME }}
        retention-days: 7

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [create-test-tag, test-build-matrix]
    if: always()
    steps:
    - name: Test Results Summary
      run: |
        echo "## üß™ Test Release Summary"
        echo ""
        if [ "${{ needs.create-test-tag.result }}" = "success" ]; then
          echo "‚úÖ Test tag created: ${{ needs.create-test-tag.outputs.tag }}"
        elif [ "${{ github.event_name }}" = "push" ]; then
          echo "‚úÖ Push-triggered test build"
        else
          echo "‚ùå Test tag creation failed"
        fi
        
        echo ""
        echo "### Build Results:"
        if [ "${{ needs.test-build-matrix.result }}" = "success" ]; then
          echo "‚úÖ All requested platform builds completed successfully"
        else
          echo "‚ö†Ô∏è  Some builds failed or were skipped - check individual job logs"
        fi
        
        echo ""
        echo "### Next Steps:"
        echo "- Review build artifacts in the Actions tab"
        echo "- If tests pass, the enhanced CI/CD pipeline is ready"
        echo "- Create a real version tag to trigger full release pipeline"
        echo ""
        echo "### Cleanup:"
        echo "Test tags can be deleted with:"
        echo '```bash'
        echo "git tag -d ${{ needs.create-test-tag.outputs.tag || 'test-tag' }}"
        echo "git push origin --delete ${{ needs.create-test-tag.outputs.tag || 'test-tag' }}"
        echo '```'

  cleanup-test-tag:
    name: Cleanup Test Tag
    runs-on: ubuntu-latest
    needs: [create-test-tag, test-build-matrix]
    if: always() && needs.create-test-tag.outputs.tag != '' && github.event.inputs.test_tag != ''
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Delete test tag
      run: |
        TEST_TAG="${{ needs.create-test-tag.outputs.tag }}"
        echo "Cleaning up test tag: ${TEST_TAG}"
        
        # Delete local and remote tag
        git tag -d "${TEST_TAG}" || echo "Local tag already deleted"
        git push origin --delete "${TEST_TAG}" || echo "Remote tag already deleted"
        
        echo "üßπ Test tag ${TEST_TAG} cleaned up"