# GitHub Pages Deployment
# Purpose: Build and deploy project documentation to GitHub Pages
# Builds: Jekyll-based docs + Rust API documentation + unified site
# Features: Multi-source documentation, search integration, automated deployment

name: GitHub Pages Deployment

on:
  push:
    branches: [ main ]
    paths: 
      - 'docs/**'
      - 'src/**'
      - 'README.md'
      - '**/Cargo.toml'
      - '.github/workflows/github-pages.yml'
  pull_request:
    branches: [ main ]
    paths: 
      - 'docs/**'
      - '.github/workflows/github-pages.yml'
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Deployment environment'
        required: false
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ============================================================================
  # BUILD DOCUMENTATION
  # ============================================================================
  
  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: read
    outputs:
      should-deploy: ${{ steps.should-deploy.outputs.should-deploy }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Install Ruby and Bundler
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: true
        working-directory: docs

    - name: Install Jekyll dependencies
      run: |
        cd docs
        if [ ! -f Gemfile ]; then
          cat > Gemfile << 'EOF'
        source "https://rubygems.org"
        gem "jekyll", "~> 4.3"
        gem "minima", "~> 2.5"
        gem "jekyll-feed", "~> 0.12"
        gem "jekyll-sitemap", "~> 1.4"
        gem "jekyll-seo-tag", "~> 2.6"
        gem "jekyll-paginate", "~> 1.1"
        gem "kramdown-parser-gfm", "~> 1.1"
        EOF
        fi
        bundle install

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-pages-v1-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-pages-v1-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev libsqlite3-dev protobuf-compiler

    # Build Jekyll documentation
    - name: Build Jekyll site
      run: |
        cd docs
        echo "Building Jekyll site..."
        bundle exec jekyll build --destination ../_site --config _config.yml
        echo "‚úÖ Jekyll build completed"

    # Build Rust API documentation
    - name: Build Rust API documentation
      run: |
        echo "Building Rust API documentation..."
        # Build docs for the main packages only to avoid cross-compilation issues
        cargo doc --no-deps --lib --document-private-items \
          --package orbit-util \
          --package orbit-shared \
          --package orbit-proto \
          --package orbit-client \
          --package orbit-server \
          --package orbit-protocols \
          --package orbit-operator \
          --package orbit-compute
        echo "‚úÖ Rust documentation built"

    # Integrate API docs with Jekyll site
    - name: Integrate API documentation
      run: |
        echo "Integrating API documentation with Jekyll site..."
        
        # Copy Rust docs to the site
        mkdir -p _site/api
        cp -r target/doc/* _site/api/
        
        # Create API index page
        cat > _site/api/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Orbit-RS API Documentation</title>
            <style>
                body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif; margin: 40px; }
                .header { text-align: center; margin-bottom: 40px; }
                .api-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; }
                .api-card { padding: 20px; border: 1px solid #e1e4e8; border-radius: 6px; background: #fafbfc; }
                .api-card h3 { margin-top: 0; color: #0366d6; }
                .api-card a { text-decoration: none; color: #0366d6; }
                .api-card a:hover { text-decoration: underline; }
                .back-link { text-align: center; margin-top: 40px; }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>üöÄ Orbit-RS API Documentation</h1>
                <p>Comprehensive API documentation for all Orbit-RS components</p>
            </div>
            
            <div class="api-grid">
                <div class="api-card">
                    <h3>üé≠ orbit_server</h3>
                    <p>Main server implementation with actor system and networking</p>
                    <a href="orbit_server/index.html">View Documentation ‚Üí</a>
                </div>
                
                <div class="api-card">
                    <h3>üåê orbit_client</h3>
                    <p>Client libraries for connecting to Orbit-RS clusters</p>
                    <a href="orbit_client/index.html">View Documentation ‚Üí</a>
                </div>
                
                <div class="api-card">
                    <h3>üîó orbit_shared</h3>
                    <p>Shared types, traits, and utilities across components</p>
                    <a href="orbit_shared/index.html">View Documentation ‚Üí</a>
                </div>
                
                <div class="api-card">
                    <h3>üõ†Ô∏è orbit_util</h3>
                    <p>Utility functions, helpers, and common functionality</p>
                    <a href="orbit_util/index.html">View Documentation ‚Üí</a>
                </div>
                
                <div class="api-card">
                    <h3>üîå orbit_protocols</h3>
                    <p>Protocol implementations (Redis RESP, PostgreSQL wire, etc.)</p>
                    <a href="orbit_protocols/index.html">View Documentation ‚Üí</a>
                </div>
                
                <div class="api-card">
                    <h3>‚ò∏Ô∏è orbit_operator</h3>
                    <p>Kubernetes operator for managing Orbit-RS clusters</p>
                    <a href="orbit_operator/index.html">View Documentation ‚Üí</a>
                </div>
                
                <div class="api-card">
                    <h3>‚ö° orbit_compute</h3>
                    <p>Heterogeneous computing acceleration with CPU/GPU/Neural Engine support</p>
                    <a href="orbit_compute/index.html">View Documentation ‚Üí</a>
                </div>
            </div>
            
            <div class="back-link">
                <a href="../">‚Üê Back to Documentation Home</a>
            </div>
        </body>
        </html>
        EOF
        
        # Update main site navigation to include API docs
        if [ -f "_site/index.html" ]; then
            sed -i 's|<a href="api/">|<a href="api/index.html">|g' _site/index.html || true
        fi
        
        echo "‚úÖ API documentation integrated"

    # Generate search index
    - name: Generate search index
      run: |
        echo "Generating search index..."
        cat > _site/search.json << 'EOF'
        ---
        layout: null
        ---
        {
          "pages": [
            {% for page in site.pages %}
              {
                "title": "{{ page.title | escape }}",
                "url": "{{ site.baseurl }}{{ page.url }}",
                "content": "{{ page.content | strip_html | strip_newlines | escape }}"
              }{% unless forloop.last %},{% endunless %}
            {% endfor %}
          ]
        }
        EOF
        echo "‚úÖ Search index generated"

    # Validate site build
    - name: Validate site build
      run: |
        echo "Validating site build..."
        
        # Check if critical files exist
        if [ ! -f "_site/index.html" ]; then
          echo "‚ùå Missing critical file: _site/index.html"
          exit 1
        fi
        
        if [ ! -f "_site/api/index.html" ]; then
          echo "‚ùå Missing critical file: _site/api/index.html"
          exit 1
        fi
        
        # Check if we have some CSS (Jekyll might put it in different locations)
        css_files=$(find _site -name "*.css" -type f | wc -l)
        if [ "$css_files" -eq 0 ]; then
          echo "‚ö†Ô∏è  Warning: No CSS files found, but continuing..."
        else
          echo "‚úÖ Found $css_files CSS file(s)"
        fi
        
        # Check site size
        site_size=$(du -sh _site | cut -f1)
        echo "üìä Site size: $site_size"
        
        # Count different file types
        html_files=$(find _site -name "*.html" -type f | wc -l)
        css_files=$(find _site -name "*.css" -type f | wc -l)
        js_files=$(find _site -name "*.js" -type f | wc -l)
        
        echo "üìÇ Site content:"
        echo "  - HTML files: $html_files"
        echo "  - CSS files: $css_files"
        echo "  - JS files: $js_files"
        
        # List key files structure
        echo "üìÇ Site structure (first 20 HTML files):"
        find _site -name "*.html" | head -20
        
        # List assets directory if it exists
        if [ -d "_site/assets" ]; then
          echo "üìÇ Assets directory contents:"
          find _site/assets -type f | head -10
        fi
        
        echo "‚úÖ Site validation completed"

    # Upload build artifacts for inspection
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: github-pages-site
        path: _site/
        retention-days: 7

    # Determine if we should deploy
    - name: Check if should deploy
      id: should-deploy
      run: |
        if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "should-deploy=true" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "should-deploy=true" >> $GITHUB_OUTPUT
        else
          echo "should-deploy=false" >> $GITHUB_OUTPUT
        fi

  # ============================================================================
  # DEPLOY TO GITHUB PAGES
  # ============================================================================

  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: build-docs
    if: needs.build-docs.outputs.should-deploy == 'true'
    steps:
    - name: Download site artifacts
      uses: actions/download-artifact@v4
      with:
        name: github-pages-site
        path: _site

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: _site
        force_orphan: true
        user_name: 'github-actions[bot]'
        user_email: 'github-actions[bot]@users.noreply.github.com'
        commit_message: 'Deploy GitHub Pages: ${{ github.sha }}'

    - name: Post-deployment validation
      run: |
        echo "üéâ Site deployed successfully!"
        echo "üì± URL: https://turingworks.github.io/orbit-rs/"
        echo "üìä Deployment details:"
        echo "  - Commit: ${{ github.sha }}"
        echo "  - Branch: ${{ github.ref }}"
        echo "  - Actor: ${{ github.actor }}"
        echo "  - Event: ${{ github.event_name }}"

  # ============================================================================
  # POST-DEPLOYMENT
  # ============================================================================

  notify-success:
    name: Notify Deployment Success
    runs-on: ubuntu-latest
    needs: [build-docs, deploy]
    if: success()
    steps:
    - name: Success notification
      run: |
        echo "üéâ GitHub Pages deployment completed successfully!"
        echo "‚úÖ Documentation built and deployed"
        echo "‚úÖ API documentation integrated"
        echo "‚úÖ Site is live and accessible"
        echo ""
        echo "üì± Access your documentation at:"
        echo "https://turingworks.github.io/orbit-rs/"

  notify-failure:
    name: Notify Deployment Failure
    runs-on: ubuntu-latest
    needs: [build-docs, deploy]
    if: failure() && github.event_name != 'pull_request'
    permissions:
      issues: write
    steps:
    - name: Create failure issue
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const title = `üö® GitHub Pages Deployment Failed (${context.ref})`;
          const body = `## GitHub Pages Deployment Failure
          
          **Workflow:** ${context.workflow}
          **Run:** [#${context.runNumber}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
          **Commit:** ${context.sha}
          **Branch:** ${context.ref}
          **Actor:** @${context.actor}
          **Event:** ${context.eventName}
          **Timestamp:** ${new Date().toISOString()}
          
          ### Quick Debugging Steps
          \`\`\`bash
          # Check documentation locally
          cd docs && bundle exec jekyll serve
          
          # Build API docs
          cargo doc --no-deps --open
          
          # Check for broken links
          bundle exec jekyll build && htmlproofer _site
          \`\`\`
          
          ### Common Issues
          - Jekyll build errors in docs/_config.yml
          - Missing Ruby dependencies
          - Broken internal links
          - API documentation build failures
          
          This issue was automatically created by the GitHub Pages deployment workflow.`;
          
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: ['pages-failure', 'automated']
          });
          
          const existingIssue = issues.data.find(issue => 
            issue.title.includes('GitHub Pages Deployment Failed')
          );
          
          if (existingIssue) {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: existingIssue.number,
              body: `## New Deployment Failure\n\n${body}`
            });
          } else {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['pages-failure', 'automated', 'documentation']
            });
          }