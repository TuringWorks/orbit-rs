//! # Orbit-RS Integrated Multi-Protocol Server with Full Persistence
//!
//! This example demonstrates Orbit-RS as a production-ready **unified multi-protocol database server**
//! that replaces separate PostgreSQL and Redis installations with a single, persistent process.
//!
//! ## üöÄ What This Example Provides
//!
//! **Single Process, Three Protocols**:
//! - üêò **PostgreSQL** (port 15432) - Full SQL DDL/DML with persistent tables
//! - üî¥ **Redis** (port 6379) - Complete Redis commands with persistent key-value storage  
//! - üì° **gRPC** (port 50051) - Actor system management and cluster operations
//!
//! **Configurable Storage Backends**:
//! - üíæ **Persistent Mode** (default) - Direct RocksDB storage for maximum performance and persistence
//! - üé≠ **Actor Mode** - Traditional actor-based storage for integration with Orbit's actor system
//! - üîß **Runtime Configurable** - Set via `ORBIT_REDIS_MODE` and `ORBIT_POSTGRES_MODE` environment variables
//!
//! **Production-Grade Persistence** (persistent mode):
//! - üíæ **RocksDB Backend** - LSM-tree storage optimized for high-throughput writes
//! - üîÑ **Cross-Restart Durability** - All data survives server restarts
//! - ‚ö° **ACID Guarantees** - Full transactional consistency across all protocols
//! - üìä **Enterprise Performance** - 50k+ ops/sec with configurable caching and compression
//!
//! ## üìã Quick Start
//!
//! ```bash
//! # Start the integrated server (this file)
//! cargo run --package orbit-server --example integrated-server
//!
//! # OR configure Redis/PostgreSQL to use actor-based storage:
//! ORBIT_REDIS_MODE=actor ORBIT_POSTGRES_MODE=actor cargo run --package orbit-server --example integrated-server
//!
//! # OR configure just PostgreSQL to use actor mode:
//! ORBIT_POSTGRES_MODE=actor cargo run --package orbit-server --example integrated-server
//!
//! # PostgreSQL - Create persistent tables that survive restarts
//! psql -h localhost -p 15432 -U orbit -d actors
//! actors=# CREATE TABLE users (id INTEGER PRIMARY KEY, name TEXT, email TEXT);
//! actors=# INSERT INTO users VALUES (1, 'Alice', 'alice@example.com');
//! actors=# SELECT * FROM users;
//!
//! # Redis - Key-value operations with TTL support
//! redis-cli -h localhost -p 6379
//! 127.0.0.1:6379> SET persistent_key "This data survives restarts (persistent mode)!"
//! 127.0.0.1:6379> SET expiring_key "Expires in 30 sec" EX 30
//! 127.0.0.1:6379> HSET user:1 name "Alice" email "alice@example.com"
//!
//! # Test Persistence (persistent mode only): Stop server (Ctrl+C), restart, data survives! üéâ
//! # Both Redis and PostgreSQL data persistence can be configured independently
//! ```
//!
//! ## üèóÔ∏è Architecture
//!
//! ```text
//! ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
//! ‚îÇ                    Client Applications                      ‚îÇ
//! ‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê   ‚îÇ
//! ‚îÇ  ‚îÇ   psql   ‚îÇ  ‚îÇredis-cli ‚îÇ  ‚îÇ   curl   ‚îÇ  ‚îÇ  gRPC    ‚îÇ   ‚îÇ
//! ‚îÇ  ‚îÇ(port 15432‚îÇ  ‚îÇ(port 6379‚îÇ  ‚îÇ(port 8080‚îÇ  ‚îÇ(port 50051‚îÇ  ‚îÇ
//! ‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îò   ‚îÇ
//! ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
//!          ‚îÇ             ‚îÇ             ‚îÇ             ‚îÇ
//! ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
//! ‚îÇ        ‚ñº             ‚ñº             ‚ñº             ‚ñº        ‚îÇ
//! ‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îÇ
//! ‚îÇ  ‚îÇPostgreSQL‚îÇ ‚îÇ   Redis  ‚îÇ ‚îÇ   HTTP   ‚îÇ ‚îÇ   gRPC   ‚îÇ    ‚îÇ
//! ‚îÇ  ‚îÇ Protocol ‚îÇ ‚îÇ Protocol ‚îÇ ‚îÇ Protocol ‚îÇ ‚îÇ Protocol ‚îÇ    ‚îÇ
//! ‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îÇ
//! ‚îÇ        ‚îÇ            ‚îÇ            ‚îÇ            ‚îÇ         ‚îÇ
//! ‚îÇ        ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò         ‚îÇ
//! ‚îÇ                     ‚ñº            ‚ñº                      ‚îÇ
//! ‚îÇ              ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê                ‚îÇ
//! ‚îÇ              ‚îÇ    Orbit-RS Engine     ‚îÇ                ‚îÇ
//! ‚îÇ              ‚îÇ   (Virtual Actors)     ‚îÇ                ‚îÇ
//! ‚îÇ              ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò                ‚îÇ
//! ‚îÇ                         ‚ñº                               ‚îÇ
//! ‚îÇ              ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê                ‚îÇ
//! ‚îÇ              ‚îÇ   RocksDB Persistence   ‚îÇ                ‚îÇ
//! ‚îÇ              ‚îÇ    (LSM-tree Storage)   ‚îÇ                ‚îÇ
//! ‚îÇ              ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò                ‚îÇ
//! ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
//!          Single Process - ./orbit_integrated_data/
//! ```
//!
//! ## üí° Use Cases
//!
//! **Replace Multiple Database Servers**:
//! - Instead of PostgreSQL + Redis + separate caching layer
//! - Single process with unified configuration and monitoring
//! - Reduced operational complexity and resource usage
//!
//! **Cross-Protocol Data Access**:
//! - Store user sessions in Redis, query user profiles via SQL
//! - Cache computed results in Redis, maintain source data in PostgreSQL
//! - Real-time analytics via gRPC, historical queries via SQL
//!
//! **Development and Testing**:
//! - Single server for full-stack development
//! - Simplified CI/CD pipelines
//! - Easy local development setup

use futures::future;
use orbit_protocols::persistence::redis_data::{RedisDataConfig, RedisDataProvider};
use orbit_protocols::persistence::rocksdb_redis_provider::RocksDbRedisDataProvider;
use orbit_protocols::postgres_wire::{PostgresServer, QueryEngine, RocksDbTableStorage};
use orbit_protocols::resp::PersistentRespServer;
use orbit_server::persistence::config::PersistenceProviderConfig;
use orbit_server::persistence::rocksdb::RocksDbConfig;
use orbit_server::{OrbitServer, ProtocolConfig};
use std::env;
use std::error::Error;
use std::path::PathBuf;
use std::sync::Arc;
use tracing::{error, info};
use tracing_subscriber::{layer::SubscriberExt, util::SubscriberInitExt};

#[tokio::main]
async fn main() -> Result<(), Box<dyn Error>> {
    // Initialize logging
    tracing_subscriber::registry()
        .with(tracing_subscriber::EnvFilter::new(
            std::env::var("RUST_LOG")
                .unwrap_or_else(|_| "info,orbit_server=debug,orbit_protocols=debug".into()),
        ))
        .with(tracing_subscriber::fmt::layer())
        .init();

    info!("üöÄ Starting Unified Orbit Server with Persistent Storage...");

    // Set up RocksDB persistence configuration for the server
    let data_dir = PathBuf::from("./orbit_integrated_data");

    // Ensure data directory exists
    if !data_dir.exists() {
        std::fs::create_dir_all(&data_dir)
            .map_err(|e| format!("Failed to create data directory: {}", e))?;
        info!("üìÅ Created data directory: {}", data_dir.display());
    } else {
        info!("üìÅ Using existing data directory: {}", data_dir.display());
    }

    // Configure RocksDB persistence
    let rocksdb_config = RocksDbConfig {
        data_dir: data_dir.to_string_lossy().to_string(),
        enable_wal: true,
        max_background_jobs: 4,
        write_buffer_size: 64 * 1024 * 1024, // 64MB
        max_write_buffer_number: 3,
        target_file_size_base: 32 * 1024 * 1024, // 32MB
        enable_statistics: true,
        block_cache_size: 128 * 1024 * 1024, // 128MB
    };

    let persistence_config = PersistenceProviderConfig::builder()
        .with_rocksdb("rocksdb", rocksdb_config, true)
        .build()?;

    // Determine Redis mode: "persistent" (default) or "actor"
    let redis_mode = env::var("ORBIT_REDIS_MODE").unwrap_or_else(|_| "persistent".to_string());
    info!(
        "üîß Redis mode: {} (set ORBIT_REDIS_MODE=actor|persistent)",
        redis_mode
    );

    // Determine PostgreSQL mode: "persistent" (default) or "actor"
    let postgres_mode =
        env::var("ORBIT_POSTGRES_MODE").unwrap_or_else(|_| "persistent".to_string());
    info!(
        "üó∫ PostgreSQL mode: {} (set ORBIT_POSTGRES_MODE=actor|persistent)",
        postgres_mode
    );

    // Configure protocols depending on mode
    // For PostgreSQL, we'll disable built-in and create our own server to control the mode
    let protocol_config = if redis_mode.eq_ignore_ascii_case("actor") {
        ProtocolConfig {
            redis_enabled: true, // use built-in actor-backed RESP server
            redis_port: 6379,
            redis_bind_address: "127.0.0.1".to_string(),
            postgres_enabled: false, // we'll create PostgreSQL server manually
            postgres_port: 15432,
            postgres_bind_address: "127.0.0.1".to_string(),
        }
    } else {
        ProtocolConfig {
            redis_enabled: false, // use external persistent RESP server below
            redis_port: 6379,
            redis_bind_address: "127.0.0.1".to_string(),
            postgres_enabled: false, // we'll create PostgreSQL server manually
            postgres_port: 15432,
            postgres_bind_address: "127.0.0.1".to_string(),
        }
    };

    // Create and configure the server with persistence
    // Note: We'll need to manually configure PostgreSQL after building
    let server = OrbitServer::builder()
        .with_namespace("integrated-demo")
        .with_port(50051) // gRPC port
        .with_bind_address("127.0.0.1")
        .with_protocols(protocol_config)
        .with_persistence(persistence_config)
        .build()
        .await?;

    // Create configurable PostgreSQL server based on mode
    let postgres_query_engine = if postgres_mode.eq_ignore_ascii_case("actor") {
        info!("üé≠ PostgreSQL using actor-based in-memory storage");
        QueryEngine::new() // In-memory actor storage
    } else {
        // Try to use persistent storage
        let pg_data_path = data_dir.join("postgresql");
        if !pg_data_path.exists() {
            std::fs::create_dir_all(&pg_data_path)
                .map_err(|e| format!("Failed to create PostgreSQL data directory: {}", e))?;
        }

        match RocksDbTableStorage::new(&pg_data_path) {
            Ok(storage) => {
                info!(
                    "üó∫ PostgreSQL using persistent RocksDB storage at: {}",
                    pg_data_path.display()
                );
                QueryEngine::new_with_persistent_storage(Arc::new(storage))
            }
            Err(e) => {
                info!("‚ö†Ô∏è Failed to create PostgreSQL persistent storage, falling back to actor mode: {}", e);
                QueryEngine::new()
            }
        }
    };

    let postgres_server =
        PostgresServer::new_with_query_engine("127.0.0.1:15432".to_string(), postgres_query_engine);

    // Display server configuration
    let stats = server.stats().await?;
    info!("‚úÖ Server configured successfully!");
    info!("   Namespace: {}", stats.node_id.namespace);
    info!("   Node ID: {}", stats.node_id.key);
    info!(
        "   Persistence: RocksDB (LSM-tree) at {}",
        data_dir.display()
    );
    info!("");
    info!("üåê Protocol Servers:");
    info!("   - gRPC: 127.0.0.1:50051 (Orbit clients)");

    if stats.protocol_stats.redis_enabled {
        info!(
            "   - Redis: {} (redis-cli, Redis clients)",
            stats.protocol_stats.redis_address.unwrap()
        );
    }

    if stats.protocol_stats.postgres_enabled {
        info!(
            "   - PostgreSQL: {} (psql, PostgreSQL clients)",
            stats.protocol_stats.postgres_address.unwrap()
        );
    }

    info!("");
    info!("üì° Client Connection Examples:");
    info!("   Redis:      redis-cli -h localhost -p 6379");
    info!("   PostgreSQL: psql -h localhost -p 15432 -U orbit -d actors");
    info!("   gRPC:       Use OrbitClient or grpcurl -plaintext localhost:50051 list");
    info!("");
    info!("üí° Try these Redis commands (persisted with RocksDB):");
    info!("   > SET mykey \"Hello Orbit\"");
    info!("   > GET mykey");
    info!("   > SET tempkey \"This expires\" EX 30");
    info!("   > TTL tempkey");
    info!("   > HSET user:1 name \"Alice\" age \"30\"");
    info!("   > HGETALL user:1");
    info!("");
    info!("üí° Try these PostgreSQL commands (persisted with RocksDB):");
    info!("   CREATE TABLE users (id SERIAL PRIMARY KEY, name TEXT);");
    info!("   INSERT INTO users (name) VALUES ('Alice');");
    info!("   SELECT * FROM users;");
    info!("");
    info!("üì¢ Note: All data is persisted across server restarts!");
    info!("   Stop the server (Ctrl+C) and restart to see data persistence in action.");
    info!("");

    // If in persistent mode, set up persistent Redis data provider
    let (redis_provider, _redis_data_dir_opt) = if !redis_mode.eq_ignore_ascii_case("actor") {
        let redis_data_dir = data_dir.join("redis");
        if !redis_data_dir.exists() {
            std::fs::create_dir_all(&redis_data_dir)
                .map_err(|e| format!("Failed to create Redis data directory: {}", e))?;
        }
        let redis_config = RedisDataConfig {
            enable_expiry_cleanup: true,
            cleanup_interval_seconds: 60,
            cleanup_batch_size: 1000,
            key_prefix: "redis:".to_string(),
        };
        let provider = Arc::new(
            RocksDbRedisDataProvider::new(&redis_data_dir, redis_config)
                .map_err(|e| format!("Failed to create Redis data provider: {}", e))?,
        );
        provider
            .initialize()
            .await
            .map_err(|e| format!("Failed to initialize Redis provider: {}", e))?;
        info!(
            "üì¶ Redis data provider initialized at: {}",
            redis_data_dir.display()
        );
        (Some(provider), Some(redis_data_dir))
    } else {
        (None, None)
    };

    // Start the main server in the background
    let mut server_tasks = Vec::new();

    // Start the gRPC and PostgreSQL server in background
    let mut main_server = server;
    server_tasks.push(tokio::spawn(async move {
        if let Err(e) = main_server.start().await {
            error!("Main server failed: {}", e);
        }
    }));

    // Give the main server time to start
    tokio::time::sleep(tokio::time::Duration::from_millis(500)).await;

    // Start PostgreSQL server
    info!(
        "üó∫ Starting PostgreSQL server on 127.0.0.1:15432 ({} mode)",
        postgres_mode.to_lowercase()
    );
    server_tasks.push(tokio::spawn(async move {
        if let Err(e) = postgres_server.run().await {
            error!("PostgreSQL server failed: {}", e);
        }
    }));

    if !redis_mode.eq_ignore_ascii_case("actor") {
        // Create OrbitClient for persistent Redis server
        let server_url = "http://127.0.0.1:50051";
        let orbit_client = orbit_client::OrbitClient::builder()
            .with_namespace("integrated-demo")
            .with_server_urls(vec![server_url.to_string()])
            .build()
            .await
            .map_err(|e| format!("Failed to create OrbitClient for Redis: {}", e))?;

        // Start persistent Redis server
        let redis_bind_addr = "127.0.0.1:6379";
        let persistent_redis_server = PersistentRespServer::new(
            redis_bind_addr,
            Arc::new(orbit_client),
            redis_provider.expect("redis provider must exist in persistent mode"),
        );
        info!(
            "üî¥ Starting Redis server on {} ({} mode)",
            redis_bind_addr,
            redis_mode.to_lowercase()
        );
        server_tasks.push(tokio::spawn(async move {
            if let Err(e) = persistent_redis_server.run().await {
                error!("Redis server failed: {}", e);
            }
        }));
        info!("‚úÖ All servers started successfully!");
        info!("   - gRPC: 127.0.0.1:50051 (Orbit clients)");
        info!(
            "   - Redis: 127.0.0.1:6379 (redis-cli) - {}",
            redis_mode.to_uppercase()
        );
        info!(
            "   - PostgreSQL: 127.0.0.1:15432 (psql) - {}",
            postgres_mode.to_uppercase()
        );
    } else {
        info!("‚úÖ All servers started successfully!");
        info!("   - gRPC: 127.0.0.1:50051 (Orbit clients)");
        info!(
            "   - Redis: 127.0.0.1:6379 (redis-cli) - {}",
            redis_mode.to_uppercase()
        );
        info!(
            "   - PostgreSQL: 127.0.0.1:15432 (psql) - {}",
            postgres_mode.to_uppercase()
        );
    }
    info!("");

    // Wait for any server to finish (which likely means an error occurred)
    if !server_tasks.is_empty() {
        let (result, _index, _remaining) = future::select_all(server_tasks).await;
        if let Err(e) = result {
            error!("One of the servers failed: {}", e);
            return Err(format!("Server task failed: {}", e).into());
        }
    }

    Ok(())
}
