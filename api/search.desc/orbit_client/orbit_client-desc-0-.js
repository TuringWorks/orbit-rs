searchState.loadedDescShard("orbit_client", 0, "Macro for generating actor proxy methods This provides a …\nClient-side addressable management and lifecycle\nOrbit client implementation for connecting to and managing …\nActor invocation system for routing and executing actor …\nActor proxy generation and utilities\nTrait for constructing actor instances\nActor context providing access to system services\nTrait implemented by all actor implementations\nActor instance with metadata\nTrait for actor lifecycle callbacks\nRegistry for managing actor instances\nReason for actor deactivation\nDefault constructor that creates instances using a closure\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalled when the actor is first activated\nCalled when the actor is deactivated\nStatistics about the Orbit client\nMain Orbit client for interacting with the actor system\nBuilder for configuring and creating an Orbit client\nConfiguration for the Orbit client\nGet a reference to an actor\nGet a builder for configuring a new client\nDeactivate a specific actor instance\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new Orbit client with the given configuration\nCreate a new Orbit client in offline mode (no server …\nGet the client’s node ID\nRegister an actor constructor for a specific actor type\nShutdown the client gracefully\nGet statistics about the client\nActor reference that provides typed access to an actor\nResult of an actor invocation\nSystem for managing actor invocations\nComplete a pending invocation with a result\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvoke a method on the actor\nGet the addressable reference\nRoute an invocation to the appropriate handler\nSend an invocation to an actor and wait for the result\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTrait for creating actor proxies\nHelper trait for creating typed actor references")