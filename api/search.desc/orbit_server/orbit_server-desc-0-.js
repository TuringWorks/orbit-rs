searchState.loadedDescShard("orbit_server", 0, "Load balancing and actor placement algorithms for the …\nServer-side mesh management and cluster coordination\nProvider-based persistence system for Orbit server\nMain Orbit server implementation for hosting actors and …\nManages load balancing and actor placement decisions\nStatistics about the load balancer\nLoad balancing strategies for actor placement\nLoad information for a cluster node\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet current load statistics\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRemove a node from load tracking\nSelect the best node to host a new actor instance\nUpdate load information for a node\nManages the distributed directory of addressables\nManages cluster node membership and health\nStatistics about the cluster\nStatistics about the addressable directory\nClean up expired leases\nClean up nodes with expired leases\nFind which node hosts a specific addressable\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all active nodes in the cluster\nGet the local node information\nGet information about a specific node\nGet all addressables hosted by a node\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRegister an addressable lease\nRegister this node in the cluster\nRemove an addressable lease\nRemove a node from the cluster\nCheck if a node’s lease should be renewed\nStart background tasks for cluster management\nGet statistics about the directory\nGet cluster statistics\nUpdate information about a cluster node\nAWS S3 with enhanced GPU and compute optimizations\nAWS S3 configuration with enhanced GPU and compute …\nGPU-specific optimizations for AWS S3\nProvider for storing addressable directory information\nArchive storage (365-day minimum)\nAzure Blob Storage\nAzure Blob Storage configuration\nProvider for storing cluster node information\nColdline storage (90-day minimum)\nComposite provider with primary/backup configuration\nComposite provider configuration with failover\nCompression types for storage optimization\nCopy-on-Write B+ Tree with WAL\nDeep Archive for long-term archival\nDigital Ocean Spaces object storage\nDigital Ocean Spaces storage configuration\nDisk backup configuration for memory provider\netcd distributed key-value store\netcd configuration\nFlash-optimized storage with multipathing\nFlash-optimized storage configuration\nPrefetch configuration for GCP Storage\nGCP Storage with enhanced compute integration\nGCP Cloud Storage classes\nGCP Storage configuration with enhanced compute integration\nGPU-specific optimizations for GCP Storage\nGlacier for archival\nGoogle Cloud Storage\nGoogle Cloud Storage configuration\nIntelligent Tiering (automatic optimization)\nIsolation levels for transactions\nKubernetes-based storage\nKubernetes storage configuration\nLSM-Tree with compaction\nIn-memory storage (default, non-persistent)\nMemory storage configuration\nMinIO object storage\nMinIO configuration\nNearline storage (30-day minimum)\nOne Zone Infrequent Access\nConfiguration for different storage providers\nMetrics for persistence operations\nCore persistence provider trait\nRegistry for managing multiple persistence providers\nHealth status of a persistence provider\nRedis in-memory data structure store\nRedis configuration\nReduced redundancy (deprecated, for compatibility)\nRocksDB embedded database\nAmazon S3 compatible storage\nS3-compatible storage configuration\nAWS S3 storage classes for different performance/cost …\nStandard storage for frequently accessed data\nStandard storage\nStandard Infrequent Access\nTiKV distributed transactional key-value store\nTiKV configuration for distributed storage\nTransaction context for atomic operations\nDigital Ocean Spaces access key\nAWS access key ID\nBatch size for bulk operations\nBegin a transaction\nS3 bucket name\nCloud Storage bucket name\nPrefetch buffer size in bytes\nCA certificate path for TLS\nCDN endpoint URL (if CDN is enabled)\nRemove expired leases\nRemove expired nodes\nClient certificate path for mTLS\nClient private key path for mTLS\nCloud storage persistence providers\nCloudFront distribution ID\nCommit a transaction\nComposite upload threshold in bytes\nEnable compression for neural network models\nConfiguration system for persistence providers\nConnection timeout in seconds\nConnection timeout in seconds\nConnection timeout in seconds\nConnection timeout in seconds\nCoprocessor pool size\nCopy-on-Write B+ Tree persistence provider for orbit-server\nPath to service account key file\nEnable persistence to disk for recovery\nDynamic provider management with health monitoring and …\nEnable async commit for better performance\nEnable CDN acceleration for reads\nUse Google Cloud CDN for global access\nEnable compression for stored data\nEnable automatic data locality optimization\nEnable server-side encryption\nEnable server-side encryption\nEnable customer-managed encryption\nUse Cloud Storage FUSE for direct file system access\nEnable gzip compression for model files\nUse Google Cloud Storage Insights for optimization\nS3 Intelligent Tiering for cost optimization\nEnable one-phase commit optimization\nEnable parallel composite uploads\nEnable pessimistic transactions (default: optimistic)\nPrefetch data for GPU batch processing\nEnable resumable uploads for large files\nEnable S3 Select for partial data retrieval\nEnable SSL/TLS (recommended: true)\nEnable SSL/TLS (recommended: true)\nEnable TLS/SSL\nEnable S3 Transfer Acceleration for GPU workloads\nEnable Cloud Storage Transfer Service\nEnable prefetching\nDigital Ocean Spaces endpoint (e.g., “…\nPersistence provider factory for orbit-server\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFUSE mount point for GPU containers\nGet a specific addressable provider by name\nGet a specific cluster provider by name\nGet the default addressable directory provider\nGet the default cluster node provider\nRetrieve an addressable lease\nRetrieve node information\nGPU-specific optimizations\nGPU-specific optimizations\nCheck health status\nInitialize the provider\nEC2 instance role ARN (for cross-account access)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKey prefix for organizing data\nKMS key ID for encryption (optional)\nCloud KMS key name for encryption\nLabels for cost tracking and organization\nList all active nodes\nList all active leases\nList all nodes (including inactive)\nList all leases for a node\nList all registered provider names\nLSM-Tree persistence provider for orbit-server\nMaximum concurrent uploads for GPU data\nMaximum concurrent uploads\nMaximum number of connections in the pool\nMaximum number of entries to keep in memory\nMaximum retries for failed operations\nMemory-based persistence provider implementation\nGet current metrics\nPart size for multipart uploads\nEnable multipart uploads for large GPU datasets\nOptimize for TPU/GPU training workloads\nOptimize for GPU training data access patterns\nParallel download threads for large datasets\nPrefetch patterns (file extensions or patterns)\nList of PD (Placement Driver) endpoints\nPrefetch buffer size in bytes\nPrefetch configuration for batch processing\nOptional path prefix for organization\nOptional path prefix for organization\nOptional path prefix for organization\nGCP project ID\nRead timeout in seconds\nRead timeout in seconds\nRead timeout in seconds\nDigital Ocean region (e.g., “nyc3”, “sfo3”, “ams3…\nAWS region (e.g., “us-east-1”, “us-west-2”)\nGCP region for the bucket\nRegion cache size\nRegister an addressable directory provider\nRegister a cluster node provider\nRemove a lease\nRemove a node\nUpdate node lease\nRequest timeout in seconds\nResumable upload threshold in bytes\nNumber of retry attempts\nNumber of retry attempts\nNumber of retry attempts\nRetry backoff delay in milliseconds\nRocksDB persistence provider for orbit-server\nRollback a transaction\nDigital Ocean Spaces secret key\nAWS secret access key\nService account key JSON (base64 encoded)\nOptional session token for temporary credentials\nShutdown the provider gracefully\nSpaces bucket/space name\nS3 storage class optimization\nStorage class optimization\nStore an addressable lease\nBulk operations for efficiency\nStore node information\nCustom metadata tags for cost tracking and organization\nCustom metadata tags for cost tracking\nNumber of prefetch threads\nTiKV persistence provider for orbit-server\nTransaction timeout in seconds\nUpdate an existing lease\nUpdate node information\nUse CloudFront for global GPU cluster access\nUse S3 Express One Zone for ultra-low latency (GPU …\nUse regional buckets for GPU clusters\nVPC endpoint configuration for private access\nWrite timeout in seconds\nWrite timeout in seconds\nWrite timeout in seconds\nAzure Blob Storage provider for addressable directory\nAzure Blob Storage provider for cluster nodes\nDigital Ocean Spaces provider for addressable directory\nDigital Ocean Spaces provider for cluster nodes\nGoogle Cloud Storage provider for addressable directory\nGoogle Cloud Storage provider for cluster nodes\nS3-compatible storage provider for addressable directory\nS3-compatible storage provider for cluster nodes\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConfiguration file structure for …\nDynamic provider configuration\nEnvironment variable configuration helper\nFailover configuration\nFailover strategies\nHealth monitoring configuration\nLoad balance based on current load\nUse the provider with lowest latency\nBuilder for creating persistence provider configurations\nFinalized persistence provider configuration\nUse providers in priority order\nRound-robin through available providers\nConfiguration validation error details\nCreate Azure configuration from environment variables\nBuild the configuration\nCreate a new builder\nHealth check interval in seconds\nTimeout for health checks in seconds\nCircuit breaker open duration in seconds\nHelper function to create configuration errors\nCreate dynamic provider manager from this configuration\nCreate provider registry from this configuration\nCreate default memory-only configuration\nGet default provider names\nCreate Digital Ocean Spaces configuration from environment …\nGet dynamic configuration\nEnable automatic failover\nEnable automatic scaling decisions\nEnable circuit breaker pattern\nEnable failback to primary when it recovers\nEnable performance monitoring\nCreate etcd configuration from environment variables\nDelay before attempting failback in seconds\nFailover configuration\nNumber of consecutive failures before marking unhealthy\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLoad configuration from file\nLoad configuration from JSON string\nLoad configuration from TOML string\nHealth monitoring configuration\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum failover attempts before giving up\nPerformance monitoring window in seconds\nGet all configured provider names\nDelay between failover attempts in seconds\nCreate S3 configuration from environment variables\nFailover strategy\nNumber of consecutive successes before marking healthy\nCreate TiKV configuration from environment variables\n<code>ToString::to_string</code>, but without panic on OOM.\nValidate the configuration\nValidate Azure provider configuration\nValidate composite provider configuration\nValidate Digital Ocean Spaces provider configuration\nValidate etcd provider configuration\nValidate Google Cloud provider configuration\nValidate memory provider configuration\nHelper function to validate non-empty string fields\nHelper function to validate non-empty paths\nHelper function to validate positive numeric values\nValidate Redis provider configuration\nValidate RocksDB provider configuration\nValidate S3 provider configuration\nHelper function to validate S3-style credentials\nValidate TiKV provider configuration\nHelper function to validate TLS configuration\nEnable/disable auto-scaling\nAdd an AWS S3 provider configuration with GPU optimizations\nAdd an Azure provider configuration\nAdd a composite provider configuration\nSet different defaults for addressable and cluster …\nAdd a Digital Ocean Spaces provider configuration\nSet complete dynamic configuration\nAdd an etcd provider configuration\nConfigure failover settings\nAdd a Google Cloud Storage provider configuration\nAdd a Google Cloud provider configuration\nConfigure health monitoring settings\nAdd a memory provider configuration\nEnable/disable performance monitoring\nAdd a Redis provider configuration\nAdd a RocksDB provider configuration\nAdd an S3 provider configuration\nAdd a TiKV provider configuration\nCopy-on-Write B+ Tree node\nCOW B+ Tree persistence implementation for addressable …\nCOW B+ Tree persistence implementation for cluster nodes\nConfiguration for COW B+ Tree persistence\nSnapshot metadata\nWrite-Ahead Log entry\nAppend an entry to the WAL\nCopy-on-write clone of this node\nData directory for WAL and snapshots\nEnable compression for snapshots\nFind the index where a key should be inserted\nFlush buffered entries to disk\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the last sequence number from the WAL file\nInsert an addressable lease in a leaf node\nInsert a node info in a leaf node\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum keys per B+ Tree node\nWAL buffer size in bytes\nSync interval for WAL flush (seconds)\nDynamic provider manager with health monitoring and …\nHealth status of a provider\nPerformance metrics for a provider\nHealth and performance monitoring for a provider\nExecute an operation with automatic failover\nManually trigger failover to a specific provider\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet current primary provider\nGet current health status\nGet current metrics\nGet the best available provider based on health and …\nGet provider with lowest average response time\nGet provider using priority-based strategy\nGet provider using round-robin strategy among healthy …\nGet provider metrics if the provider is healthy\nGet status of all providers\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the circuit breaker should allow requests\nCheck if a provider is healthy\nRecord a failed operation\nRecord a successful operation\nRegister a provider with monitoring\nStart background health monitoring\nConfiguration builder for programmatic setup\nCreate an addressable directory persistence provider based …\nHelper function to create and initialize any provider that …\nCreate a cluster node persistence provider based on …\nReturns the argument unchanged.\nHelper function to get environment variable with default …\nInitialize a complete persistence registry with the …\nCalls <code>U::from(self)</code>.\nLoad persistence configuration from environment variables\nLoad persistence configuration from a TOML file\nHelper function to parse boolean environment variable with …\nHelper function to parse environment variable with default …\nBlock cache for frequently accessed data\nLSM-Tree implementation for addressable directory\nLSM-Tree implementation for cluster nodes\nConfiguration for LSM-Tree persistence\nIn-memory table for recent writes\nImmutable on-disk SSTable with bloom filter\nWrite-ahead log for durability\nBloom filter false positive rate\nCompaction trigger threshold (number of SSTables)\nData directory for SSTables and WAL\nEnable background compaction\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum number of memtables to keep in memory\nMaximum memtable size in bytes before flush\nIn-memory persistence provider for addressable directory\nBackup data structure for memory provider\nIn-memory persistence provider for cluster nodes\nTransaction state for memory provider\nOperations within a transaction\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRocksDB implementation for addressable directory\nRocksDB implementation for cluster nodes\nConfiguration for RocksDB persistence\nCache size for block cache in bytes\nPath to the RocksDB database directory\nEnable statistics collection\nEnable Write-Ahead Log (WAL)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum number of background compaction threads\nMaximum number of write buffers to maintain in memory\nTarget file size for level-1 files\nSize of the write buffer (memtable) in bytes\nTiKV implementation for addressable directory provider\nTiKV client wrapper for managing connections\nTiKV implementation for cluster node provider\nTiKV operation types for batch processing\nExecute batch operations\nExecute a delete operation\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExecute a get operation\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new TiKV client with the given configuration\nExecute a put operation\nScan a key range\nMain Orbit server for hosting actors and managing cluster …\nBuilder for configuring and creating an Orbit server\nConfiguration for the Orbit server\nConfiguration for protocol servers\nInformation about protocol servers\nStatistics about the Orbit server\nGet a builder for configuring a new server\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new Orbit server with the given configuration\nGet the node information for this server\nPostgreSQL wire protocol server (initialized at startup)\nRegister an addressable type that this server can host\nShutdown the server gracefully\nStart the server and begin accepting connections\nGet server statistics\nConfigure PostgreSQL server bind address\nEnable or disable PostgreSQL protocol server\nConfigure PostgreSQL server port\nConfigure all protocol settings at once\nConfigure Redis server bind address\nEnable or disable Redis protocol server\nConfigure Redis server port")