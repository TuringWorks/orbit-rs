searchState.loadedDescShard("orbit_util", 0, "Convenience macro for creating mock test setups\nComprehensive mock framework for Orbit components\nConvenience macro for skipping tests when conditions aren…\nMacro to skip tests based on configuration\nTest configuration utilities for choosing between mock and …\nMacro to get test configuration and print it\nExtensions for working with metrics\nReturns the argument unchanged.\nIncrement a counter with labels\nCalls <code>U::from(self)</code>.\nRecord a histogram value with labels\nSet a gauge value with labels\nUtility functions for random generation, equivalent to …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGenerate a random integer within a range\nGenerate a random string of default length (16 characters)\nGenerate a random string of specified length using …\nGenerate a random u64\nMock actor reference for testing\nThread-safe mock actor registry\nMock actor storage for simulating actor state\nMock client statistics\nConfiguration for mock behavior\nMock invocation result\nMock OrbitClient that simulates client-side operations\nMock OrbitServer for server-side testing\nMock server statistics\nComplete mock test setup with client and server\nBuilder for mock test setups\nCreate a mock actor reference\nCreate a new mock test setup with builder pattern\nCleanup resources\nSimulate actor deactivation\nFailure rate (0.0 = no failures, 1.0 = all failures)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet or create actor state\nGet combined statistics\nGet client statistics\nGet server statistics\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSimulate actor method invocation\nInvoke a method on the mock actor\nCheck if server is running\nMaximum number of actors to keep in memory\nNetwork delay duration (if enabled)\nCreate a new mock test setup with default configuration\nCreate a new mock OrbitClient\nCreate a new mock OrbitServer\nRegister an actor type\nRegister actor types on the server\nCheck if operation should fail based on failure rate\nSimulate shutdown\nSimulate network delay if configured\nWhether to simulate network delays\nStart both server and client (simulated)\nStart the mock server\nStop the mock server\nUpdate actor state\nWhether to enable detailed logging\nCreate a new mock OrbitClient with custom configuration\nCreate a new mock OrbitServer with custom configuration\nUse mock implementations (default for CI/unit tests)\nUse real services (for integration tests with running …\nSkip tests that require external services\nTest configuration for Orbit components\nTest execution mode\nTest setup helper that works with both mock and real …\nClean up resources\nTimeout for connecting to real services\nGet a description of the current test configuration\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate test configuration based on environment variables\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if using mocks\nMock configuration (when using Mock mode)\nGet mock setup (if in mock mode)\nGet test mode\nTest execution mode\nCreate a new universal test setup\nOrbitServer gRPC URL\nPostgreSQL server URL for postgres wire tests\nPrint test configuration information\nRedis server URL for RESP tests\nRegister actor types (only relevant for mock mode)\nGet service URLs (if in real mode)\nBase URLs for real services (when using Real mode)\nCheck if tests should be skipped\nStart the test setup\nCheck if tests should use mock implementations\nCheck if tests should use real services\nWhether to enable verbose logging during tests\nTime utilities for working with timestamps and durations\nCreate a Duration from milliseconds\nCreate a Duration from seconds\nReturns the argument unchanged.\nConvert SystemTime to <code>DateTime&lt;Utc&gt;</code>\nCalls <code>U::from(self)</code>.\nGet current UTC timestamp\nGet timestamp in milliseconds since Unix epoch")