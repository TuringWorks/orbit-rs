searchState.loadedDescShard("orbit_protocols", 0, "Orbit Protocol Adapters\nAQL (ArangoDB Query Language) support for multi-model …\nArangoDB Protocol Adapter for Orbit-RS\nBolt Protocol (Neo4j) stub implementation\nCypher/Bolt Protocol adapter for Neo4j compatibility\nError types for protocol adapters\nGraph database implementation for RedisGraph compatibility\nGraphRAG (Graph-enhanced Retrieval-Augmented Generation) …\nModel Context Protocol (MCP) Server for Orbit\nMachine Learning Module for Orbit-RS\nNeo4j Protocol Adapter for Orbit-RS\nOrbitQL Protocol Adapter\nRedis data persistence module for orbit-protocols\nPostgreSQL Wire Protocol adapter for Orbit\nRESP (Redis Serialization Protocol) adapter for Orbit\nTime Series Module\nVector Store Module\nAQL (ArangoDB Query Language) parser for multi-model …\nAQL data model types for multi-model database operations\nGraphRAG function support for AQL (ArangoDB Query Language)\nAQL query engine with GraphRAG integration\nAQL query clause types\nAQL condition types\nAQL expression types\nAQL query parser\nComplete parsed AQL query with clauses\nAQL token types\nToken parser for building AQL AST\nSpecialized tokenizer for AQL queries with reduced …\nArray literal\nCOLLECT clause for grouping\nCOLLECT group specification\nComparison condition\nComparison operators\nFILTER clause for filtering\nFOR clause for iteration\nFOR clause for graph traversal\nINSERT clause for creating documents\nLET clause for variable assignment\nLIMIT clause for pagination\nLiteral value\nObject literal\nProperty access (obj.prop)\nREMOVE clause for deleting documents\nRETURN clause for result projection\nSORT clause for ordering\nSort direction\nSORT item specification\nTraversal direction for graph operations\nUPDATE clause for modifying documents\nVariable reference\nClassify a token based on its content\nStatic token classification for use by tokenizer\nQuery clauses in order\nEnable debug output for parsing\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new AQL parser\nParse an AQL query string into an AST\nParse tokens into an AQL query AST\nTokenize the AQL query string using decomposed …\nCreate a new AQL parser with debug mode enabled\nAQL bind variable for parameterized queries\nAQL collection metadata and configuration\nAQL document representing a single document in a collection\nAQL edge document for graph operations\nAQL index for optimizing queries\nAQL path representing a sequence of vertices and edges\nAQL traversal result for graph operations\nAQL value type supporting all ArangoDB data types\nAQL vertex document for graph operations\nArray of values\nBoolean value\nCollection status enumeration\nCollection type enumeration\nDate/time value\nCollection is being deleted\nDocument collection\nEdge collection (for graphs)\nFull-text search index\nGeospatial index\nHash index for equality lookups\nIndex type enumeration\nCollection is fully loaded and operational\nCollection is being loaded\nCollection is being created\nNull value\nNumber value (integer or float)\nObject with key-value pairs\nPersistent index for sorted access\nPrimary key index\nSkip list index for range queries\nString value\nTTL (time-to-live) index\nCollection is being unloaded\nAdd a bind variable\nCollection type (document or edge)\nNumber of documents\nDocument data\nDocument data\nEdge data\nTraversed edges\nEdges in the path\nFields included in the index\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSource vertex ID\nGet a field value by name\nGet a bind variable value\nDocument ID (collection/key)\nDocument ID (collection/key)\nIndex ID\nEdge ID\nIndex type\nCollection indexes\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDocument key (unique within collection)\nDocument key (unique within collection)\nEdge key\nCollection name\nCreate a new AQL document\nCreate a new AQL edge\nCreate new empty bind variables\nTraversal paths\nDocument revision\nDocument revision\nEdge revision\nSet a field value in the document\nWhether the index is sparse\nCollection status\nTarget vertex ID\nConvert to graph node\nConvert to graph relationship\nConvert to JSON value\nWhether the index is unique\nVariable bindings\nVisited vertices\nVertices in the path\nGraphRAG query engine for AQL function calls\nHelper function to convert AqlValue to JsonValue\nHelper to create a placeholder result for unimplemented …\nHelper to create a success result object with common fields\nExecute GRAPHRAG_ANALYZE_TRENDS function …\nExecute GRAPHRAG_BUILD_KNOWLEDGE function …\nExecute GRAPHRAG_DETECT_COMMUNITIES function …\nExecute GRAPHRAG_EXTRACT_ENTITIES function …\nExecute GRAPHRAG_FIND_PATHS function …\nExecute GRAPHRAG_FIND_SIMILAR function …\nExecute GRAPHRAG_GET_STATS function …\nExecute an AQL GraphRAG function call\nExecute GRAPHRAG_LIST_ENTITIES function …\nExecute GRAPHRAG_QUERY function …\nExecute GRAPHRAG_SEMANTIC_SEARCH function …\nHelper function to extract string argument\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHelper function to convert JsonValue to AqlValue\nCreate new AQL GraphRAG engine\nCreate new AQL GraphRAG engine without OrbitClient …\nHelper function to parse document argument (can be a …\nHelper function to parse options argument\nAQL query engine with GraphRAG function support\nAQL query execution result\nResult data as AQL values\nExecute GraphRAG function call\nExecute parsed AQL query (placeholder implementation)\nExecute an AQL query\nReturns the argument unchanged.\nReturns the argument unchanged.\nGraphRAG function engine\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if query contains GraphRAG function calls\nQuery execution metadata\nCreate new AQL query engine\nCreate new AQL query engine with GraphRAG support\nParse GraphRAG function call (simplified implementation)\nAQL parser for standard queries\nAQL (ArangoDB Query Language) Spatial Functions for …\nAQL spatial function executor\nParse AQL query and extract spatial functions\nAQL spatial function result\nDocument with potential spatial fields\nSpatial collection containing documents with geo data\nSpatial index on a collection\nTypes of spatial indexes supported by ArangoDB\nAdd a collection with spatial fields\nAdd a document to a collection\nDocument collections with spatial data\nCreate a spatial index on a collection\nParse and execute an AQL query with spatial functions\nExecute an AQL spatial function\nGet the underlying executor for direct function calls\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFULLTEXT with spatial constraints\nGEO_AREA(geometry)\nGEO_BUFFER(geometry, radius)\nGEO_CENTROID(geometry)\nGEO_CONTAINS(geometry1, geometry2)\nGEO_DISTANCE(lat1, lng1, lat2, lng2)\nGEO_EQUALS(geometry1, geometry2)\nGEO_IN_RANGE(collection, lat_attribute, lng_attribute, …\nGEO_INTERSECTS(geometry1, geometry2)\nGEO_LENGTH(geometry)\nGEO_LINESTRING(coordinates_array)\nGEO_MULTILINESTRING(linestrings_array)\nGEO_MULTIPOINT(points_array)\nGEO_MULTIPOLYGON(polygons_array)\nGEO_POINT(lng, lat)\nGEO_POLYGON(coordinates_array)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNEAR(collection, lat, lng, limit, geo_attribute)\nCreate a new AQL spatial executor\nSpatial indexes for collections\nWITHIN(collection, lat, lng, radius, geo_attribute)\nWITHIN_RECTANGLE(collection, lat1, lng1, lat2, lng2, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBolt protocol implementation (stub)\nCypher query parser for Neo4j compatibility\nGraph query engine for Cypher execution\nGraphRAG procedure support for Cypher/Bolt protocol\nCypher/Bolt server (stub)\nBolt protocol handler\nReturns the argument unchanged.\nHandle HELLO message\nHandle RUN message (execute Cypher query)\nHandle Bolt handshake\nCalls <code>U::from(self)</code>.\nCreate a new Bolt protocol handler\n– both directions\nWHERE clause condition\nCREATE clause for creating nodes/relationships\nCypher query clause types\nCypher query parser\nComplete parsed Cypher query with clauses\nSpecialized tokenizer for Cypher queries with reduced …\n&lt;– incoming\nMATCH clause for pattern matching\nNode pattern\nNode pattern specification\n–&gt; outgoing\nGraph pattern in Cypher queries\nElements that make up a pattern\nProperty equality check\nRelationship pattern\nDirection of relationship traversal\nRelationship pattern specification\nRETURN clause for result projection\nRETURN clause item\nToken types for Cypher parsing\nToken parser for building AST\nWHERE clause for filtering\nOptional alias\nClassify a token based on its content\nStatic token classification for use by tokenizer\nQuery clauses in order\nEnable debug output for parsing\nRelationship direction\nPattern elements (nodes and relationships)\nExpression to return\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNode labels\nCreate a new Cypher parser\nParse a Cypher query string into an AST\nParse tokens into a query AST\nNode properties\nRelationship properties\nRelationship type\nTokenize the query string using decomposed tokenization …\nVariable name for the node\nVariable name for the relationship\nCreate a new Cypher parser with debug mode enabled\nQuery execution context for variable bindings\nGraph query engine that executes Cypher queries\nQuery execution result\nBound node variables\nBound relationship variables\nColumn names for the result\nCreate a node from pattern\nCreate a relationship from pattern\nExecute a CREATE clause\nExecute a MATCH clause\nExecute a pre-parsed Cypher query\nExecute a Cypher query string\nExecute a RETURN clause\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMatch nodes based on pattern\nMatch relationships based on pattern\nCreate a new graph engine with the given storage backend\nResult nodes\nResult relationships\nGraph storage backend\nGraphRAG procedure handler for Bolt/Cypher protocol\nExecute orbit.graphrag.analyzeTrends procedure …\nExecute orbit.graphrag.augmentGraph procedure (placeholder)\nExecute orbit.graphrag.buildKnowledge procedure CALL …\nExecute orbit.graphrag.detectCommunities procedure …\nExecute orbit.graphrag.extractEntities procedure CALL …\nExecute orbit.graphrag.findPaths procedure CALL …\nExecute orbit.graphrag.findSimilar procedure (placeholder) …\nExecute orbit.graphrag.getStats procedure CALL …\nExecute orbit.graphrag.listEntities procedure (placeholder)\nExecute a GraphRAG procedure call\nExecute orbit.graphrag.processDocuments procedure …\nExecute orbit.graphrag.ragQuery procedure CALL …\nExecute orbit.graphrag.semanticSearch procedure …\nExecute orbit.graphrag.streamEntities procedure …\nHelper function to extract string argument\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate new Bolt GraphRAG procedures handler\nCreate new Bolt GraphRAG procedures handler without …\nHelper function to parse config argument\nHelper function to parse metadata argument\nCypher/Bolt protocol server\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new Cypher server\nStart the server\nActor operation error\nAQL query parsing error\nAuthentication error\nAuthorization error\nConnection error\nCypher query parsing error\nContains the error value\nI/O error\nContains the success value\nGeneric error\nSQL parsing error\nPostgreSQL wire protocol error\nErrors that can occur in protocol adapters\nResult type for protocol operations\nRESP protocol parsing error\nREST API error\nSerialization/deserialization error\nCreate an “Actor error” from any error\nHelper for “already exists” errors\nHelper for column not found errors\nHelper for “does not exist” errors\nCreate a “Failed to get actor” error\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHelper for “not implemented” errors\nCreate a “Portal not found” error\nHelper for relation does not exist errors (common in …\nCreate a serialization error\nCreate a “Statement not found” error\nCreate a “Table does not exist” error\nCreate a “Transaction not found” error\n<code>ToString::to_string</code>, but without panic on OOM.\nQuery execution plan step\nGraph database actor that manages a single named graph\nConfiguration for a graph database\nGraph management service for handling multiple graphs\nGraph execution statistics\nIndividual execution plan step\nPerformance metrics for query profiling\nQuery execution profile with performance metrics\nSlow query record\nAverage query execution time\nCache hits/misses\nChild steps (if any)\nClear the slow query log\nGraph configuration\nCreate a new graph\nGraph creation timestamp\nDelete a graph\nStep description\nEstimated cost\nEstimated cost for this step\nEstimated rows\nExecute a Cypher query with write capabilities\nInternal query execution with read-only flag\nExecute a read-only Cypher query\nExecution time in milliseconds\nGenerate execution plan for a query without executing it\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a specific configuration parameter\nGet a reference to a graph\nGet a mutable reference to a graph\nGet the slow query log for this graph\nGet graph statistics\nGet the number of graphs managed\nName of the graph\nAll managed graphs\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if a query contains write operations\nNumber of labels used\nLast statistics update timestamp\nList all graph names\nMaximum number of nodes (0 for unlimited)\nMaximum number of relationships (0 for unlimited)\nMaximum query result size\nMaximum slow queries to keep\nMemory limit for graph operations in bytes\nMemory usage in bytes\nMemory used per step in bytes\nActual execution metrics\nCreate a new graph actor with the given name\nCreate a new graph manager\nNumber of nodes in the graph\nStep operation name\nQuery parameters (if any)\nExecution plan\nExecute a query and return both results and profiling …\nEnable query profiling\nTotal queries executed\nQuery string that was slow\nQuery string\nQuery timeout in milliseconds\nRead-only queries executed\nRecord a slow query\nNumber of relationships in the graph\nNumber of relationship types used\nActual rows processed per step\nSet a specific configuration parameter\nSlow query log\nSlow query threshold in milliseconds\nQuery execution statistics\nTime spent per step in milliseconds\nPlan steps in execution order\nTimestamp when query was executed\nTotal execution time in milliseconds\nTotal execution time\nUpdate graph configuration\nUpdate execution statistics\nLast update timestamp\nCreate a new graph actor with custom configuration\nWrite queries executed\nConnection explanation between two entities\nGraphRAG protocol version\nError types specific to GraphRAG operations\nMulti-hop reasoning path between entities\nBest/strongest connection path\nOverall connection strength\nDefault configuration values\nEntity extraction actor for GraphRAG\nExplanation of the path\nHuman-readable explanation\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSource entity\nGraphRAG Orchestrator Actor\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKnowledge Graph Construction Module\nPath length (number of hops)\nMulti-Hop Reasoning Engine for GraphRAG\nPath nodes in order\nAll discovered paths\nRAG Pipeline for GraphRAG\nRelationships connecting the nodes\nPath score/confidence\nTarget entity\n<code>ToString::to_string</code>, but without panic on OOM.\nCustom extraction function (future implementation)\nStrategy for deduplicating extracted entities\nDocument processing request\nDocument processing result\nEntity extraction actor for NLP pipeline\nExact text matching\nExtraction statistics and metrics\nConfiguration for different extraction methods\nFuzzy string matching with threshold\nSimple keyword-based entity extraction\nLLM-based extraction (future implementation)\nNo deduplication\nNamed Entity Recognition using regex patterns\nRule for extracting relationships between entities\nRule-based relationship extraction\nSemantic similarity using embeddings\nAdd an extractor configuration\nApply a specific extractor to the document\nApply keyword-based entity extraction\nApply regex-based named entity recognition\nApply rule-based relationship extraction\nAverage processing time per document (ms)\nCreate a basic relationship extractor\nMinimum confidence threshold\nOverride confidence threshold\nContext window around the pattern\nActor creation timestamp\nDeduplicate extracted entities\nDeduplicate extracted relationships\nEntity deduplication strategy\nDocument ID\nDocument ID\nTotal documents processed\nExtracted entities\nEntities by type\nTotal entities extracted\nConfigured extractors\nSpecific extractors to use (optional)\nNumber of extractors used\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet extractor name for identification\nGet configured extractors\nGet extraction statistics\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLast update timestamp\nDocument metadata\nMinimum confidence for this rule\nRule name/identifier\nCreate a new entity extraction actor\nCreate an organization name extractor\nPattern to match (simple regex for now)\nCreate a simple person name extractor using regex\nProcess a document and extract entities/relationships\nProcessing time in milliseconds\nRelationship type to assign\nExtracted relationships\nRelationships by type\nTotal relationships extracted\nReset extraction statistics\nUpdate confidence threshold\nUpdate deduplication strategy\nStatistics and performance metrics\nDocument text content\nUpdate extraction statistics\nLast activity timestamp\nAny warnings or errors\nCreate actor with specific configuration\nDocument processing result\nMain GraphRAG orchestrator actor\nConfiguration for GraphRAG operations\nDocument processing request for GraphRAG\nRAG query request\nGraphRAG query result\nStatistics for GraphRAG operations\nProcessing time breakdown\nAdd LLM provider\nAverage document processing time (ms)\nAverage RAG query time (ms)\nAverage reasoning query time (ms)\nWhether to build knowledge graph\nCollect context from various sources (graph, vector, text)\nConfiguration settings\nContext size for RAG\nCreation timestamp\nDefault LLM provider name\nDefault search strategy\nDocument ID\nDocument ID\nTotal documents processed\nDefault embedding dimension\nEnable entity deduplication\nEnable relationship inference\nTotal entities extracted\nNumber of entities extracted\nGraph entities involved\nEntity extraction time (ms)\nEntity extraction component\nExtract entities from query text\nSpecific extractors to use\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether to generate embeddings\nGenerate RAG response using LLM\nGet GraphRAG statistics\nKnowledge graph builder component\nNumber of graph nodes created\nNumber of graph relationships created\nGraph traversal time (ms)\nInclude reasoning explanation\nInitialize GraphRAG components\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKnowledge graph name/identifier\nLast statistics update\nLLM generation time (ms)\nLLM provider to use\nAvailable LLM providers\nLLM provider usage statistics\nMaximum entities per document\nMaximum hops for multi-hop reasoning\nMaximum hops for graph traversal\nMaximum relationships per document\nMaximum results to return\nDocument metadata\nCreate a new GraphRAG actor\nPerform multi-entity reasoning between extracted entities\nPerform single entity expansion (find related entities)\nProcess document and build knowledge graph\nTotal processing time (ms)\nProcessing time breakdown\nExecute GraphRAG query\nQuery text\nQuery timeout in milliseconds\nRAG context size\nTotal RAG queries executed\nSuccess rate for RAG queries\nMulti-hop reasoning engine\nReasoning paths used (if requested)\nTotal reasoning queries executed\nTotal relationships extracted\nNumber of relationships extracted\nGenerated response\nSearch strategy\nSimilarity threshold for deduplication\nStatistics and metrics\nDocument text content\nTotal time (ms)\nUpdate configuration\nUpdate document processing statistics\nUpdate query statistics\nLast activity timestamp\nVector search time (ms)\nAny warnings or errors\nCreate GraphRAG actor with configuration\nNew entity was created\nNew relationship was created\nRelationship was deduplicated (already exists)\nDocument processing request for knowledge graph …\nEntity deduplication configuration\nDocument processing result for knowledge graph construction\nKnowledge graph builder that orchestrates …\nConfiguration for knowledge graph construction\nStatistics for knowledge graph construction\nEntity was merged with existing\nResult of entity processing\nResult of relationship processing\nAlias-based matching\nAverage processing time per document (ms)\nBuild Cypher query for creating a node\nClear entity and relationship caches\nConfiguration settings\nOverride configuration for this request\nConsider entity types in deduplication\nCreate a new entity node in the graph database\nCreate initial result structure\nCreate a relationship between two nodes\nCreation timestamp\nCreated node IDs\nCreated relationship IDs\nCurrent graph size (nodes)\nCurrent graph size (relationships)\nEntity deduplication settings\nDefault embedding model for entities\nDocument ID\nDocument ID\nTotal documents processed\nEnable entity property enrichment\nEnable automatic relationship inference\nExtracted entities to add to graph\nEntities by type distribution\nTotal entities added to graph\nNumber of entities created (new)\nEntities deduplicated/merged\nNumber of entities merged with existing\nNumber of entities processed\nEntity mapping cache (text -&gt; node_id)\nMinimum confidence threshold for entities\nProcessing errors count\nEnable exact text matching\nFilter entities and relationships by confidence thresholds\nFinalize processing and return results\nFind existing entity using deduplication strategies\nFind existing entity node or create a new one\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEnable fuzzy text matching\nFuzzy matching threshold (0.0 to 1.0)\nGet knowledge graph statistics\nGraph database backend name\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKnowledge graph name/identifier\nLast statistics update\nLog the start of document processing\nMaximum entities per document to process\nMaximum graph size (nodes + relationships)\nMaximum relationships per document\nMerge entity data with existing node\nDocument metadata\nCreate a new knowledge graph builder\nProcess all entities in the document\nProcess all relationships in the document\nProcess a document and build knowledge graph\nProcess a single entity and add to knowledge graph\nProcess a single relationship and add to knowledge graph\nProcessing time in milliseconds\nRelationship cache for duplicate detection\nMinimum confidence threshold for relationships\nExtracted relationships to add to graph\nRelationships by type distribution\nTotal relationships added to graph\nNumber of relationships created (new)\nRelationships deduplicated\nNumber of relationships deduplicated\nNumber of relationships processed\nReset statistics\nEnable semantic similarity matching\nSemantic similarity threshold\nSerialize properties for Cypher query\nStatistics and metrics\nUpdate configuration\nUpdate deduplication configuration\nUpdate statistics after processing\nLast activity timestamp\nVector store backend name\nAny warnings or errors\nCreate knowledge graph builder with custom configuration\nPrune visited nodes (avoid cycles)\nPrune by maximum branching factor\nCombined scoring approach\nCombined pruning strategies\nScore based on relationship confidence\nCustom scoring function\nScore based on entity importance\nScore based on path length (shorter = better)\nMulti-hop reasoning engine for graph traversal\nNo pruning\nPath scoring strategies\nManages the search state for multi-hop reasoning\nInternal path representation during traversal\nPruning strategies to limit search space\nConfiguration for reasoning engine\nReasoning query request\nStatistics for reasoning operations\nPrune paths with low scores\nSearch parameters extracted from query\nRelationship types to include (empty = all)\nAverage query time (ms)\nEnable bidirectional traversal\nCache hit ratio\nCalculate score for a path extension\nConfiguration settings\nCreate initial search state\nCreate new path state for neighbor\nCreate reasoning path from path state\nCreation timestamp\nCurrent node ID\nEnable path caching\nRelationship types to exclude\nExecute the breadth-first search\nExpand current state by exploring neighbors\nExplain connection between two entities\nExtract search parameters from query\nFinalize search results and update statistics\nFind paths between two entities\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSource entity/node ID\nGenerate human-readable explanation for a path\nGet neighboring nodes from graph database\nGet reasoning statistics\nCurrent hop count\nInclude explanation in results\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLast statistics update\nLog search start information\nMaximum number of hops to traverse\nMaximum hops to traverse\nMaximum paths to explore per hop\nMaximum total paths to return\nMaximum results to return\nMinimum path score threshold\nCreate a new reasoning engine\nPath taken so far\nPath scoring strategy\nTotal paths explored\nTotal paths found\nPruning strategy to limit search space\nTotal reasoning queries executed\nTimeout for reasoning queries (ms)\nRelationship types to consider\nRelationships traversed\nReset statistics\nCurrent path score\nApply pruning strategies to decide if a path should be …\nStatistics and performance metrics\nTarget entity/node ID\nUpdate configuration\nUpdate pruning strategy\nUpdate path scoring strategy\nUpdate reasoning statistics\nLast activity timestamp\nVisited nodes (for cycle detection)\nCreate reasoning engine with custom configuration\nSimple concatenation\nContext fusion strategy\nHybrid search configuration\nRAG pipeline actor\nRAG pipeline configuration\nRAG query structure\nRAG query result\nRanked by relevance\nWeighted combination\nConfidence score\nPipeline configuration\nRetrieved context items\nCreation timestamp\nAdditional filters\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGraph weight\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLLM provider configuration\nMaximum context size\nMaximum results\nCreate new RAG pipeline\nProcessing time in milliseconds\nQuery text\nQuery text\nGenerated response\nSearch strategy to use\nVector similarity threshold\nText weight\nVector weight\nMCP server capabilities\nMCP server configuration\nFeature flags\nReturns the argument unchanged.\nReturns the argument unchanged.\nMCP request handlers\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nResource limits\nServer name and version\nSecurity configuration\nMCP server implementation\nMCP tools implementation\nMCP protocol types and definitions\nHandle initialize request\nHandle prompt get request\nHandle prompts list request\nHandle MCP requests\nHandle resource read request\nHandle resources list request\nHandle tool call request\nHandle tools list request\nMCP server\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new MCP server\nExecute an MCP tool\nGet all available MCP tools\nActor creation parameters\nActor system error\nActor message parameters\nActor query parameters\nAuthentication required\nContains the error value\nInternal server error\nInvalid request format or parameters\nMCP error types\nMCP prompt definition\nMCP prompt content\nMCP prompt message\nMCP prompt result\nMCP request message\nMCP resource definition\nMCP resource content\nMCP resource data (text or binary)\nMCP response message\nResult type for MCP operations\nMCP tool definition\nMCP tool result\nMethod not found\nContains the success value\nPermission denied\nRate limit exceeded\nResource not found\nSQL execution error\nSQL query parameters\nTool execution error\nVector search parameters\nActor ID to query\nActor ID (must be unique)\nTarget actor ID\nActor type filter\nActor type\nPrompt arguments schema\nActor configuration\nResult data\nResource content (can be text or binary data encoded as …\nMessage content\nWhether the tool is dangerous (requires confirmation)\nTool description\nResource description\nPrompt description\nPrompt description\nDistance metric (l2, cosine, inner_product)\nCreate an error response\nCreate an error tool result\nError message if execution failed\nAdditional WHERE clause filters\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRequest ID\nWhether to include query plan/analysis\nInitial state (JSON object)\nInput schema (JSON Schema)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nJSON-RPC version (must be “2.0”)\nNumber of nearest neighbors\nMaximum number of results\nMaximum number of results\nMessage type/method\nPrompt messages\nMetadata about the execution\nMethod name\nMIME type\nMIME type\nTool name\nResource name\nPrompt name\nResult offset\nQuery parameters (for parameterized queries)\nMethod parameters\nMessage payload\nSQL query string\nMessage role (user, assistant, system)\nState query (SQL-like filter)\nCreate a success response\nCreate a successful tool result\nWhether the tool execution was successful\nCreate a successful tool result with metadata\nTable/collection to search\nResponse timeout in milliseconds\n<code>ToString::to_string</code>, but without panic on OOM.\nResource URI\nResource URI\nQuery vector\nVector column name\nWhether to wait for response\nArray of values\nBoolean value\nContains the error value\nModel evaluation request\nModel evaluation result\nFeature specification for ML models\nSupported feature data types\nFloat value\nML function signature\nInteger value\nML function execution error\nTrait for ML function implementations\nML function registry for SQL integration\nML function execution result\nML value types used in function execution\nMap/object value\nML model metadata\nTrait for model storage backends\nNull value\nSingle numeric value (regression)\nContains the success value\nModel output specification\nTypes of model outputs\nParameter specification\nPrediction request\nPrediction result\nClass probability (classification)\nString value\nStructured output (JSON-like)\nTraining request for ML models\nModel update request for online learning\nMultiple values (multi-output)\nVector value\nModel algorithm type\nAlgorithm to use\nFeature constraints (min, max, etc.)\nCreation timestamp\nDefault value (if any)\nDelete a model\nFunction description\nFeature data type\nML Computation Engines\nExecute the ML function\nExecute an ML function\nTraining features\nInput features\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nML Function Implementations\nRegistered ML functions\nGet model metadata\nInput feature schema\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList available models\nLoad a trained model\nModel performance metrics\nEvaluation metrics to compute\nComputed metrics\nModel metadata\nModel metadata\nModel name\nModel name\nModel name\nModel name\nModel storage backend\nModel Management Module\nModel name/identifier\nFeature name\nFunction name\nParameter name\nCreate new ML function registry\nNew training features\nNew training targets\nOutput schema\nOutput type\nParameter type\nModel parameters\nTraining parameters\nUpdate parameters\nInput parameters\nPredictions\nPredictions on test set\nPrediction probabilities (if requested)\nRegister an ML function\nWhether feature is required\nWhether parameter is required\nReturn prediction probabilities (for classification)\nReturn type\nSave a trained model\nOutput schema for structured outputs\nGet function signature\nSQL Integration for ML Functions\nStorage location\nTraining targets (optional for unsupervised)\nTest features\nTest targets\nLast updated timestamp\nUtility functions for ML operations\nValidation split ratio\nModel version\nStatistical ML Functions\nCorrelation function\nCovariance function\nLinear regression function\nZ-score normalization function\nCompute Pearson correlation coefficient\nCompute covariance between two vectors\nCompute linear regression coefficients using normal …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSolve linear system Ax = b using Gaussian elimination\nML function categories for SQL documentation\nML function metadata for SQL integration\nRegistry of ML functions for SQL use\nSQL-ML bridge that converts SQL function calls to ML …\nFunction category\nConvert SQL expression to ML value\nConvert SQL value to ML value\nSQL usage examples\nExecute ML function from SQL function call\nML Function Executor for SQL Integration\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFunction Registry for SQL-ML Integration\nRegistered functions with metadata\nGet function metadata by name\nGet available ML functions\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList all available functions\nList functions by category\nML function registry\nCreate new SQL-ML bridge\nCreate new SQL ML function registry\nML-Aware Query Optimizer\nPerformance characteristics\nRegister an ML function for SQL use\nFunction signature\nInitialize with built-in ML functions\nCalculate basic statistics\nConvert SQL array to vector\nValidate feature dimensions\nConvert vector to SQL array format\nCypher Spatial Functions for Orbit-RS\nCypher spatial function executor with graph capabilities\nParse Cypher query and extract spatial functions\nCypher spatial function result\nGraph node with properties\nNode identifier\nGraph path with spatial context\nGraph relationship\nRelationship identifier\nSpatial index for graph nodes/relationships\nAdd a node to the graph\nAdd a relationship to the graph\nallShortestPaths with spatial constraints\nbbox(geometry)\nbuffer(geometry, distance)\ncentroid(geometry)\ncollect.spatial aggregation\ncontains(geometry1, geometry2)\nconvex_hull(geometry)\nCreate a spatial index\ncrosses(geometry1, geometry2)\ndisjoint(geometry1, geometry2)\ndistance(point1, point2)\nParse and execute a Cypher query with spatial functions\nExecute a Cypher spatial function\nGet the underlying executor for direct function calls\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nintersects(geometry1, geometry2)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLabels and their associated nodes\nCreate a new Cypher spatial executor\nGraph nodes with spatial properties\noverlaps(geometry1, geometry2)\npoint({x: longitude, y: latitude, crs: ‘WGS-84’})\nreduce.distance aggregation\nGraph relationships\nshortestPath with spatial constraints\nspatial.closest(point, label, limit)\nSpatial indexes on nodes\nspatial.intersects(geometry, label)\nspatial.layer(layer_name)\nspatial.withinDistance(point, distance, label)\ntouches(geometry1, geometry2)\nwithin(geometry1, geometry2)\nInformation about an actor node for distributed execution\nCache configuration settings\nCache health metrics\nCache key that uniquely identifies a query and its …\nCache statistics and metrics\nCache-aware query executor wrapper\nData change notification for live queries\nTypes of data changes for live queries\nColumn/field information\nGeneral compute node\nCoordinator node\nCREATE statement for schema definition\nDELETE statement\nDistributed execution context\nDistributed execution plan\nDistributed query executor\nDistributed query planner\nDocument storage and processing node\nQuery execution errors\nIndividual execution phase timing and details\nComplete execution plan\nOverall execution statistics\nGeneric expression type\nFETCH clause for eager loading of related data\nFROM clause specifying data sources\nFunction information\nGraph processing node\nIndex information\nINSERT statement\nCache invalidation event\nJOIN operations between different data models\nLSP Configuration\nOrbitQL lexer/tokenizer\nLive query subscription configuration\nLive query subscription handle\nCapabilities of a node\nTypes of nodes in the distributed system\nOptimization rule trait\nOptimization suggestions\nMain OrbitQL engine with profiling support\nOrbitQL Language Server\nORDER BY clause\nParameter information\nParser errors\nOrbitQL parser\nPerformance bottleneck identification\nExecution plan node types\nProfiler configuration\nMain query result cache with intelligent invalidation\nQuery execution context\nOrbitQL query executor\nEnhanced query optimizer with multi-model cost-based …\nQuery execution parameters\nOrbitQL query planner\nComprehensive query execution profile\nMain query profiler\nQuery execution result\nStreaming query result that yields rows incrementally\nQuery execution statistics\nUnified value type for OrbitQL\nResource usage tracking\nSchema information for autocomplete and validation\nFields to select in a query\nSELECT statement for querying data\nCategories of spatial functions\nInformation about a spatial function\nSpatial function registry for OrbitQL\nSpatial function parameters\nTypes for spatial function parameters\nReturn types for spatial functions\nRoot AST node for OrbitQL statements\nConfiguration for streaming queries\nStreaming query builder for constructing complex streaming …\nStreaming query executor that can handle large result sets …\nA single row in a streaming result set\nTable/collection information\nTable types\nTime-series specific structures\nTime-series processing node\nA token with its type, value, and position\nToken types in OrbitQL\nUPDATE statement\nSpecific actions to take\nActor resource usage (for distributed queries)\nAdd a custom optimization rule\nWhich part of the query is affected\nOptional row/document IDs affected\nActor nodes available for execution\nBatch size for streaming results\nBottleneck type\nPerformance bottlenecks identified\nBuffer size for internal queues\nTotal bytes processed\nCache hit ratio\nCancel a running execution\nCancel live query subscription\nSuggestion category\nUnique change ID\nChannel for receiving change notifications\nType of change\nType of change\nTypes of changes to monitor\nCleanup expired subscriptions\nClear all cached results\nSQL/OrbitQL code examples if applicable\nSubscription configuration\nContext hash (user, permissions, etc.)\nCPU time used\nCPU usage per core\nInitialize default schema with common OrbitQL keywords and …\nCreate distributed execution plan from a local execution …\nSubscription start time\nRow data as key-value pairs\nData locality hints for optimization\nDebounce interval for change notifications\nDefault TTL for cached results\nPhase description\nDescription of the bottleneck\nDetailed description\nDetailed timing for each operation\nPhase-specific details\nDiagnostic refresh delay in milliseconds\nDisk I/O statistics\nDistributed execution details\nPhase duration\nEnable autocomplete\nEnable compression for large results\nEnable compression for large rows\nEnable diagnostics\nEnable formatting\nEnable hover information\nEnable signature help\nEnable statistics tracking\nEnable automatic cache warming\nMark the end of the current execution phase\nNumber of cached entries\nEstimate detailed query cost using advanced cost model\nEstimate cost for a multi-model query\nEstimated performance improvement\nEvent ID\nEviction policy\nTotal entries evicted\nExecute a query execution plan\nExecute an OrbitQL query with optional profiling\nExecute query with caching\nExecute distributed query plan\nExecute query with streaming results\nUnique execution ID\nOrbitQL Protocol-Specific Executor\nExplain query execution plan\nGenerate an EXPLAIN ANALYZE report\nExecute query with profiling and return detailed analysis\nFinish profiling and generate comprehensive profile\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdds a table to the FROM clause\nGet all function names\nAvailable functions\nGet cached result if available and valid\nGet function information\nGet cache health\nGet cache statistics\nGet status of active executions\nGet cache health information\nGet profiling report for the last executed query (if …\nGet cache statistics\nGet current multi-model statistics\nGet optimization statistics\nGet current cost statistics\nGet statistics about streaming operations\nGet live query subscription\nCheck if advanced cost model is enabled\nHit ratio (0.0 to 1.0)\nTotal cache hits\nWhether to include full row data in change notifications\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvalidate cache entries based on data changes\nTotal invalidations\nI/O operations performed\nCheck if subscription is still active\nCheck if profiling is enabled\nReturns true if this statement modifies data\nAvailable keywords\nLast update time\nAdds a LIMIT clause\nList all functions in a category\nMaximum memory usage for buffering\nMaximum number of queued changes\nMaximum number of completion items\nMaximum number of cached queries\nMaximum memory usage for cache in MB\nMaximum profile retention time\nMemory sampling interval\nMemory usage over time\nMetadata about this row\nTotal cache misses\nPhase name (e.g., “Parsing”, “Planning”, “…\nNetwork I/O statistics\nNetwork round trips\nCreates a new empty SELECT statement\nCreate a new spatial function registry with default …\nNew data (for inserts/updates)\nGet the next change notification\nGet the next updated query result\nNotify cache of data changes\nNotify about data changes (called by data modification …\nOld data (for updates/deletes)\nOptimization information\nOptimize a statement by applying all rules iteratively\nOptimize query with cost-based approach\nOverall execution statistics\nParameter hash\nQuery parameters used\nQuery parameters\nParse a list of tokens into a statement\nPeak memory usage\nPercentage of total execution time\nPercentage of total execution time\nExecution phases breakdown\nCreate an execution plan from an optimized AST\nPlan a distributed query - placeholder implementation\nPriority (1-10, 10 being highest)\nUnique profile ID\nStore result in cache\nOriginal query that is being monitored\nOriginal query text\nNormalized query string\nQuery text for debugging\nRecord execution statistics for a plan node\nRegister a spatial function\nReturns true if this statement requires a transaction\nResource constraints\nResource usage during execution\nChannel for receiving updated query results\nPrimary key or identifier of changed row\nTimeout for individual row fetches\nTotal rows returned\nRow sequence number within the result set\nEnable or disable profiling\nEnable or disable profiling\nSeverity (1-10, 10 being most severe)\nCurrent cache size in bytes\nSmart invalidation based on query analysis\nCreate and start the OrbitQL Language Server\nPhase start time relative to query start\nMark the start of a new execution phase\nStart profiling a query\nSub-phases for nested operations\nCreate live query subscription\nUnique subscription ID\nOptimization suggestions\nTable/collection that changed\nTable/collection that changed\nAvailable tables/collections\nTime spent on this bottleneck\nExecution timeout\nTimestamp of change\nTimestamp of change\nShort suggestion title\nTokenize an OrbitQL query string\nTotal execution time\nEnable CPU tracking\nEnable memory tracking\nEnable network tracking\nTransaction ID if applicable\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nUpdate cost model parameters\nUpdate statistics for optimization\nUpdate schema information\nUpdate cost statistics\nUpdate cluster topology information\nValidate query syntax without execution\nWarm cache with frequently accessed queries\nTables/collections to monitor for changes\nAdds a WHERE condition\nCreate engine with profiling enabled\nCreate optimizer with existing statistics manager\nColumn definition\nExecution context\nQuery execution result\nResult of filtering operations\nHelper struct for insert operation results\nOrbitQL query executor with advanced spatial capabilities\nTable row\nSpatial index instance\nSpatial geometry types\nStatement execution strategy pattern to reduce cognitive …\nStream processor for real-time queries\nTable with spatial data\nHelper struct for update operation results\nApply a single assignment to a row\nOptimized apply a single assignment to a row\nApply GROUP BY clause\nApply HAVING clause\nApply LIMIT and OFFSET\nApply ORDER BY clause\nApply WHERE clause filtering with spatial support\nExecution context\nEvaluate a boolean expression for filtering\nEvaluate an expression to get a JSON value\nEvaluate expression with row context\nEvaluate spatial function (simplified, non-recursive)\nEvaluate spatial relationships\nExecute an OrbitQL statement using strategy pattern for …\nExecute CREATE statement with full support\nExecute CREATE INDEX with spatial support\nExecute CREATE TABLE statement with comprehensive spatial …\nExecute DELETE statement with full spatial support\nExecute DROP statement (stub implementation)\nExecute GraphRAG statement (stub implementation)\nExecute INSERT statement with full spatial support\nExecute LIVE statement (stub implementation)\nExecute RELATE statement (stub implementation)\nExecute SELECT statement with full spatial support\nExecute TRANSACTION statement (stub implementation)\nExecute UPDATE statement with full spatial support\nCheck if expression contains spatial operations\nExtract geometry from expression\nExtract spatial geometry from expression for INSERT …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet or create a table with the given name\nGPU acceleration engine\nInsert object map into table\nInsert value rows into table\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new OrbitQL executor\nProcess FROM clause to get base table data\nProcess JOIN clauses\nProcess a single row update\nOptimized process a single row update without full table …\nProcess SELECT fields to generate result columns and rows\nConvert QueryValue to serde_json::Value\nRemove geometries from spatial indexes after DELETE …\nSpatial indexes\nReal-time streams\nTables and their data\nUpdate column value based on operator\nUpdate spatial indexes after INSERT operations\nRedis data persistence provider for key-value storage with …\nRocksDB-backed Redis data persistence provider …\nTiKV-based Redis data persistence provider implementation\nIn-memory implementation for testing\nConfiguration for Redis data providers\nStatistics for Redis data operations\nProvider trait for Redis key-value data persistence\nRedis value with optional expiration\nAppend to a string value\nMaximum number of keys to check per cleanup run\nClean up expired keys\nInterval between expiry cleanup runs (in seconds)\nDelete a key\nEnable automatic cleanup of expired keys\nCheck if a key exists (and is not expired)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a value by key\nGet current value and set a new one atomically\nIncrement a numeric value atomically\nInitialize the provider\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrefix for Redis data keys in the storage backend\nGet all keys matching a pattern (for debugging/admin)\nGet current metrics\nGet multiple values at once\nSet multiple values at once\nSet a value with optional TTL\nSet a value only if it doesn’t exist\nShutdown the provider gracefully\nGet the length of a string value\nRocksDB column families for Redis data\nRocksDB-backed Redis data provider\nGet the data column family handle\nGet the expiration column family handle\nFormat expiration key for indexing\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet the metadata column family handle\nCreate a new RocksDB Redis data provider\nParse expiration key to get timestamp and original key\nPerform synchronous cleanup of expired keys (no async …\nStart the background cleanup task\nTiKV-based Redis data provider\nFormat a data key with prefix\nFormat an expiration key with prefix (timestamp:key for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new TiKV Redis data provider\nParse expiration key to get timestamp and original key\nStatic helper for parsing expiration keys (for use in …\nPerform cleanup of expired keys using TiKV scan and …\nStart the background cleanup task\nGraphRAG function support for PostgreSQL wire protocol\nAdvanced JSONB Implementation (Phase 11) 🚀\nPostgreSQL wire protocol message types\nRocksDB-backed persistent storage for PostgreSQL query …\nPostgreSQL wire protocol handler\nSQL query engine for actor operations\nPostgreSQL TCP server\nMVCC-Enabled SQL Parser and Executor for Orbit-RS\nStorage abstraction layer for PostgreSQL wire protocol\npgvector-compatible SQL query engine for vector operations\nGraphRAG query engine for PostgreSQL function calls\nType alias for GraphRAG query parsing result\nExecute GRAPHRAG_BUILD function SQL: SELECT * FROM …\nExecute GRAPHRAG_ENTITIES function (placeholder) SQL: …\nExecute GRAPHRAG_EXTRACT function SQL: SELECT * FROM …\nExecute a GraphRAG function query\nExecute GRAPHRAG_QUERY function SQL: SELECT * FROM …\nExecute GRAPHRAG_REASON function SQL: SELECT * FROM …\nExecute GRAPHRAG_SIMILAR function (placeholder) SQL: …\nExecute GRAPHRAG_STATS function SQL: SELECT * FROM …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate new GraphRAG query engine\nCreate new GraphRAG query engine without OrbitClient …\nArray of JSONB values\nBoolean value\nContains the error value\nError types for JSONB operations\nCore JSONB value type supporting all PostgreSQL JSON types\nNull value\n64-bit integer\nObject with string keys and JSONB values\nContains the success value\nUTF-8 string\nJSON Aggregation Functions\nCheck if an array contains all elements of another array\nCheck if an array contains a specific element\nCheck if an array contains a specific value\n<code>-&gt;</code> operator: Get JSON object field by key or array element …\n<code>-&gt;&gt;</code> operator: Get JSON object field by key or array …\n<code>||</code> operator: Concatenate two JSON values\n<code>&lt;@</code> operator: Is the left JSON value contained within the …\n<code>@&gt;</code> operator: Does the left JSON value contain the right …\nDecode CBOR bytes back into serde_json::Value.\n<code>-</code> operator: Delete key/value pair or string element from …\n<code>#-</code> operator: Delete the field or array element at the …\nEncode a serde_json::Value into CBOR bytes for compact …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a JSONB value from a JSON string\nConvert from serde_json::Value\nGet a value at the specified path\nGet a mutable reference to a value at the specified path\n<code>?&amp;</code> operator: Do all of these array strings exist as …\n<code>?|</code> operator: Do any of these array strings exist as …\n<code>?</code> operator: Does the string exist as a top-level key …\nJSON Indexing Strategies\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this value is a JSON array\nCheck if this value is a JSON object\nGet the JSON type as a string\nCheck if two numbers are equal within floating point …\nCheck if an object contains all key-value pairs of another …\nPostgreSQL-compatible JSON operators\nJSON Path Expression Support\n<code>#&gt;</code> operator: Get JSON object at specified path (returns …\n<code>#&gt;&gt;</code> operator: Get JSON object at specified path (returns …\nJSON Schema Validation and Constraints\nGet the size of the JSON value (number of elements for …\nBinary Storage and Serialization for JSONB\nConvert to compact JSON string\nConvert to pretty-printed JSON string\nConvert to serde_json::Value\nConvert JSON value to text representation (used by -&gt;&gt; and …\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nAggregation function implementations\nJSON aggregation context for collecting values during …\nJSON object aggregation context for collecting key-value …\nAdd a key-value pair to the aggregation\nAdd a value to the aggregation\nClear all accumulated values\nClear all accumulated pairs\nGet the number of aggregated values\nGet the number of aggregated pairs\nFinalize the aggregation as a JSON array\nFinalize the aggregation as a JSON object\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the aggregator is empty\nCheck if the aggregator is empty\n<code>json_agg(expression)</code> - Aggregates values into a JSON array\nConditional aggregation - only aggregate values that meet …\nAdvanced aggregation with filtering and ordering\nGroup aggregation - aggregate values by groups\nNested aggregation - aggregate nested structures\nAggregate with custom transformation\n<code>json_arrayagg(expression ORDER BY ...)</code> - SQL standard …\n<code>json_object_agg(key_expression, value_expression)</code> - …\n<code>json_objectagg(key_expression, value_expression)</code> - SQL …\n<code>jsonb_agg(expression)</code> - Aggregates values into a JSONB …\n<code>jsonb_object_agg(key_expression, value_expression)</code> - …\nCreate a new JSON aggregator\nCreate a new JSON object aggregator\nCreate a new JSON aggregator with options\nCreate a new JSON object aggregator with options\nB-tree index for ordering and range queries on JSON paths\nB-tree index for ordered JSON path queries\nExpression index for specific JSON path expressions\nExpression index for complex JSON expressions\nGIN index for containment and existence queries (@&gt;, ?, …\nGIN (Generalized Inverted Index) for JSON containment …\nHash index for exact equality matches on JSON paths\nHash index for exact JSON path equality matches\nIndex type for JSON data\nBuild path for array index\nBuild path for object property\nFind rows that contain all of the given keys (?&amp; operator)\nFind rows that contain any of the given keys (?| operator)\nFind rows that contain the given key (? operator)\nFind rows that contain the given JSON value (@&gt; operator)\nRemove array values from all relevant indexes\nRemove a single array item from indexes\nRemove object values from all relevant indexes\nRemove a single object key-value pair from indexes\nRemove primitive values from indexes\nThe expression being indexed (stored as path for …\nFind rows with exact value match\nFind rows with exact value match\nFind rows with values greater than the given value\nFind rows with values less than the given value\nFind rows with values in the given range\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHash index for the expression results\nMaps JSON path values to sorted row IDs\nMaps JSON path values to row IDs\nAdd a JSONB value to the index with the given row ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaps keys to row IDs that contain them\nThe JSON path being indexed\nThe JSON path being indexed\nMaps path-value pairs to row IDs\nRemove a JSONB value from the index\nHelper to remove entry from key index\nHelper to remove entry from path-value index\nHelper to remove entry from value index\nMaps value hashes to row IDs (for @&gt; containment)\nFilter expression\nFilter expression for conditional path matching\nOperators for filter expressions\nArray index access\nRepresents a JSON path for navigating JSON structures\nObject key access\nIndividual component of a JSON path\nParser for path strings to reduce cognitive complexity\nArray slice [start:end]\nWildcard (*) - matches any key/index\nPath components (keys and array indices)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a path from a dot-notation string\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this path is empty\nGet the length of the path\nCreate a new empty path\nParse the content inside brackets […]\nParse a filter expression like <code>(@.active == true)</code>\nAdd an index component to the path\nAdd a key component to the path\nWhether this is a recursive path (**)\nGet a subpath from start to end\n<code>ToString::to_string</code>, but without panic on OOM.\nJSON Schema for validation\nSchema builder for easier schema construction\nSchema validation result\nAdditional properties allowed\nEnum values\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nItems schema for arrays\nMaximum length\nMaximum value\nMinimum length\nMinimum value\nCreate a new empty schema\nPattern for string validation\nProperties for objects\nRequired properties\nSchema type\nValidate a JSON value against this schema\nJSONB binary format magic bytes\nBinary JSONB format version\nBinary storage representation of a JSONB value\nTrait for efficient JSONB storage operations\nIn-memory JSONB storage implementation\nCompress the binary data (placeholder implementation)\nGet the binary data\nBinary data\nDecompress the binary data (placeholder implementation)\nDeserialize a JsonbValue from the cursor\nReturns the argument unchanged.\nReturns the argument unchanged.\nSerialize a JsonbValue to binary format\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad a JSONB value from binary data\nCreate a new binary JSONB from raw data\nOptimize storage (compress, deduplicate, etc.)\nRead a length value with variable-length encoding\nSerialize a JsonbValue to the buffer\nGet the size of the binary data\nGet the storage size of a JSONB value\nStore a JSONB value\nDeserialize binary data back to JsonbValue\nGet the format version\nVersion of the binary format\nWrite a length value with variable-length encoding\nAuthentication response\nBackend key data for cancellation\nBackend (server) messages\nBackend message type identifiers (server -&gt; client)\nBind parameters to prepared statement\nBind complete\nClose prepared statement or portal\nClose complete\nCommand completion\nData row\nDescribe prepared statement or portal\nEmpty query response\nError response\nExecute portal\nFlush output\nFrontend (client) messages\nFrontend message type identifiers (client -&gt; server)\nNo data\nNotice response\nParameter description\nParameter status\nParse (prepared statement)\nParse complete\nPassword message\nSimple query\nReady for query\nRow description\nSSL request\nStartup message (no type byte, length-prefixed)\nSync (end of extended query)\nTerminate connection\nEncode a backend message to bytes\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParse a frontend message from bytes\nRead a null-terminated string from cursor\nPostgreSQL type OIDs (commonly used types)\nWrite a null-terminated string to buffer\nColumn families for PostgreSQL data organization\nColumn definition\nSupported column types (subset of PostgreSQL types)\nTrait for persistent table storage operations\nQuery condition for WHERE clauses\nRocksDB implementation of PersistentTableStorage\nRow data for a table\nTable schema definition\nCompare two JSON values for ordering\nCreate a new table with the given schema\nDelete rows from a table\nDrop an existing table\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a unique row ID\nGet column family handle\nGet table schema\nInsert a row into a table\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList all tables\nLoad all table schemas into cache\nEvaluate query condition against a row\nCreate a new RocksDB table storage instance\nSelect rows from a table\nCheck if a table exists\nCreate row key for data storage\nCreate table key for schema storage\nUpdate rows in a table\nResult of processing data in the connection loop\nConnection state\nResult of processing a single message\nPostgreSQL wire protocol handler\nFlush the write buffer to the stream\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle bind message\nHandle close message\nHandle a client connection\nHandle describe message\nHandle execute message\nHandle a single frontend message\nHandle parse message (prepared statement)\nHandle password message\nHandle simple query\nHandle SSL request\nHandle startup message\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new PostgreSQL protocol handler\nCreate a new PostgreSQL protocol handler with custom query …\nProcess all pending messages in the read buffer\nProcess a single message\nRead and process data from the client\nSend error response\nSend query result\nIn-memory actor storage for demonstration In production, …\nQuery engine that translates SQL to actor operations\nQuery result types\nSimple column definition for basic DDL support\nParsed SQL statement\nConvert SQL execution result to QueryResult\nExecute DELETE query on actors table\nExecute INSERT query on actors table\nExecute SELECT query on actors table\nExecute UPDATE query on actors table\nExecute CREATE TABLE on persistent storage\nExecute DROP TABLE on persistent storage\nExecute DELETE query on persistent storage\nExecute INSERT query on persistent storage\nExecute SELECT query on persistent storage\nExecute UPDATE query on persistent storage\nExecute a SQL query\nExecute a query using the comprehensive SQL engine\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if a query contains GraphRAG functions\nCheck if a query is vector-related\nCheck if actor matches WHERE clause\nCreate a new query engine\nCreate a new query engine with both persistent storage and …\nCreate a new query engine with persistent storage\nCreate a new query engine with vector support\nParse CREATE TABLE statement\nParse CSV values respecting quotes and JSON braces\nParse DELETE statement\nParse DROP TABLE statement\nParse INSERT statement\nParse SELECT statement\nParse SET clauses respecting quotes and JSON braces\nParse a single SET clause (key = value)\nParse SQL statement\nParse UPDATE statement\nParse WHERE clause\nPostgreSQL wire protocol server\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new PostgreSQL server\nCreate a new PostgreSQL server with custom query engine\nStart the server\nExecution result from MVCC-aware SQL engine\nMVCC-aware SQL engine that coordinates parsing, analysis, …\nMain SQL engine that coordinates parsing, analysis, and …\nSQL Analyzer Module\nAbstract Syntax Tree (AST) definitions for SQL statements\nBegin a new transaction and return the transaction ID\nClean up old transactions and row versions\nCommit a transaction\nExecute a SQL statement with automatic transaction …\nExecute a SQL statement within a transaction context\nSQL Execution Strategy Pattern\nAdvanced SQL Statement Executor\nAdvanced SQL Expression Evaluator\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if a SQL statement is vector-related\nSQL Lexer for tokenizing SQL input\nMVCC-Aware SQL Executor\nCreate a new MVCC SQL engine\nCreate a new MVCC SQL engine with vector support\nSQL Query Optimization Framework\nParse a SQL statement without executing it\nSQL Parser for ANSI SQL compliance\nRollback a transaction\nSQL Type System and Values\nSemantic analyzer for SQL statements\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTop-level SQL statement\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nConfigurable SQL engine using strategy pattern\nCreate extension result\nDDL operation result\nCreate schema result\nDDL operation result\nCreate view result\nDelete operation result\nDrop extension result\nDrop index result\nDrop schema result\nDrop table result\nDrop view result\nAvailable execution strategies\nHybrid mode - automatically chooses based on query type\nInsert operation result\nMVCC-based execution (default) - provides deadlock …\nMVCC execution strategy\nOther operations\nQuery results with row data\nSQL execution engine configuration\nStrategy trait for SQL execution engines\nTraditional lock-based execution - for compatibility or …\nTraditional (non-MVCC) execution strategy\nTransaction control result\nUnified SQL execution result\nUpdate operation result\nEnable automatic cleanup of old transactions/versions\nEnable automatic transaction management\nBegin a new transaction (MVCC only)\nBegin a transaction (MVCC only)\nCleanup old data/transactions\nCleanup old data/transactions\nCleanup interval in seconds\nCommit a transaction (MVCC only)\nCommit a transaction (MVCC only)\nGet current configuration\nDefault to MVCC for better performance and deadlock …\nTransaction isolation level for MVCC\nEnable query optimization\nEnable vector operations support\nExecute a SQL statement\nExecute a SQL statement\nExecute within an explicit transaction (MVCC only)\nExecute within a transaction (MVCC only)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if statement is vector-related\nCheck if statement uses vector operations\nCreate a new SQL engine with default configuration (MVCC …\nCreate an MVCC-enabled engine (explicitly)\nCreate a traditional engine (for compatibility)\nParse SQL without execution\nParse SQL without execution\nRollback a transaction (MVCC only)\nRollback a transaction (MVCC only)\nThe execution strategy to use\nGet strategy name\nGet current strategy name\nSwitch execution strategy at runtime\n<code>ToString::to_string</code>, but without panic on OOM.\nCreate a new SQL engine with custom configuration\nQuery execution result\nExtension definition\nContext for JOIN execution to reduce parameter passing\nPermission structure\nSavepoint data\nSchema definition\nComprehensive SQL executor\nType alias for table data storage\nTable schema definition\nTransaction log entry\nTransaction state\nUser and role management\nView definition\nAdd columns for information_schema tables\nAdd qualified wildcard columns\nAdd unmatched left rows for FULL OUTER JOIN\nAdd unmatched right rows for FULL OUTER JOIN\nAdd wildcard columns from FROM clause\nApply WHERE clause to joined row\nBuild result columns from SELECT list\nCreate an empty HashMap for null row in JOIN operations\nEvaluate JOIN condition\nHelper method to evaluate WHERE conditions\nExecute a SQL statement from string\nExecute CROSS JOIN strategy - Cartesian product\nExecute FROM clause with JOIN support\nExecute FULL OUTER JOIN strategy\nExecute INNER JOIN strategy\nExecute JOIN operation using strategy pattern to reduce …\nExecute LEFT JOIN strategy\nExecute RIGHT JOIN strategy\nExecute single table query\nExecute a parsed SQL statement\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet table rows from a FROM clause\nHandle information_schema queries\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMerge two rows for JOIN operation\nCreate a new SQL executor with durable LSM storage …\nLegacy constructor for backward compatibility (uses …\nSimple constructor for testing that creates basic …\nCreate a new SQL executor with custom storage backend\nCreate a new SQL executor with vector support\nProject columns from joined row\nQuery information_schema.columns\nQuery information_schema.table_constraints\nQuery information_schema.key_column_usage\nQuery information_schema.tables\nResolve column name from expression\nShutdown the SQL executor and underlying storage\nConvert SqlType to PostgreSQL type name\nGet storage metrics\nHelper to join rows and apply filtering\nCreate a new SQL executor with provided storage backend\nCreate SQL executor with storage and default settings\nAggregate function state\nExpression evaluation context\nExpression evaluator\nWindow function evaluation context\nCreate a new empty evaluation context\nEvaluate an SQL expression\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate context with a specific row\nCreate context with row and table name\nLexer for SQL input\nSQL tokens\nAdvance to the next character\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitialize keyword mapping\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new lexer with SQL input\nGet the next token\nPeek at the next character without advancing\nPeek at character at offset without advancing\nRead an identifier or keyword\nRead a single-line comment\nRead a multi-line comment\nRead a numeric literal\nRead a parameter placeholder ($1, $2, etc.)\nRead a quoted identifier\nRead a string literal\nSkip whitespace characters\nTokenize the entire input\nDeadlock detector state\nExclusive lock for writes\nLock modes for concurrency control\nMVCC-aware SQL executor\nTable with MVCC row versioning\nMVCC transaction state\nNo value.\nType alias for row predicate function\nRow version with MVCC metadata\nShared lock for reads\nSnapshot ID for MVCC reads\nSome value of type <code>T</code>.\nTransaction ID type\nType alias for transaction log storage\nTransaction snapshot for MVCC reads\nWhether this transaction is aborted\nAccess mode (read-only or read-write)\nAcquire a lock with consistent ordering to prevent …\nList of active (uncommitted) transaction IDs at snapshot …\nBegin a new transaction with MVCC snapshot\nCleanup committed/aborted transactions periodically\nCommit a transaction\nWhether this version is committed\nWhether this transaction is committed\nCreate a new table\nTimestamp when this version was created\nThe actual row data\nDeadlock detector\nDetect deadlock cycles using DFS\nDFS helper for deadlock detection\nFind the visible version of a row for a given snapshot\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSnapshot ID\nTransaction ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermine if a row version is visible to a snapshot\nIsolation level\nLock queue: resource -&gt; list of waiting transactions\nLocks held by this transaction (ordered consistently)\nDelete rows with MVCC versioning (marks as deleted)\nInsert a new row with MVCC versioning\nRead rows using MVCC snapshot (non-blocking)\nUpdate rows with MVCC versioning (creates new versions)\nTable name\nCreate a new MVCC SQL executor\nNext snapshot ID\nNext transaction ID (monotonically increasing)\nRollback a transaction\nAll versions of all rows, organized by primary key\nSavepoints in this transaction\nTable schema\nCurrent snapshot for reads\nTransaction start time\nTables with versioned rows\nTimestamp when snapshot was taken\nGlobal transaction log for cleanup\nActive transactions\nWait-for graph: transaction -&gt; set of transactions it’s …\nTransaction ID of the reading transaction\nTransaction ID that deleted this version (None if not …\nTransaction ID that created this version\nJoin methods that can be hinted\nForce a specific join algorithm\nForce a specific join order\nForce materialization of subquery\nDisable use of indexes\nDisable specific optimization\nQuery optimization configuration\nSet parallel execution level\nQuery optimization hints that can be provided to guide the …\nContainer for query hints\nMain query optimizer\nForce use of a specific index\nAdd a single hint\nAdd verbose details about a plan node\nApply hints to an execution plan\nApply a single hint to an execution plan\nClear all hints\nConvert join method based on hint\nConvert table scans to index scans based on hint\nCost-Based Query Optimization\nCreate a new optimizer with default configuration\nEnable constant folding\nEnable cost-based optimization\nEnable join reordering\nEnable predicate pushdown\nEnable projection pushdown\nEnable rule-based optimization\nEnable subquery optimization\nEstimate the cost of a single node (not including children)\nEstimate the cost of an entire execution plan\nExplain query optimization steps\nGenerate EXPLAIN output for a query\nFormat a plan node for EXPLAIN output\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet current hints\nGet current optimizer statistics\nCheck if there’s a hint to disable optimization\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum optimization passes\nCreate a new query optimizer\nOptimize a SQL statement and return an execution plan\nQuery Execution Planning\nRule-Based Query Optimization\nSet query hints for optimization\nStatistics Collection for Cost-Based Optimization\nUpdate table statistics for cost-based optimization\nCost-based optimizer that uses statistics for optimization …\nRepresents the estimated cost of a query operation\nEstimated result cardinality\nCombine two costs (e.g., for joins)\nCPU cost (operations)\nEstimate selectivity for AND operations\nEstimate selectivity for binary expressions\nEstimate selectivity for complex predicates with …\nEstimate selectivity for equality operations\nEstimate the cost of a hash join\nEstimate the cost of an index scan\nEstimate cost of a specific join order\nEstimate the cost of a merge join\nEstimate the cost of a nested loop join\nEstimate selectivity for NULL checks\nEstimate selectivity for OR operations\nEstimate selectivity for range operations\nEstimate selectivity of a predicate\nEstimate the cost of a table scan\nEstimate selectivity for unary expressions\nExtract table names from SELECT statement\nRecursively extract tables from FROM clause\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate possible join orders (simplified)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nI/O cost (page reads)\nMemory cost (bytes)\nNetwork cost (for distributed queries)\nCreate a new cost-based optimizer\nCreate a new query cost\nApply cost-based optimizations to a statement\nOptimize access methods (table scan vs index scan)\nOptimize join algorithms\nOptimize join order based on cost estimates\nOptimize join order using exhaustive search (for small …\nOptimize join order using greedy heuristics (for large …\nOptimize SELECT statement using cost-based techniques\nOptimize SELECT with step tracking\nApply cost-based optimizations with step tracking\nCalculate total cost (weighted sum)\nAggregation operation\nAggregate function in execution plan\nTypes of aggregate functions\nDelete operation\nPhysical execution plan for a query\nExecution plan generator\nFilter (WHERE clause processing)\nHash join\nIndex scan operation\nInsert operation\nJoin type for execution plans\nLimit operation\nMerge join (requires sorted inputs)\nNested loop join\nProjection (SELECT list processing)\nSort operation\nTable scan operation\nUpdate operation\nValues (constant table) operation\nGet next unique plan ID\nGet a human-readable description of this plan\nGet estimated number of rows this plan will produce\nCheck if an expression contains aggregate functions\nExtract aggregate function from a single expression\nExtract aggregate functions from select list\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate an execution plan for a statement\nCheck if select list contains aggregate functions\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new execution planner\nPlan aggregation operations\nPlan DELETE statement\nPlan FROM clause (tables and joins)\nPlan INSERT statement\nPlan a SELECT statement\nPlan UPDATE statement\n<code>ToString::to_string</code>, but without panic on OOM.\nRule-based optimizer that applies transformation rules\nApply constant folding optimization\nApply join reordering optimization\nApply a single optimization pass\nApply optimization pass with step tracking\nApply predicate pushdown optimization\nApply projection pushdown optimization\nApply subquery optimization\nEvaluate binary operations on constants\nEvaluate unary operations on constants\nFold constants in an expression\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new rule-based optimizer\nApply rule-based optimizations to a statement\nOptimize DELETE statement\nOptimize INSERT statement\nOptimize SELECT statement\nOptimize SELECT statement with step tracking\nOptimize UPDATE statement\nApply rule-based optimizations and return steps for …\nCheck if two SELECT statements are equal\nCheck if two statements are equal (for optimization …\nColumn-level statistics\nHistogram bucket for value distribution\nIndex statistics\nMain statistics collector\nTable-level statistics\nAnalyze a table and update statistics with sampling\nAuto-update statistics based on data changes\nAverage row size in bytes\nAverage width of column values in bytes\nBuild histogram for a column based on sampled data\nClear all statistics\nCollect statistics from actual data (placeholder …\nColumn statistics by table.column\nCorrelation with physical row order (-1 to 1)\nIndex correlation with table order\nNumber of distinct values in this column\nTotal number of distinct values across key columns\nEstimate the selectivity of a column equality predicate\nEstimate join selectivity between two columns\nEstimate the selectivity of a range predicate (column &gt; …\nExport statistics to a format suitable for persistence\nFrequency of values in this bucket\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet statistics for a column\nGet statistics for an index\nGet statistics for a table\nGet all table names with statistics\nHistogram of value distribution\nIndex statistics by index name\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLower bound of the bucket\nMark table as needing statistics refresh\nGet memory usage estimate for statistics\nMost common values and their frequencies\nCheck if table needs statistics update based on …\nCreate a new statistics collector\nFraction of null values across all columns\nFraction of null values\nNumber of pages in the index\nTotal number of rows in the table\nAverage number of rows per page\nIndex selectivity (0.0 to 1.0)\nTable statistics by table name\nNumber of tuples in the index\nAverage number of tuples per page\nUpdate statistics for a column\nUpdate statistics for an index\nUpdate statistics for a table\nUpper bound of the bucket\nContains the error value\nContains the success value\nParse error information\nParse result type\nMain SQL Parser\nAdvance to the next token\nDCL (Data Control Language) Parser Implementation\nDDL (Data Definition Language) Parser Implementation\nDML (Data Manipulation Language) Parser Implementation\nCheck if current token matches expected token and advance …\nExpression Parser Implementation\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if current token matches any of the expected tokens\nCreate a new SQL parser\nParse a SQL statement from string input\nParse ALTER statements\nParse CREATE statements\nParse DROP statements\nParse a top-level SQL statement\nPeek at the next token without advancing\nSELECT Statement Parser Implementation\nTCL (Transaction Control Language) Parser Implementation\nParser Utilities\nParse GRANT statement GRANT privilege_list ON object_type …\nParse grantee list (user names or roles)\nParse object type and name (e.g., TABLE users, SCHEMA …\nParse privilege list (e.g., SELECT, INSERT, UPDATE or ALL)\nParse REVOKE statement REVOKE [GRANT OPTION FOR] …\nParse alter column action\nParse ALTER TABLE statement\nParse column definition\nParse CREATE EXTENSION statement\nParse CREATE INDEX statement\nParse CREATE SCHEMA statement\nParse CREATE TABLE statement\nParse CREATE VIEW statement\nParse DROP EXTENSION statement\nParse DROP INDEX statement\nParse DROP SCHEMA statement\nParse DROP TABLE statement\nParse DROP VIEW statement\nParse index column specification\nParse index options (WITH clause for indexes)\nParse index type (USING clause)\nParse table constraint\nParse table options (WITH clause)\nParse DELETE statement with USING clause support\nHelper function to parse expressions using the proper …\nParse FROM clause\nParse INSERT statement with support for batch inserts and …\nParse ON CONFLICT clause\nParse ORDER BY clause\nParse RETURNING clause\nParse SELECT statement\nParse UPDATE statement with JOIN support\nParse WHERE expression with basic comparison operators\nExpression parser with operator precedence handling\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nParse additive expressions (+, -, ||)\nParse AND expressions\nParse a CASE expression\nParse a CAST expression\nParse comparison expressions (&lt;, &lt;=, &gt;, &gt;=, LIKE, IN, …\nParse equality expressions (=, !=, &lt;&gt;, IS, IS NOT)\nParse a complete expression with proper precedence\nParse window frame bound\nParse a function call with proper DISTINCT and FILTER …\nParse multiplicative expressions (*, /, %)\nParse OR expressions (lowest precedence)\nParse the contents of an OVER clause\nParse primary expressions (literals, identifiers, function …\nParse a SQL type for CAST expressions\nParse unary expressions (NOT, -, +)\nParse window frame specification\nParse window function expressions\nParse window OVER clause for aggregate functions used as …\nParser for SELECT statements\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nParse a comprehensive SELECT statement\nParse access mode\nParse BEGIN statement BEGIN [WORK | TRANSACTION] […\nParse COMMIT statement COMMIT [WORK | TRANSACTION] [AND [NO…\nParse isolation level\nParse RELEASE SAVEPOINT statement RELEASE [SAVEPOINT] …\nParse ROLLBACK statement ROLLBACK [WORK | TRANSACTION] [TO …\nParse SAVEPOINT statement SAVEPOINT savepoint_name\nParse additive expressions (+, -, ||)\nParse AND expressions\nParse comparison expressions (&lt;, &lt;=, &gt;, &gt;=, LIKE, IN, …\nParse a SQL data type\nParse equality expressions (=, !=, &lt;&gt;, IS, IS NOT)\nParse an expression with proper operator precedence\nParse a literal SQL value\nParse multiplicative expressions (*, /, %)\nParse OR expressions (lowest precedence)\nParse primary expressions (literals, identifiers, …\nParse a SELECT statement (placeholder implementation)\nParse a table name (with optional schema qualification)\nParse unary expressions (NOT, -, +)\nParse vector elements from a comma-separated string like …\nNetwork type representation\nPostgreSQL interval type representation\nSQL Range type representation\nSQL Data Types\nSQL Runtime Values\nFull text search vector element\nCheck if this type can be cast to another type\nAttempt to cast this value to another SQL type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this type is character-based\nCheck if this type is date/time related\nCheck if this value is null\nCheck if this type is numeric\nCheck if this type is a vector type\nParse a string value into a SQL value of the specified type\nGet the PostgreSQL OID for this type\nGet the size in bytes for fixed-size types\nGet the SQL type of this value\nConvert to PostgreSQL wire format string representation\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nDistributed cluster storage\nLSM-Tree based durable storage\nPure in-memory storage (default, non-durable)\nConfiguration for storage backend selection\nFactory for creating storage backends\nStorage backend metrics for monitoring\nHelper trait for serializing storage data\nTransaction context for storage operations\nAbstraction for PostgreSQL table storage operations\nBegin a new transaction\nForce a checkpoint (flush all pending data to disk)\nCommit a transaction\nPerform compaction (LSM-tree specific)\nCreate a new storage backend based on configuration\nDelete rows from a table based on a condition (for now, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet extension by name\nGet index by name\nGet schema by name\nGet configuration setting\nGet all rows from a table\nGet table schema by name\nGet view by name\nInitialize the storage backend\nInsert row data into a table\nInsert multiple rows into a table\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList all extensions\nList all schemas\nList all settings\nList all indexes for a table\nList all table schemas\nList all views\nIn-memory storage backend for PostgreSQL wire protocol\nGet current storage metrics\nRemove extension\nRemove index\nRemove schema\nRemove table schema\nRemove view\nRollback a transaction\nShutdown the storage backend gracefully\nEstimate storage size in bytes\nStore extension definition\nStore index definition\nStore schema definition\nStore configuration setting\nStore table schema definition\nStore view definition\nClear all data from a table (but keep schema)\nUpdate rows in a table based on a condition (for now, …\nIn-memory storage implementation\nEstimate memory usage\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new memory storage backend\nUpdate metrics for an operation\npgvector-compatible query engine\nVector table schema definition\nCheck if SQL contains vector operations\nExecute a vector-compatible SQL query\nExtract vector literal from SQL expression\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle CREATE EXTENSION vector\nHandle CREATE TABLE with vector columns\nHandle CREATE INDEX for vector similarity search\nHandle INSERT with vector data\nHandle similarity search queries\nHandle vector functions like vector_dims()\nHandle SELECT queries with vector operations\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new vector query engine\nParse column definitions from CREATE TABLE\nParse INSERT values\nParse vector literal like ‘[0.1, 0.2, 0.3]’ or ‘…\nActor definitions for RESP protocol storage\nRESP protocol codec for parsing and encoding\nRESP protocol command modules\nRESP protocol server\nSimplified local invocation system for RESP protocol actors\nAdvanced Redis geospatial commands for Orbit-RS.\nRESP protocol types\nActor for storing hash maps (Redis HASH type)\nAsync trait for HashActor methods\nActor for storing key-value pairs (Redis STRING type)\nAsync trait for KeyValueActor methods\nActor for storing lists (Redis LIST type)\nAsync trait for ListActor methods\nActor for managing pub/sub channels\nAsync trait for PubSubActor methods\nActor for storing sets (Redis SET type)\nAsync trait for SetActor methods\nActor for storing sorted sets (Redis ZSET type)\nAsync trait for SortedSetActor methods\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRESP protocol codec\nFind CRLF position starting from offset\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new RESP codec\nParse array: *2\\r\\n$3\\r\\nfoo\\r\\n$3\\r\\nbar\\r\\n or *-1\\r\\n …\nParse bulk string: $6\\r\\nfoobar\\r\\n or $-1\\r\\n (null)\nParse error: -Error message\\r\\n\nParse integer: :1000\\r\\n\nParse a RESP value from bytes\nParse simple string: +OK\\r\\n\nCreate a codec with custom max frame size\nMain command handler that delegates to specialized command …\nConnection-related RESP commands\nReturns the argument unchanged.\nHash command handlers for Redis RESP protocol\nCalls <code>U::from(self)</code>.\nList command handlers for Redis RESP protocol\nSet command handlers for Redis RESP protocol\nSorted set command handlers for Redis RESP protocol\nSimple String command handlers for Redis RESP protocol\nPersistent String command handlers for Redis RESP protocol\nCommon traits and utilities for RESP command handlers\nHandler for connection commands\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCommand categories for organizing command dispatch\nMain command handler that delegates to specialized command …\nReturns the argument unchanged.\nCategorize command for dispatch\nHandle a RESP command by delegating to the appropriate …\nCalls <code>U::from(self)</code>.\nCreate a new command handler with all specialized modules\nParse command and extract name and arguments\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLINDEX key index - Get an element by its index\nLLEN key - Get the length of the list\nLPOP key [count] - Remove and return elements from the …\nLPUSH key element [element …] - Insert elements at the …\nLRANGE key start stop - Get a range of elements from the …\nLREM key count element - Remove elements from the list\nLSET key index element - Set the value of an element by …\nLTRIM key start stop - Trim the list to the specified range\nRPOP key [count] - Remove and return elements from the …\nRPUSH key element [element …] - Insert elements at the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSADD key member [member …] - Add members to a set\nSCARD key - Get the cardinality (size) of a set\nSDIFF key [key …] - Get difference of multiple sets\nSINTER key [key …] - Get intersection of multiple sets\nSISMEMBER key member - Check if member exists in set\nSMEMBERS key - Get all members of a set\nSREM key member [member …] - Remove members from a set\nSUNION key [key …] - Get union of multiple sets\nReturns the argument unchanged.\nGet the initial set for SDIFF operation\nCalls <code>U::from(self)</code>.\nRemove members from a specific key\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBase structure for command handlers that need OrbitClient …\nCommon trait for all command handlers\nReturns the argument unchanged.\nExtract float argument at index with error handling\nExtract integer argument at index with error handling\nExtract optional string argument at index\nExtract string argument at index with error handling\nHandle a command for this category\nCalls <code>U::from(self)</code>.\nGet a key for Orbit actor addressing\nCreate new base handler\nGet supported commands for this handler\nValidate argument count for a command\nValidate argument count within a range\nRESP protocol server\nReturns the argument unchanged.\nHandle command with proper error handling\nCalls <code>U::from(self)</code>.\nCreate a new RESP server\nProcess a single message result, returns false if …\nStart the server\nSend response and handle send errors\nSimplified local actor registry for core RESP commands\nExecute hash actor methods\nExecute an invocation\nExecute keyvalue actor methods\nExecute list actor methods\nExecute set actor methods\nExecute sorted set actor methods\nReturns the argument unchanged.\nHash actors\nCalls <code>U::from(self)</code>.\nKeyValue actors\nList actors\nSet actors\nSorted set actors\nGeofence definition with alerting capabilities\nReal-time geofencing engine\nRedis spatial command executor with advanced geospatial …\nRedis value types for spatial operations\nSpatial data set with indexed geometries\nExecute a Redis spatial command.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGEOADD key longitude latitude member [longitude latitude …\nGEO.CLUSTER.KMEANS index_name k_value\nGEODIST key member1 member2 [m|km|ft|mi]\nGEO.FENCE.ADD fence_name geometry alert_types\nGEO.FENCE.CHECK entity_id longitude latitude\nGEOHASH key member [member …]\nGEO.INDEX.CREATE index_name index_type [options]\nGEOPOS key member [member …]\nGEORADIUS key longitude latitude radius m|km|ft|mi […\nGEORADIUSBYMEMBER key member radius m|km|ft|mi [WITHCOORD] …\nReal-time geofencing engine\nGPU acceleration engine\nSpatial indexes for different data sets\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new Redis spatial commands executor.\nStreaming processor for real-time updates\nArray: *2\\r\\n$3\\r\\nfoo\\r\\n$3\\r\\nbar\\r\\n\nBulk string: $6\\r\\nfoobar\\r\\n\nError: -Error message\\r\\n\nInteger: :1000\\r\\n\nNull array: *-1\\r\\n\nNull bulk string: $-1\\r\\n\nType alias for RESP arrays\nRESP protocol value types\nSimple string: +OK\\r\\n\nCreate an array\nExtract as array if possible\nExtract as integer if possible\nExtract as string if possible\nCreate a bulk string from bytes\nCreate a bulk string from a string\nCreate an error\nReturns the argument unchanged.\nCreate an integer\nCalls <code>U::from(self)</code>.\nCheck if this is a null value\nCreate null bulk string\nOK response\nSerialize to RESP2 format\nCreate a simple string\n<code>ToString::to_string</code>, but without panic on OOM.\nTime series aggregation functions\nCompaction rule for automatic downsampling\nData encoding types\nPolicy for handling duplicate timestamps\nA single time series data point\nTime series actor for managing time-based data\nAsync trait defining time series actor operations\nTime series configuration\nTime series statistics\nAdd a sample to the time series\nAdd a sample to the time series\nAdd multiple samples\nAdd multiple samples\nApply aggregation to a set of samples\nAggregate samples into buckets\nApply compaction rules (placeholder - would need access to …\nApply retention policy\nCompaction rules for automatic downsampling\nTime series configuration\nCreate a compaction rule\nCreate a compaction rule\nSeries creation timestamp\nDelete a compaction rule\nDelete a compaction rule\nDelete samples within a timestamp range\nDelete samples within a timestamp range\nEstimate memory usage in bytes\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the latest sample\nGet the latest sample\nGet samples within a timestamp range\nGet samples within a timestamp range\nGet aggregated samples within a range\nGet aggregated samples within a range\nGet samples within a range in reverse order\nGet samples within a range in reverse order\nGet series statistics\nGet series statistics\nIncrement/decrement the latest sample\nIncrement/decrement the latest sample or create new one\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if series matches label filters\nCheck if series matches label filters\nCreate a new empty time series\nOrdered samples (timestamp -&gt; value)\nUpdate time series configuration\nUpdate time series configuration\nLast update timestamp\nCreate time series with custom configuration\nCosine similarity (normalized dot product)\nDot product similarity\nEuclidean distance (L2 norm)\nManhattan distance (L1 norm)\nSupported vector similarity metrics\nHigh-dimensional vector with metadata\nVector store actor for managing vectors and performing …\nAsync trait defining vector actor operations\nVector index configuration\nVector search parameters\nVector similarity search result\nVector similarity calculation utilities\nVector store statistics\nAdd a vector to the store\nAdd or update a vector\nIndex algorithm (for future extensibility)\nAverage vector dimension\nAverage metadata keys per vector\nCalculate similarity based on metric type\nCalculate cosine similarity between two vectors Returns …\nCreate a vector index\nCreate a vector index\nVector data as f32 array\nDefault dimension for new vectors\nDefault similarity metric\nGet vector dimension\nVector dimension\nCalculate dot product between two vectors\nDrop a vector index\nDrop a vector index\nCalculate euclidean distance between two vectors Returns …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet vector store statistics\nCalculate statistics about stored vectors\nGet a vector by ID\nGet a vector by ID\nUnique identifier for the vector\nNumber of indices\nVector indices for fast search\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPerform k-nearest neighbors search\nFind k nearest neighbors\nMaximum number of results to return\nList all vector indices\nList all indices\nList all vector IDs\nGet all vector IDs\nGet vector magnitude (L2 norm)\nCalculate Manhattan (L1) distance between two vectors\nMaximum vector dimension\nOptional metadata associated with the vector\nMetadata filters to apply\nDistance metric used\nSimilarity metric to use\nDistance metric for the index\nMinimum vector dimension\nIndex name\nCreate a new vector with given id and data\nCreate new search parameters\nCreate a new index configuration\nCreate a new empty vector actor\nNormalize vector to unit length for cosine similarity\nIndex-specific parameters\nQuery vector to search for\nRemove a vector by ID\nRemove a vector by ID\nSimilarity score (higher = more similar)\nSearch for similar vectors\nPerform vector similarity search\nMinimum similarity threshold\nTimestamp when vector was created/updated\nThe matching vector\nGet vector count\nGet vector count\nTotal number of vectors\nCollection of stored vectors\nSet default dimension for vectors\nSet default similarity metric\nCreate a vector with metadata\nAdd metadata filter\nSet similarity threshold")