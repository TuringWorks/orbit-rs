searchState.loadedDescShard("orbit_shared", 0, "Macro to easily benchmark code blocks\nPerformance benchmarks for critical paths in Orbit …\nBuilder pattern utilities for consistent configuration …\nChange Data Capture (CDC) module for tracking all data …\nMacro to reduce boilerplate in configuration struct …\nError handling macros to reduce boilerplate\nCommon configuration utilities to reduce code duplication …\nEnhanced error handling patterns for consistent error …\nError handling utilities for reducing boilerplate across …\nEvent Sourcing implementation for Orbit\nCommon execution utilities and patterns to reduce …\nCore graph database types and storage traits\nGraphRAG shared types and utilities\nMacro to generate builder pattern implementations\nMacro to implement environment variable configuration …\nMacro for quick error conversion with context\nMacro for error logging with conversion\nOrbitQL - Unified Multi-Model Query Language\nAdvanced connection pooling for production-scale …\nReplication slot management for logical replication\nAdvanced Security Framework for Orbit-RS\nAdvanced security patterns for Orbit applications\nSerialization utilities for Orbit shared data structures\nSpatial Data Types and Functionality\nStream processing engine with windowing and aggregation\nStreaming integrations for message brokers and event …\nOrbit Time Series Engine\nDatabase Triggers - Event-Driven Actions\nConfiguration for actor communication system\nActor discovery and routing service\nHandle to communicate with a local actor\nActor lifecycle events for communication\nActor message types for inter-actor communication\nUnique identifier for actor messages\nMessage router for actor-to-actor communication\nActor performance and health metrics\nHeartbeat for actor health monitoring\nDirect method invocation on another actor\nActor lifecycle events\nResponse to a previous invocation\nFire-and-forget message\nMaps actor references to their current locations\nBroadcast a lifecycle event to interested parties\nClean up actors that haven’t been accessed recently\nDiscover the location of an actor\nForward a message to a remote node\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all known actor locations\nGet all actors on a specific node\nHandle a response message\nInitiate discovery process for an actor\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLocal actor registry\nMaps nodes to the actors they host\nPending discovery requests\nPending responses waiting for replies\nRegister a local actor\nRemove actor from location tracking\nRoute a message to the appropriate actor\nRoute message to remote actor\nSend a message and wait for a response\nSend heartbeat messages for all local actors\nSend a message to another actor\nSend message to a local actor handle\nStart background services for actor discovery and health …\nTry to route message to local actor\nUnregister a local actor\nUpdate actor location information\nTrait for addressables with i32 keys\nTrait for addressables with i64 keys\nTrait for addressables with no key\nTrait for addressables with string keys\nTrait marker for addressable actors\nAn invocation of a method on an addressable\nArguments for an addressable invocation Each argument is a …\nA lease for an addressable indicating its current location …\nReference to an addressable (type + key)\nA key that uniquely identifies an addressable within its …\nNamespaced reference to an addressable\nThe arguments being passed\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe method being called\nReason the invocation call was sent\nA reference to the addressable\nBenchmark result with statistical information\nPerformance benchmark suite\nBuilt-in benchmarks for common operations\nBenchmark an operation\nBenchmark attack detection\nBenchmark rate limiting operations\nBenchmark security validation operations\nBenchmark string operations\nBenchmark a synchronous operation\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate performance report\nGet all benchmark results\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new benchmark suite\nRun all standard benchmarks\nTrait for objects that can be built using the builder …\nTrait for configuration builders\nTrait for configuration objects with environment variable …\nBuild the final configuration object\nBuild with validation\nCreate a new builder for this type\nLoad configuration from environment variables with default …\nLoad configuration from environment variables with prefix\nCreate a new builder\nStandard parsers for common types\nValidate the configuration before building\nParse boolean from string\nParse duration from milliseconds\nParse duration from seconds\nGeneric parser for types implementing FromStr\nParse optional values\nParse string (identity function)\nParse integer types\nCDC consumer that receives change events\nMain CDC coordinator that manages change capture and …\nCDC change event representing a single data modification\nCDC event filter for selective consumption\nCDC statistics\nCDC stream for consuming events\nCDC subscription configuration\nDELETE operation - data removed\nTypes of DML operations captured by CDC\nINSERT operation - new data added\nTRUNCATE operation - table cleared\nUPDATE operation - existing data modified\nCreate a filter that matches all events\nBuffer size for the event channel\nCapture a CDC event\nCreate a new DELETE event\nBroadcast channel for CDC events\nUnique event ID\nEvents by operation type\nEvents by table\nEvent filter\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet CDC statistics\nWhether to include new values in events\nWhether to include old values in events\nCreate a new INSERT event\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLog sequence number for ordering\nCurrent LSN counter\nCheck if an event matches this filter\nAdditional metadata\nCreate a new CDC coordinator\nNew data values (for INSERT and UPDATE)\nReceive the next CDC event\nOld data values (for UPDATE and DELETE)\nHandle consumer errors\nType of DML operation\nFilter by DML operations\nProcess a CDC event\nPrimary key or row identifier\nSchema name (if applicable)\nFilter by schemas\nCDC statistics\nSubscribe to CDC events\nGet active subscriptions count\nGet the subscription ID\nUnique subscription ID\nActive subscriptions\nTable/collection name\nCreate a filter for specific tables\nFilter by tables\nTimestamp when the change occurred\nTotal events captured\nTransaction ID that caused this change\nFilter by transaction IDs\nTransaction logger for persisting CDC events\nUnsubscribe from CDC events\nCreate a new UPDATE event\nAdd metadata\nSet schema\nSet transaction ID\nEnhanced cluster manager with split-brain protection\nNetwork partition detector\nEvent handler that integrates with recovery system\nSplit-brain detection system\nPerform connectivity matrix check across all nodes\nCheck overall cluster health and split-brain risk\nCheck network connectivity to a node\nCheck if current cluster configuration might cause …\nCollect all transactions that need recovery from failed …\nDetect network partitions\nDetection interval\nEnable dynamic quorum adjustment\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the detection interval\nGet nodes in the same partition as this node\nCheck if current node has quorum\nIdentify coordinators that have failed\nInitiate a comprehensive recovery scan when this node …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum tolerated failures\nMinimum cluster size to avoid split-brain\nMinimum nodes required for quorum\nNode health tracking\nNetwork partition detection\nCurrent partition map\nNumber of ping attempts\nPing timeout for connectivity checks\nProcess the collected transactions for recovery\nQuorum configuration\nQuorum timeout\nSplit-brain detection\nStart the enhanced cluster manager\nStart health monitoring background task\nStart split-brain monitoring\nUpdate health status of all cluster nodes\nCommon configuration trait that provides default …\nCommon resource limits configuration\nCommon retry configuration pattern\nCommon timeout configuration used across services\nGet configuration source description for debugging\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCommon environment configuration helper\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMerge configuration with another instance, giving priority …\nValidate the configuration settings\nAppend entries request\nAppend entries response\nRaft log entry\nRaft commands that can be replicated\nRaft configuration\nRaft consensus implementation\nRaft event handler for leadership changes\nRaft node states\nNetwork transport for Raft messages\nVote request message\nVote response message\nBecome leader\nCollect votes from other nodes\nElection timeout range (randomized)\nEvent handlers\nFinalize election based on vote count\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet cluster nodes\nGet current term\nGet last log entry information\nGet current leader ID\nHandle incoming append entries request\nHandle incoming vote request\nHeartbeat interval for leader\nInitialize leader indices for all followers\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this node is the current leader\nElection tracking\nLog storage\nLog compaction threshold\nMaximum entries per append request\nLeader state (only used when this node is leader)\nNode configuration\nNotify event handlers about leadership\nPrepare for election by transitioning to candidate and …\nProcess vote results and return vote count\nSend heartbeats to all followers\nStart the Raft consensus algorithm\nStart election process\nStart election timer\nStart heartbeat sender for leader\nRaft state\nStep down from candidate/leader to follower\nTransition to leader state\nRecord of an election attempt\nPersistent election state that survives node restarts\nPersistent storage manager for election state\nElection statistics for monitoring\nCheck if we can vote for a candidate\nCheck if we can vote for a candidate\nCleanup old election records\nCurrent Raft term\nElection history\nExport election state for debugging\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet current term\nGet election statistics\nGet last known leader\nGet election statistics\nGet who we voted for in current term\nImport election state (for recovery)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLast known leader\nLast update timestamp\nLoad election state from disk\nCreate a new election state manager\nRecord election result\nRecord an election attempt\nSave election state to disk\nStart periodic state saving\nUpdate leader and save to disk\nUpdate the last known leader\nUpdate term and save to disk\nUpdate the current term and reset vote\nCast vote and save to disk\nCast vote for a candidate in current term\nNode voted for in current term\nTrait for consistent error conversion patterns\nTrait for error handling with automatic logging\nTrait for error handling with retry logic\nSecurity-focused input validation traits\nHelper macro to log at specific level\nLog error at error level and return it\nLog error at warn level and return it\nLog error with custom level\nMap error with orbit error chain\nRetry operation with exponential backoff\nConvert result to OrbitError with context\nConvert result to OrbitError with formatted context\nValidate input against allowed characters\nValidate input length constraints\nValidate input for SQL injection patterns\nValidate input for XSS patterns\nGeneric application errors\nAuthentication/authorization errors\nConfiguration errors\nContains the error value\nCommon error types across the application\nTrait for adding context to errors\nNetwork/IO errors\nContains the success value\nParsing/validation errors\nResult type alias for common error handling\nDatabase/storage errors\nUtility to create application errors with context\nUtility to create application errors with context\nAdd context message to an error\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAdd context to an error\nUtility function to wrap std errors\nDomain event in event sourcing system\nEvent sourced aggregate trait\nEvent store for persisting and retrieving domain events\nEvent store configuration\nEvent store statistics\nSnapshot of aggregate state at a point in time\nAggregate ID\nAggregate ID this event belongs to\nAggregate ID\nAggregate type\nAggregate type\nAppend event to store\nApply an event to this aggregate\nConvert CDC event to domain event\nClear uncommitted events\nConfiguration\nEvent data/payload\nEnable event archiving\nEnable snapshotting\nUnique event ID\nEvent type\nEvents by aggregate ID\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet events for an aggregate\nGet events for an aggregate after a specific timestamp\nGet all events for an aggregate type\nGet latest snapshot for an aggregate\nGet event store statistics\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLast event sequence number included in snapshot\nMaximum events to keep in memory per aggregate\nEvent metadata\nCreate a new event store\nCreate a new domain event\nRebuild aggregate state from events\nSave a snapshot\nSequence number within the aggregate\nEvent sequence counters by aggregate ID\nSnapshot interval (create snapshot every N events)\nSnapshots by aggregate ID\nAggregate state\nStatistics\nEvent timestamp\nSnapshot timestamp\nGet uncommitted events\nEvent version (for schema evolution)\nAdd metadata to event\nSet event version\nContains the error value\nContains the success value\nOrbit-specific error types\nResult type for Orbit operations\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGeneric command pattern for reducing executor complexity\nCommand executor that handles common execution patterns\nContains the error value\nExecution context that carries metadata through the …\nCommon execution errors\nExecution metrics for monitoring\nResult type for execution operations\nContains the success value\nPipeline execution pattern for chaining operations Type …\nGet command description for logging/debugging\nExecute the command with the given context\nExecute multiple commands concurrently with optional limits\nExecute a single command with error handling and timeout\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nValidate the command before execution\nFollow both directions\nDirection of graph traversal\nGraph node with labels and properties\nGraph relationship connecting two nodes\nTrait for graph storage operations\nFollow incoming relationships\nUnique identifier for a graph node\nFollow outgoing relationships\nUnique identifier for a graph relationship\nAdd labels to a node\nAdd labels to the node\nGet the string representation\nGet the string representation\nCount nodes with specific label\nCount relationships of specific type\nCreate a new node\nCreate a relationship between two nodes\nCreation timestamp\nCreation timestamp\nDelete a node and all its relationships\nDelete a relationship\nTarget node ID\nFind nodes by label and optional property filters\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate from string reference\nCreate a relationship ID from a string\nGet all labels for a node\nGet a node by ID\nGet a property value\nGet a property value\nGet a relationship by ID\nGet relationships for a node\nCheck if node has a specific label\nUnique node identifier\nUnique relationship identifier\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNode labels (e.g., [“Person”, “Employee”])\nCreate a new node ID\nCreate a new random relationship ID\nCreate a new graph node\nCreate a new relationship\nKey-value properties\nKey-value properties\nRelationship type (e.g., “KNOWS”, “WORKS_FOR”)\nRemove labels from a node\nRemove labels from the node\nRemove a property\nRemove a property\nSet a property value\nSet a property value\nSource node ID\nIn-memory graph storage implementation\nUpdate node properties\nUpdate relationship properties\nLast updated timestamp\nLast updated timestamp\nCreate a new graph node with specific ID\nCreate a new relationship with specific ID\nIn-memory graph storage implementation\nReturns the argument unchanged.\nIndex of incoming relationships by node ID\nCalls <code>U::from(self)</code>.\nLabel index: label -&gt; set of node IDs\nCreate a new in-memory graph storage\nGet node count for metrics\nNode storage indexed by NodeId\nIndex of outgoing relationships by node ID\nRelationship type index: type -&gt; set of relationship IDs\nGet relationship count for metrics\nRelationship storage indexed by RelationshipId\nUpdate the label index when a node’s labels change\nUpdate the relationship type index\nUpdate relationship indexes for a node\nAdaptive strategy based on query type\nAnthropic Claude models\nBalanced parallel search across all sources\nAbstract concepts, ideas\nConnection explanation between two entities\nContext item for RAG queries\nType of context source\nCustom entity type\nCustom embedding function\nDocuments, files, publications\nEmbedding model configuration\nTypes of embedding models\nEnhanced graph node with vector embeddings and GraphRAG …\nEnhanced graph relationship with vector embeddings\nEntity type classification\nEvents, meetings, occurrences\nExtracted entity from text processing\nExtracted relationship between entities\nFrom graph traversal\nGraph traversal first, then vector/text\nHybrid/combined source\nLLM provider configuration\nLocal embedding API\nLocal LLM API\nGeographic locations, places\nOllama embedding models\nOllama local models\nOpenAI embedding models\nOpenAI GPT models\nCompanies, organizations, institutions\nPerson names, people\nProducts, services, items\nNumbers, quantities, measurements\nRAG response with context and citations\nMulti-hop reasoning path between entities\nSearch strategy for hybrid search\nSentence transformer models\nDates, times, temporal references\nFrom text search\nText search first, then graph/vector\nFrom vector similarity search\nVector similarity first, then graph expansion\nAdd an alias\nAdd an embedding for a specific model\nAdd an embedding for a specific model\nAdd a source document\nAlternative names/aliases for this entity\nPotential aliases/variations\nGet all available embedding models\nBase graph node\nBase graph relationship\nBest/strongest connection path\nCitations/sources\nConfidence score (0.0 to 1.0)\nConfidence score (0.0 to 1.0)\nConfidence in the response\nConfidence score for entity extraction (0.0 to 1.0)\nConfidence score for relationship extraction (0.0 to 1.0)\nModel configuration\nOverall connection strength\nContent text\nContext items used for generation\nEmbedding dimension\nFrequency of this entity across documents\nMultiple embeddings per model (model_name -&gt; embedding)\nEmbedding of the relationship text/context\nEnd position in source text\nEntity type classification\nEntity type\nExplanation of the path\nHuman-readable explanation\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSource entity\nSource entity\nGet embedding for a specific model\nCheck if node has embedding for model\nSemantic importance score based on graph structure\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDirectional relationship (for weight calculation)\nLast time this node was updated\nLast time this relationship was updated\nPath length (number of hops)\nAdditional metadata\nAdditional metadata\nModel type\nModel name/identifier\nCreate a new enhanced graph node\nCreate a new enhanced graph relationship\nPath nodes in order\nAll discovered paths\nProcessing time in milliseconds\nAdditional properties/metadata\nAdditional properties/metadata\nRelationship type/label\nRelationships connecting the nodes\nRelevance score\nGenerated response text\nPath score/confidence\nSource document identifier\nSource document identifier\nSource documents that contributed to this entity\nSource documents that mention this relationship\nSource entity/document ID\nSource text that describes this relationship\nSource type (graph, vector, text)\nStart position in source text\nStrength/weight of this relationship\nEntity text/name\nTarget entity\nTarget entity\nConvert to string representation\nUpdate confidence score\nUpdate importance score\nUpdate relationship strength\nIntegrated recovery and leader election system This …\nCheck a specific transaction and recover if coordinator is …\nDetermine the effective leader from both Raft and election …\nForce a recovery scan (useful for testing or manual …\nReturns the argument unchanged.\nGet the current cluster leader\nGet election statistics\nGet recovery statistics\nGet limited set of transaction IDs that may need recovery\nHandle health check for a transaction coordinator and …\nHandle recovery responsibilities if this node is the leader\nIdentify coordinators that have failed and need recovery\nInitiate recovery for an unhealthy coordinator\nCalls <code>U::from(self)</code>.\nCheck if this node is the current leader\nCheck if the recovery system is running\nCreate a new integrated recovery system\nPerform periodic recovery duties when this node is the …\nRecover transactions from a specific failed coordinator\nMain loop for leader monitoring\nGracefully shutdown the recovery system\nStart the integrated recovery system\nStart monitoring for leader changes and sync with recovery …\nValidate that this node is the leader before initiating …\nConsul-based discovery\nDeployment mode detection and configuration\nDNS-based service discovery\nDocker Compose deployment\netcd-based discovery\nKubernetes lease-based leader election configuration\nKubernetes lease information\nKubernetes lease client trait for testability\nRunning in Kubernetes cluster\nReal Kubernetes lease client implementation\nMock lease client for testing\nRunning in standalone mode\nStatic list of nodes\nUniversal election manager that works in any deployment …\nAuto-detect deployment mode\nEnable fallback to Raft consensus\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the current leader identity\nGet election statistics\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this node is currently the leader\nLease duration in seconds\nLease name for leader election\nKubernetes namespace for leases\nCreate a new universal election manager\nPod name (identity)\nPod namespace\nForce leadership release (for graceful shutdown)\nRenew deadline in seconds\nRetry period in seconds\nStart the election process\nWait for leadership (useful for testing)\nCapabilities that a node can provide\nUnique identifier for a node in the cluster\nInformation about a node in the cluster\nA lease representing a node’s claim to remain active\nCurrent status of a node\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse NodeId from string format “namespace:key”\nGenerate a new random NodeId for the given namespace\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the lease has expired\nCreate a NodeId with a specific key and namespace\nCheck if the lease should be renewed\nReason for an invocation\nA message in the Orbit system\nContent of a message\nTarget for a message\nGet the destination string for routing purposes\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIncrement the attempt counter\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMain OrbitQL engine with profiling support\nQuery execution context\nQuery execution parameters\nQuery execution statistics\nUnified value type for OrbitQL\nAdvanced Analytics System for OrbitQL\nAbstract Syntax Tree (AST) definitions for OrbitQL\nQuery result caching with intelligent invalidation for …\nCost-based query planner implementation\nCost model for query optimization\nDistributed query execution engine for OrbitQL\nDistributed execution system for OrbitQL query engine\nExecute an OrbitQL query with optional profiling\nExecute query with detailed profiling (new approach)\nExecute query without profiling (faster path)\nQuery execution engine for OrbitQL\nExplain query execution plan\nExecute query with profiling and return detailed analysis\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet profiling report for the last executed query (if …\nIndex recommendation system for automated database …\nIndex selection engine for query optimization\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLexical analyzer (tokenizer) for OrbitQL\nOrbitQL Language Server Protocol (LSP) Implementation\nQuery optimization engine for OrbitQL\nParallel query execution engine for distributed and …\nParser for OrbitQL\nQuery planning engine for OrbitQL\nProduction Deployment and Testing Framework for OrbitQL\nQuery performance profiler and EXPLAIN ANALYZE for OrbitQL\nQuery caching system for high-performance query result and …\nEnable or disable profiling\nOrbitQL Spatial Functions and Operations\nStatistics collection system for query optimization\nStorage integration layer for OrbitQL query engine\nQuery result streaming and live queries for OrbitQL\nValidate query syntax without execution\nVectorized execution engine for high-performance query …\nCreate engine with profiling enabled\nActivation functions for neural network\nActivation function utilities and batch operations\nAdaptive Boosting\nAdaBoost model for cost estimation\nAdaptation parameters\nAdaptive query optimizer\nAdd index hint\nAdvanced Analytics coordinator\nConfiguration for advanced analytics\nAdvanced Analytics errors\nAnalytics report\nDetected anomaly\nAnomaly detection algorithm trait\nAnomaly detector for unusual workload patterns\nAnomaly detection thresholds\nTypes of anomalies\nAuto-tuning system for dynamic optimization\nSimple averaging\nBase estimator types for AdaBoost\nBayesian bootstrap\nBernoulli bootstrap\nBinary classification\nBlending\nBooster types\nBoosting ensemble that combines multiple boosting …\nBootstrap types for CatBoost\nCPU allocation settings\nCache eviction policies\nCache parameters\nCategorical Boosting (CatBoost-style)\nCatBoost-style categorical boosting\nCategorical feature set\nChange execution strategy\nCount objective for Poisson regression\nDART (Dropout meets Multiple Additive Regression Trees)\nData distribution characteristics\nDecision stump (depth 1 tree)\nDecision tree for random forest\nDecision tree with limited depth\nDuration patterns\nExponential Linear Unit: f(x) = x if x &gt; 0, else α(e^x - …\nEarly stopping state for XGBoost training\nEnsemble combination methods\nExecution context\nExecution record for adaptive learning\nExecution strategies\nFeature deviation\nPerformance feedback loop\nFeedback record\nRegularized linear model\nGradient boosted trees\nGaussian Error Linear Unit: f(x) = x * Φ(x)\nGradient Boosting Machine (XGBoost-style)\nGradient Boosting Machine for cost estimation\nGradient-based learning algorithm\nIndex availability\nQuery has joins\nI/O configuration\nIndex parameters\nJoin ordering heuristics\nJoin pattern types\nJoin reorder strategies\nLayer types for neural networks\nLeaky ReLU: f(x) = max(αx, x) where α is typically 0.01\nLearning algorithm trait for feedback loop\nLight Gradient Boosting Machine (LightGBM-style)\nLightGBM-style gradient boosting\nLightGBM node\nLightGBM tree structure (leaf-wise growth)\nLinear: f(x) = x\nLinear model\nLinear regression model for cost estimation\nSimple linear trend detector\nML-based cost estimator using various algorithms\nMVS (Minimum Variance Sampling)\nMatch details\nPattern matching algorithm trait\nMaxout: f(x) = max(w1^T x + b1, w2^T x + b2, …)\nMemory allocation settings\nIndividual metric point\nMetric processor trait\nMetric time series\nMetric statistics\nPerformance metrics collector\nMetrics collection configuration\nMish: f(x) = x * tanh(softplus(x))\nModel metadata and performance\nML model statistics\nModel types available for cost estimation\nMulti-class classification\nNeural network layer\nNeural network model for cost estimation\nNo bootstrap\nNumerical feature threshold\nObjective functions for gradient boosting\nOblivious tree for CatBoost (symmetric tree)\nQuery optimization parameters\nOptimization recommendations\nOptimization rule with adaptive properties\nOptimization statistics\nParametric ReLU: f(x) = max(αx, x) where α is learned\nParallelism settings\nPattern characteristics\nPattern match result\nPattern matcher for workload analysis\nPattern analysis statistics\nPercentile distribution\nPerformance metrics for feedback\nProcessed metric\nQuery complexity metrics\nQuery features for ML estimation\nQuery signature for pattern matching\nQuery types\nRandom forest model for cost estimation\nRanking objective\nRectified Linear Unit: f(x) = max(0, x)\nRecommendation types\nRegression with absolute loss\nRegression with quantile loss\nRegression with squared loss\nReorder joins\nResource constraint\nResource feature requirements\nResource allocation parameters\nResource pattern characteristics\nResource types for constraints\nResource usage metrics\nAction for optimization rule\nCondition for optimization rule\nScaled Exponential Linear Unit: f(x) = λ * ELU(x, α)\nSelectivity threshold\nAdjust parallelism\nSigmoid: f(x) = 1 / (1 + e^(-x))\nSimilarity-based pattern matching algorithm\nSoftmax: f(x_i) = e^(x_i) / Σ(e^(x_j))\nSplit condition for XGBoost\nStacking with meta-learner\nStatistical anomaly detector\nSwish (SiLU): f(x) = x * sigmoid(βx)\nSystem configuration\nTable size threshold\nHyperbolic Tangent: f(x) = tanh(x)\nTemporal pattern types\nTime series data\nTime series data point\nTraining example for ML models\nTree node in decision tree\nDetected trend\nTrend analyzer for workload evolution\nTrend detection algorithm trait\nTrend directions\nTuning parameters\nAuto-tuning statistics\nTuning strategy trait\nVoting (for classification)\nWeak learner for boosting algorithms\nWeighted averaging\nWorkload baseline for anomaly detection\nWorkload metrics\nWorkload pattern definition\nWorkload pattern analyzer\nExtreme Gradient Boosting with advanced features\nXGBoost-style extreme gradient boosting\nXGBoost node\nXGBoost parameters\nXGBoost tree structure\nModel accuracy on test set\nRule actions\nActivation function\nCurrent best model\nActual value\nActual execution cost/time\nAdaBoost model\nAdaBoost model\nAdaptation cycles\nAdaptation parameters\nAdaptive query optimizer\nAffected queries\nNumber of aggregations\nMatching algorithms\nDetection algorithms\nL1 regularization parameter\nL1 regularization\nAnalyze workload patterns\nAnomalies detected\nAnomaly detector\nAnomaly type\nApplication information\nApplication count\nApplied rules\nApply the activation function to a single value\nApply activation function to a batch of vectors (matrix)\nApply softmax to a vector of values\nApply activation function to a vector of values\nAsync I/O settings\nAuto-adjust parallelism\nAuto-adjustments made\nAuto-create indexes\nIndex maintenance\nAuto-tuning system\nAverage\nAverage metrics\nAverage model accuracy\nAverage execution time\nAverage performance improvement\nAverage performance improvement\nAverage latency\nAverage resource usage\nBagging fraction\nBase estimator type\nHistorical baseline\nBatch size\nBenchmark activation functions for performance\nBest iteration (for early stopping)\nBest loss seen so far\nBias vector\nBoosted trees\nBoosting type\nBoosting ensemble\nBootstrap type\nBuffer pool size\nCaching parameters\nCalculate loss and record it in history\nCalculate loss and record in history\nCalculate loss and record in history\nCalculate estimator weight (alpha)\nCalculate gradients for current predictions\nCalculate gradients for current predictions\nCalculate weighted error for regression\nCategorical features handling\nCatBoost model\nCatBoost model\nQuery characteristics\nModel coefficients\nCollection interval\nFeature subsampling ratio\nColumn sample ratio\nQuery complexity metrics\nNumber of conditions in WHERE clause\nRule conditions\nMatch confidence (0.0-1.0)\nConfiguration\nCollection configuration\nConfiguration that was applied\nConfigurations tested\nConsider foreign keys\nExecution context\nCorrelation between columns\nCost model weights\nCount\nNumber of samples\nCover (sum of second order gradients)\nCPU affinity\nCPU allocation\nCPU intensity\nCPU time\nExpected CPU usage\nCurrent configuration\nCurrent system score\nCyclomatic complexity\nData distribution characteristics\nDecay factor for old data\nDefault degree of parallelism\nMissing value default direction\nGet default parameters for parameterized activation …\nTree depth\nTree depth\nCompute the derivative of the activation function\nCompute activation function derivatives for a batch\nRule description\nPattern description\nDescription\nConfiguration description\nMatch details\nDetect anomalies in workload\nDetect trends in time series\nDeviation magnitude\nDeviation measures\nTrend direction\nTrend duration\nDuration pattern\nEarly stopping rounds\nEarly stopping rounds\nEnable adaptive optimization\nEnable auto-tuning\nEnable ML-based cost estimation\nEnable workload pattern recognition\nEnsemble method\nError rate\nError rate\nGet ML-based cost estimation\nEstimation error for each iteration\nEstimator weights\nBase estimators (decision trees)\nBase estimators with their weights\nLearning rate (eta)\nValidation scores\nEvaluate configuration fitness\nCache eviction policy\nQuery execution history\nExecution time\nTime of execution\nExecution time threshold (multiple of standard deviation)\nExpected value\nExpected benefit\nExploration rate\nExpression complexity\nFeature name\nFeature index for split\nFeature index for split\nFeature fraction for each tree\nFeature importance scores\nFeature importance\nFeature index for split\nFeature indices used\nQuery features\nQuery features\nFeedback history\nPerformance feedback\nFinalize training by setting flags and calculating feature …\nFinalize training by setting flags and calculating feature …\nRandom forest model\nFrequency of occurrence\nQuery frequency threshold\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFunction call count\nGamma (minimum split loss)\nGradient boosting model\nReport generation timestamp\nGet system analytics report\nGet adaptive optimization recommendations\nGet recommended activation functions for different layer …\nGet auto-tuning recommendations\nGradient boosting model\nHash table memory\nHessian sum\nPattern ID\nImplementation effort\nIndex parameters\nIndex availability score\nInitialize early stopping state\nInitialize uniform sample weights\nInitialize training by setting up residuals and clearing …\nInitialize training with mean predictions\nInitialize training with mean predictions\nInitialize training with mean predictions\nEstimated input cardinality\nIntercept\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nI/O configuration\nI/O intensity\nExpected I/O operations\nI/O operations\nCheck if activation function is suitable for hidden layers\nCheck if activation function is suitable for output layer\nIs model trained\nIs model trained\nIs model trained\nIs model trained\nIs model trained\nIs model trained\nIs model trained\nIs model trained\nIs ensemble trained\nNumber of iterations\nNumber of joins\nJoin ordering heuristics\nJoin patterns\nL2 leaf regularization\nL2 regularization parameter\nL2 regularization\nRegularization parameters\nLast training timestamp\nLast update time\nNetwork layers\nLeaf value\nLeaf value\nLeaf values (2^depth values)\nLeaf weight\nLearn from feedback\nLearning algorithm\nLearning rate\nLearning rate for gradient descent\nLearning rate\nLearning rate\nLearning rate\nLearning rate for rule weights\nLeft child index\nLeft child\nLeft child\nLightGBM model\nLightGBM model\nLinear regression model\nTraining loss history\nPattern match accuracy\nMatch query against patterns\nPattern matcher\nMatching features\nMaximum depth\nMaximum depth of each tree\nMaximum depth\nMaximum tree depth\nMaximum model complexity\nMaximum parallelism\nMaximum\nMean absolute error\nMemory allocation\nMemory intensity\nMemory peak\nExpected memory usage\nMetadata\nProcessing metadata\nPerformance metrics\nCollected metrics\nPerformance metrics collector\nMetrics history\nMinimum child weight\nMinimum data per leaf\nMinimum samples for adaptation\nMinimum samples per leaf\nMinimum samples for ML model training\nMinimum\nML-based cost estimator\nModel metadata\nModel performance comparison\nModel retraining interval\nML model statistics\nEnsemble weights\nNumber of models trained\nNumber of estimators\nNumber of estimators\nNumber of estimators\nNumber of trees\nAlgorithm name\nAlgorithm name\nAlgorithm name\nAlgorithm name\nStrategy name\nProcessor name\nGet name of activation function\nRule name\nPattern name\nSeries name\nSeries name\nNesting depth\nNetwork bandwidth requirements\nNetwork bytes\nNeural network model\nCreate new advanced analytics system\nTree nodes\nTree nodes\nTree nodes\nNormalize weighted error to avoid division by zero\nNull density\nNumber of leaves\nNumber of leaves\nNUMA awareness\nObjective function\nOne-hot max size\nOptimal execution strategy\nQuery optimization parameters\nOptimization rules with success rates\nOptimization statistics\nOriginal metric\n50th percentile\n90th percentile\n95th percentile\n99th percentile\nParallelism settings\nTuning parameters\nBoosting parameters\nPatience counter\nPattern deviation threshold\nPattern ID\nPattern analysis statistics\nPattern recognition window size\nQuery patterns database\nPatterns identified\nPercentile distributions\nMeasured performance\nPerformance improvements\nData points\nData points\nPredict performance for configuration\nPrediction value (for leaf nodes)\nTotal predictions made\nPrefer smaller tables first\nRule priority\nPriority score\nProcess metric batch\nProcessed value\nMetric processors\nQuery cache size\nQuery frequency\nQuery hash\nTypical query types\nR-squared score\nRandom seed\nRandom seed\nRead buffer size\nRecommendation type\nRecommended optimizations\nRecord query execution for learning\nReset training state\nResource allocation parameters\nResource patterns\nResource requirements\nResource usage threshold\nResource usage\nResource utilization\nResult cache size\nRetention period\nRight child index\nRight child\nRight child\nRoot mean square error\nRoot node index\nRoot node index\nRoot node index\nDynamic rule weights\nRules applied\nCustomer satisfaction score\nTree score\nIndex selection threshold\nQuery selectivity\nSession information\nSeverity score\nCheck if training should stop\nStatistical significance\nSimilarity score\nData skewness\nSort memory\nSplit condition\nSplit features (one per level)\nSplit thresholds (one per level)\nStart advanced analytics system\nStatistics\nStandard deviation\nStandard deviations\nTuning strategies\nTrend strength\nQuery structure hash\nSubquery count\nSubsample ratio for stochastic gradient boosting\nSubsample ratio\nSuccess indicator\nSuccess indicator\nSuccess rate (0.0-1.0)\nSuccessful optimizations\nSuggest next configuration to try\nNumber of tables in query\nCommon table patterns\nTags\nTemporal patterns\nThreshold for split\nSplit threshold\nStatistical thresholds\nQuery throughput\nTime series data\nExecution timestamp\nTimestamp\nDetection timestamp\nTimestamp\nTimestamp\nTimestamp\nTrain a single iteration and return whether early stopping …\nTrain a single iteration\nTrain a single iteration and return whether early stopping …\nTrain a single iteration and return whether early stopping …\nTrain a single iteration and return whether to stop …\nTraining data\nTraining error\nTraining examples count\nTraining metrics\nTraining time\nTree structure\nDecision trees\nLeaf-wise growing trees\nOblivious decision trees\nTrend information\nTrend detection algorithms\nTrend analyzer\nTrend changes identified\nTuning parameters\nAuto-tuning sensitivity\nAuto-tuning statistics\nData uniformity\nUpdate predictions with new tree\nUpdate predictions with new tree\nUpdate predictions with new tree\nUpdate residuals based on weak learner predictions\nUpdate sample weights based on predictions\nUse statistics\nUser information\nValidate training data\nValidate training data\nValidate training data\nValidate training data\nValidate training data\nValidation metrics\nValue\nValue\nModel version\nConfiguration version\nPrediction weight/alpha\nTree weight\nTree weight\nTree weight\nWeights matrix\nCreate activation function with default parameters\nWorker thread count\nWorkload pattern analyzer\nWrite buffer size\nXGBoost model\nXGBoost model\nBuild knowledge graph from document\nCREATE statement for schema definition\nDELETE statement\nDROP statement\nCategorical encoding methods\nList entities in knowledge graph\nGeneric expression type\nExtract entities and relationships only\nFETCH clause for eager loading of related data\nFROM clause specifying data sources\nGeometry literals in various formats\nGraph path expressions for graph traversals\nGraph pattern for matching in FROM clauses\nGraphRAG statement for knowledge graph operations\nINSERT statement\nJOIN operations between different data models\nLIVE statement for real-time subscriptions\nML algorithms available for training\nMachine Learning function definitions\nNormalization methods for feature scaling\nORDER BY clause\nQuery knowledge graph with RAG\nFind reasoning paths between entities\nRELATE statement for creating graph relationships\nFields to select in a query\nSELECT statement for querying data\nFind similar entities\nSpatial filter for queries\nSpatial index configuration\nSpatial index types\nSpatial operators for geometric relationships\nRoot AST node for OrbitQL statements\nGet knowledge graph statistics\nStream triggers\nStreaming clause for real-time queries\nTime-series specific structures\nTransaction statement\nUPDATE statement\nWindow specification for streaming queries\nCommon Table Expression (CTE) clause\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdds a table to the FROM clause\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this statement modifies data\nAdds a LIMIT clause\nCreates a new empty SELECT statement\nReturns true if this statement requires a transaction\nAdds a WHERE condition\nAdaptive replacement cache\nAccess statistics for cached entries\nCache configuration settings\nCache health metrics\nCache key that uniquely identifies a query and its …\nCache statistics and metrics\nCache-aware query executor wrapper\nCached query result with metadata\nTypes of data changes that trigger invalidation\nDependency tracker for cache invalidation\nCache eviction policies\nCache invalidation event\nLeast Frequently Used\nLeast Recently Used\nMain query result cache with intelligent invalidation\nTrait for query executors to enable caching wrapper\nTime-based expiration\nAverage access frequency\nAdd dependency relationship\nOptional row/document IDs affected\nAnalyze query to determine table dependencies\nCached results\nMaps cache keys to tables they depend on\nCurrent cache version for optimistic invalidation\nWhen this result was cached\nType of change\nClear all cached results\nCache configuration\nContext hash (user, permissions, etc.)\nDefault TTL for cached results\nDependency tracking\nTables/collections this result depends on\nEnable compression for large results\nEnable statistics tracking\nEnable automatic cache warming\nEnsure there’s enough space in the cache\nNumber of cached entries\nEstimate the memory size of a query result\nEvent ID\nEvict entries based on configured policy\nEviction policy\nTotal entries evicted\nExecute query with caching\nWhen this result expires\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet cached result if available and valid\nGet cache health\nGet cache statistics\nGet all cache keys that depend on a table\nGet cache health information\nGet cache statistics\nNumber of times accessed\nHit ratio (0.0 to 1.0)\nTotal cache hits\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvalidate cache entries based on data changes\nSelective invalidation based on query analysis\nTotal invalidations\nLast access time\nMaximum number of cached queries\nMaximum memory usage for cache in MB\nTotal cache misses\nNormalize query string for consistent caching\nNotify cache of data changes\nParameter hash\nStore result in cache\nNormalized query string\nQuery text for debugging\nRemove all dependencies for a cache key\nRemove entry from cache (internal helper)\nThe cached query result\nSize in bytes (approximate)\nCurrent cache size in bytes\nSmart invalidation based on query analysis\nCache statistics\nAccess statistics\nTable/collection that changed\nMaps table names to cache keys that depend on them\nTimestamp of change\nCache version for invalidation tracking\nWarm cache with frequently accessed queries\nCached execution plan with metadata\nCost-based query planner that generates optimal execution …\nAlternative execution plan with cost information\nConfiguration for the cost-based planner\nCache timeout in seconds\nConfiguration\nCost model for cost estimation\nEnable join enumeration optimization\nEnable plan caching\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate aggregation alternatives (hash vs sort)\nGenerate multiple alternative execution plans\nGenerate basic plan for non-SELECT statements\nGenerate hash-based aggregation plan\nGenerate index scan plan\nGenerate index scan plans\nGenerate different join order alternatives\nGenerate join plan for a specific join order\nGenerate optimal execution plan for a statement\nGenerate different scan alternatives (sequential, index, …\nGenerate sequential scan plan\nGenerate sort-based aggregation plan\nGenerate sort alternatives\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum number of alternative plans to generate\nMaximum cache size\nCreate a new cost-based query planner\nRule-based optimizer for initial optimization\nPlan cache to reuse previous computations\nSelect the best plan from alternatives based on cost\nStatistics manager for table and index statistics\nCreate planner with custom configuration\nCardinality estimation for different operations\nCost model implementation\nCost model configuration parameters\nComprehensive cost breakdown for query operations\nCalculate cost for an aggregation operation\nCalculate cost for an index scan operation\nCalculate cost for a join operation\nCalculate cost for network operations (distributed queries)\nCalculate cost for a parallel operation\nCalculate cost for a table scan operation\nCalculate cost for a sort operation\nClear cost cache\nCombine two costs\nConfidence in the estimate (0.0 to 1.0)\nConfiguration parameters\nCached cost calculations\nCPU processing cost (in arbitrary units)\nCPU cost per index tuple processed\nCPU cost per operator invocation\nCPU cost per tuple processed\nEstimate cost for FROM clause\nEstimate query cost for a complete statement\nEstimate cost for a SELECT statement\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet current configuration\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nI/O cost for disk operations\nJIT compilation threshold\nJIT optimization cost\nMemory usage cost\nMemory cost per MB allocated\nNetwork transfer cost for distributed operations\nNetwork cost per byte transferred\nNetwork latency per round trip in ms\nCreate a new empty cost\nCreate a new cost model with default configuration\nPage size in bytes\nParallel setup cost\nParallel worker cost multiplier\nRandom page cost (disk seeks)\nEstimated number of rows\nScale cost by a factor (for cardinality adjustments)\nSequential page cost (sequential reads)\nEstimate if JIT compilation would be beneficial\nCalculate total cost across all dimensions\nTotal estimated execution time in milliseconds\nUpdate configuration\nWidth of each row in bytes\nCreate a cost model with custom configuration\nWork memory size in MB\nInformation about an actor node for distributed execution\nAggregate results\nBroadcast data to all nodes\nBroadcast smaller relation to all nodes\nCluster topology information\nGeneral compute node\nSimple concatenation of results\nCoordinator node\nData transfer plan for moving data between nodes\nCost model for distributed operations\nDistributed execution context\nDistributed execution plan\nDistributed execution plan node\nDistributed query executor\nDistributed query planner\nDocument storage and processing node\nContains the error value\nData exchange between nodes\nData exchange types between nodes\nState of a distributed execution\nExecution status\nGather data from multiple nodes to one\nGraph processing node\nHash-based partitioning\nHash partition both relations on join keys\nJoin results\nJoin strategies for distributed execution\nExecute on local coordinator\nKeep join local (no distribution)\nMerge sorted results\nStrategy for merging parallel results\nCapabilities of a node\nTypes of nodes in the distributed system\nContains the success value\nParallel execution across multiple nodes\nPartition range definition\nPartitioning strategies for data distribution\nPoint-to-point data transfer\nRandom partitioning\nRange-based partitioning\nRedistribute data based on partitioning\nExecute on a remote actor node\nResource limits for distributed execution\nResource requirements for execution\nRound-robin partitioning\nTime-series processing node\nPriority levels for data transfers\nUnion with deduplication\nActor nodes available for execution\nCalculate data locality score (higher is better)\nCalculate resource requirements for distributed plan\nCancel a running execution\nChoose optimal join strategy based on data size and …\nCreate distributed execution plan from a local execution …\nData locality hints for optimization\nEstimate cost of distributed execution\nExecute distributed query plan\nExecute data exchange between actors\nExecute a single distributed plan node\nExecute query on remote actor\nUnique execution ID\nExtract actor IDs involved in the plan\nExtract local plan from distributed plan (fallback)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet status of active executions\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMerge results from parallel execution\nOptimize data placement to minimize network traffic\nParallelize a local execution plan\nPlan a distributed query - placeholder implementation\nResource constraints\nExecution timeout\nUpdate cluster topology information\nNode is healthy and active\nBroadcast to all nodes\nRe-execute from checkpoints\nCluster configuration\nCluster events\nCluster management\nCluster state manager\nConnection statistics\nConnection status\nConsistency levels for distributed operations\nCoordinator node (query planning and coordination)\nCustom partitioning\nData destination for fragments\nData exchange operator for inter-node communication\nData node (storage and retrieval)\nReplicate data from other nodes\nData source for fragments\nDistributed execution errors\nDistributed execution plan\nDistributed query execution coordinator\nDistributed optimizer\nDistributed query planner\nDistributed execution statistics\nError notification\nEventually consistent (best effort)\nTypes of data exchange\nQuery execution request\nExecution fragment (unit of distributed work)\nExecution priority levels\nNode is failed or unreachable\nFailure detection system\nFault tolerance manager\nRemote fragment result\nAnother fragment\nFragmentation strategy trait\nGather to single node\nHash-based partitioning\nHash-based fragmentation strategy\nHash partition\nHealth monitoring for cluster nodes\nHeartbeat message\nHybrid node (multiple roles)\nLeader changed\nLeader election manager\nNode is in maintenance mode\nManual intervention required\nMessage handler trait\nNetwork configuration\nNetwork connection representation\nNetwork communication manager\nNetwork message types\nNode failed\nNode information in the cluster\nNode joined cluster\nNode left cluster\nNode resource information\nNode roles in the cluster\nNode status\nData partitioning strategies\nPoint-to-point transfer\nQuery fragmentation engine\nRestart failed queries on other nodes\nQuorum-based consistency\nRange-based partitioning\nRange partition\nPartition rebalancing completed\nPartition rebalancing started\nRecovery coordination\nRecovery operation\nRecovery status\nRecovery strategies\nReplica placement strategies\nReplication manager\nResource requirements for execution\nResource scheduler for distributed execution\nFinal result\nQuery result data\nRound-robin partitioning\nScheduling strategies\nNode is starting up\nNode is shutting down\nExternal storage\nStorage location\nStrong consistency (all nodes must acknowledge)\nLocal table\nWorker node (query execution)\nActive recovery operations\nNode address\nAverage latency\nAverage query latency\nBuffer size for network operations\nBytes received\nBytes sent\nCluster state manager\nCluster name\nCluster configuration\nConfiguration\nMonitoring configuration\nCluster configuration\nNetwork configuration\nConfiguration\nConnection timeout\nConnection pool\nConsistency level\nCPU cores available\nCPU cores needed\nCurrent CPU utilization (0.0-1.0)\nData transferred between nodes\nExecution dependencies\nDisk space available (MB)\nDisk space needed (MB)\nElection in progress\nMessage compression\nEncryption enabled\nEnable fault tolerance\nEnable load balancing\nEstimate fragmentation cost\nTotal estimated cost\nEstimated data volume\nEstimated execution time\nEvent broadcaster\nExchange ID\nExchange type\nData exchange operators\nExecute distributed query\nExecute distributed execution plan\nFailed node ID\nFailure callbacks\nFailure detection\nFault tolerance manager\nFragment ID\nFragment query into distributed execution plan\nQuery fragmentation engine\nExecution fragments\nTotal fragments executed\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet cluster statistics\nHandle incoming message\nNode health monitor\nHeartbeat interval\nInput data sources\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nJoin cluster\nLast activity timestamp\nLast heartbeat\nLeader election manager\nCurrent leader node ID\nLeader lease expiration\nLocal node information\nLocal node information\nMax concurrent connections\nMaximum nodes in cluster\nMemory available (MB)\nMemory needed (MB)\nCurrent memory utilization (0.0-1.0)\nMessage handlers\nMessages received\nMessages sent\nNode metadata\nActive monitoring tasks\nStrategy name\nHandler name\nNetwork communication layer\nNetwork bandwidth (Mbps)\nNetwork bandwidth needed (Mbps)\nNetwork timeout\nCreate new distributed executor\nNode failures handled\nRemote node ID\nUnique node ID\nNode timeout threshold\nActive nodes in cluster\nAvailable nodes\nOperation ID\nExecution plan optimizer\nOutput destinations\nPartitioning key (if applicable)\nData partitioning strategy\nReplica placement strategy\nExecution priority\nTotal queries executed\nFragment query\nQuery ID\nDistributed query planner\nRecovery coordinator\nReplication factor\nReplication factor\nReplication manager\nResource requirements\nAvailable resources\nNode role\nResource scheduler\nMessage sender\nSource fragment\nStart distributed executor\nStart heartbeat mechanism\nStart time\nExecution statistics\nConnection statistics\nConnection status\nNode status\nProgress status\nFragmentation strategies\nScheduling strategy\nRecovery strategy\nSuccessful recoveries\nSuspected failures\nTarget fragment\nTarget node for execution\nTopological sort of fragments based on dependencies\nUpdate execution statistics\nQuery execution errors\nGraph edge representation\nOrbitQL query executor\nQuery execution metadata\nQuery execution result\nTime series data point\nCheck resource limits\nIn-memory storage for demonstration (replace with real …\nExecute a query execution plan\nExecute aggregation\nExecute filter operation\nExecute graph traversal\nExecute join operation\nExecute limit operation\nExecute a plan node\nExecute sort operation\nExecute table scan\nExecute time series query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitialize with sample data for demonstration\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nValidate execution permissions\nColumn access pattern tracking\nColumn reference in query patterns\nIndex impact analysis\nIndex recommendation with detailed analysis\nIndex recommendation engine that analyzes query patterns …\nComprehensive index report\nJoin condition in query patterns\nJoin pattern tracking\nPerformance improvement estimation\nRepresents a query pattern with usage statistics\nQuery pattern analyzer that tracks query usage patterns\nSummary of query patterns\nPerformance statistics for query patterns\nConfiguration for index recommendation system\nRecommended index specification\nRedundant index detection result\nGroup of redundant indexes\nRisk level for index recommendations\nUnused index information\nNumber of queries that would benefit\nAnalysis window in days\nAnalyze existing indexes for redundancy and unused indexes\nAverage execution time in milliseconds\nColumn access patterns\nRecommendation confidence (0.0 to 1.0)\nConfiguration\nCost model for impact estimation\nExpected CPU savings\nCreation timestamp\nExpected performance improvement\nFirst seen timestamp\nUsage frequency\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate comprehensive index report\nGenerate index recommendations based on query patterns\nGet column access patterns for analysis\nGet column access pattern statistics\nGet join patterns for analysis\nGet join pattern statistics\nColumns used in GROUP BY\nRecommendation ID\nImpact analysis\nIndex selector for current state analysis\nRecommended index\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExpected reduction in I/O operations\nJoin patterns\nJoin conditions\nLast seen timestamp\nMaintenance cost increase\nMaximum index overhead tolerance (as percentage of table …\nMaximum number of recommendations to generate\nMemory usage increase\nMinimum performance improvement threshold (as percentage)\nMinimum query frequency to consider for indexing\nMinimum table size to consider for indexing (rows)\nCreate a new index recommendation engine\nColumns used in ORDER BY\nPattern hash for identification\nPerformance characteristics\nPriority score (higher = more important)\nQuery pattern analyzer\nTracked query patterns\nNormalized query template\nTotal storage that could be reclaimed\nRecord a query execution for pattern analysis\nRedundant indexes found\nRisk assessment\nExpected query speedup factor (e.g., 3.0 = 3x faster)\nStatistics manager\nStorage overhead in bytes\nSupporting query patterns\nTarget table\nTables accessed\nExpected reduction in execution time (milliseconds)\nPotentially unused indexes\nUpdate column access patterns based on query analysis\nUpdate join patterns based on query analysis\nColumns used in WHERE clauses\nCreate engine with custom configuration\nWrite performance impact (percentage degradation)\nB-Tree index for range queries\nBitmap index for low-cardinality data\nCovering index that includes non-key columns\nExpression index on computed values\nHash index for equality lookups\nIndex selection recommendation\nCost estimator specifically for index operations\nMetadata for an available index\nPerformance metrics for index usage\nIndex selection engine for optimal index usage\nTypes of indexes supported\nUsage statistics for an index\nIndex usage tracking\nPartial index with filter condition\nVector index for similarity search\nVector index algorithms\nAdd an index to the available indexes\nAvailable indexes metadata\nAverage I/O operations per lookup\nAverage lookup time in microseconds\nAverage selectivity achieved\nCache hit rate for index pages\nCheck how well an index applies to JOIN conditions\nCheck how well an index applies to ORDER BY clauses\nCheck how well an index applies to WHERE clause conditions\nIndexed columns\nConfidence in this recommendation (0.0 to 1.0)\nNumber of times index was considered but not used\nCost estimator for index operations\nCreation timestamp\nEstimate the cost of using an index for a query\nEstimated cost of using this index\nEvaluate if an index is applicable for a query\nPartial index condition (if any)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a human-readable reason for index selection\nGet index usage statistics\nGet table indexes for analysis\nGet table statistics from the statistics manager\nCheck if statistics manager is available\nRecommended index\nUnique identifier\nIndex type\nBase cost factors for different index types\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether index is unique\nLast maintenance timestamp\nLast used timestamp\nIndex maintenance overhead\nCreate a new index selector\nCreate a new index cost estimator\nOptimize the combination of selected indexes\nPerformance metrics\nQuery patterns that used specific indexes\nReason for selecting this index\nRecord index usage statistics\nRemove an index from available indexes\nSelect the best indexes for a query\nSelect indexes for a specific table\nIndex size in bytes\nStatistics manager\nTable this index belongs to\nTotal execution time saved (estimated)\nTotal rows scanned using this index\nNumber of times index was used\nUsage statistics per index\nIndex usage tracking\nLexer errors\nOrbitQL lexer/tokenizer\nA token with its type, value, and position\nToken types in OrbitQL\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProcess an identifier or keyword\nProcess less-than operator and its variants\nProcess a multi-line comment (/* */)\nProcess a number (integer or float)\nProcess a parameter ($ or @ prefixed)\nProcess a single-line comment (–)\nProcess a string literal\nTokenize an OrbitQL query string\nColumn/field information\nCompletion context types\nDocument representation\nFunction information\nIndex information\nLSP Configuration\nOrbitQL Language Server\nParameter information\nParsed query with position information\nSchema information for autocomplete and validation\nTable/collection information\nTable types\nConfiguration\nInitialize default schema with common OrbitQL keywords and …\nDiagnostic refresh delay in milliseconds\nDocument storage for open files\nEnable autocomplete\nEnable diagnostics\nEnable formatting\nEnable hover information\nEnable signature help\nExtract table dependencies from a query\nExtract potential OrbitQL queries from document content\nExtract table name from column reference (e.g., “…\nFormat OrbitQL code\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAvailable functions\nGenerate completion items for a position\nGenerate diagnostics for a document\nGenerate hover information for a position\nGet completion context at a specific position\nGet general completion suggestions\nGet word at specific position\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAvailable keywords\nMaximum number of completion items\nParse document and extract queries\nSchema information for autocomplete\nCreate and start the OrbitQL Language Server\nAvailable tables/collections\nUpdate schema information\nConstant folding optimization\nCross-model join optimization\nDocument filter pushdown optimization\nDocument collection statistics\nGraph collection statistics for optimization\nGraph traversal optimization\nIndex selection optimization\nJoin reordering optimization\nCost model configuration for multi-model operations\nMulti-model query cost estimation\nStatistics for different data models\nQuery optimization errors\nOptimization rule trait\nConfiguration for the optimizer\nOptimizer statistics\nPredicate pushdown optimization\nProjection pushdown optimization\nEnhanced query optimizer with multi-model cost-based …\nTime-series query optimization\nTime-series statistics\nAdd a custom optimization rule\nAdvanced cost model for detailed estimation\nAnalyze expression costs\nAnalyze FROM clause costs\nAnalyze JOIN costs\nAnalyze SELECT statement costs\nAnalyze statement components and accumulate costs\nEnable cost-based optimization\nCost model for different operation types\nCross-model join cost\nMultiplier for cross-model join operations\nDocument scanning cost\nCost per document scan\nDocument collection statistics\nEstimate detailed query cost using advanced cost model\nEstimate cost for a multi-model query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate different optimization alternatives\nGet current multi-model statistics\nGet optimization statistics\nGraph traversal cost\nGraph collection statistics\nCost per graph hop traversal\nCheck if advanced cost model is enabled\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum optimization iterations\nMemory cost per MB used\nNetwork I/O cost for distributed queries\nCost per network round-trip\nOptimize a statement by applying all rules iteratively\nOptimize query with cost-based approach\nTraditional optimization rules\nBase SQL query cost\nMulti-model statistics for cost estimation\nStatistics manager for collecting and maintaining …\nCost per time-series data point aggregation\nTime-series aggregation cost\nTime-series statistics\nUpdate cost model parameters\nUpdate statistics for optimization\nCreate optimizer with existing statistics manager\nAdaptive scheduling\nAdaptive scheduler state\nAggregation strategies for parallel execution\nBroadcast to all workers\nCustom partitioning\nDefault queue capacity for work distribution\nDefault number of worker threads\nData flow between operators\nContains the error value\nExchange operator for data redistribution\nTypes of data exchange\nOverall execution statistics\nHash-based aggregation\nHash-based partitioning\nHybrid approach\nLoad-based assignment\nNUMA-aware scheduling\nContains the success value\nParallel aggregation operator\nConfiguration for parallel execution\nParallel execution errors\nParallel execution plan\nParallel execution engine\nParallel hash join operator\nParallel operator types\nParallel scan operator\nPriority-based scheduling\nRange-based partitioning\nRound-robin assignment\nRound-robin distribution\nScheduling decision record\nScheduling strategies\nSort-based aggregation\nSystem load metrics\nTask to be executed by workers\nTask metadata\nTask performance metrics\nTask priority levels\nTask result\nThread pool for parallel execution\nWork scheduler for task distribution\nWorker thread\nWorker load information\nWorker statistics\nEnable adaptive scheduling\nAdaptive scheduler state\nAggregate functions\nAverage task latency\nAverage task duration\nBatch size for parallel processing\nBuffer management\nBuild side parallelism\nCommunication channels\nChoose worker for task assignment\nJoin condition\nConfiguration\nConfiguration\nConfiguration\nCPU intensity (0.0 to 1.0)\nCPU utilization\nCPU utilization during execution\nOverall CPU utilization\nCreate build phase tasks for join\nCreate parallel execution plan from query\nCreate probe phase tasks for join\nCreation timestamp\nData flow between operators\nScheduling decisions\nDependencies on other tasks\nExecution duration\nEnable NUMA-aware scheduling\nEnable work stealing between threads\nEstimated execution time\nExchange data between workers\nExchange operator for data redistribution\nExchange type\nExchange type\nExecute hash-based aggregation\nExecute parallel aggregation\nExecute parallel join\nSubmit a parallel query for execution\nExecute parallel scan\nExecute parallel plan\nExecute sort-based aggregation\nExecute tasks in parallel\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTask function\nGet execution statistics\nGroup by expressions\nThread handles\nWorker ID\nTask ID\nIdle time\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nI/O intensity (0.0 to 1.0)\nI/O utilization\nJoin type\nLast update timestamp\nMaximum queue size per worker\nMemory requirement estimate\nMemory usage\nMemory utilization\nTask metadata\nNetwork utilization\nCreate a new parallel executor\nCreate a new thread pool\nCreate a new work scheduler\nCreate a new exchange operator\nParallel operators\nReference to other queues for work stealing\nParallelism degree\nParallelism degree\nParallelism degree for operators\nOverall parallelism degree\nPartition function\nMemory peak usage\nHistorical performance data\nScan predicates\nPriority level\nProbe side parallelism\nProjection columns\nWork queue\nCurrent queue length\nWork queues for each worker\nDecision rationale\nSchedule a task to an appropriate worker\nWork scheduler\nTable schema\nShutdown the executor\nShutdown the thread pool\nShutdown flag\nSource operator index\nRuntime statistics\nWorker statistics\nScheduling strategy\nAggregation strategy\nSubmit a task to the thread pool\nCurrent system load\nTarget operator index\nTask ID\nTask queue\nTimeout for task execution\nTotal tasks completed\nTotal tasks executed\nTotal tasks failed\nTasks given to other workers\nTasks stolen from other workers\nTotal tasks submitted\nThread pool for parallel execution\nThread pool utilization\nTimestamp\nDecision timestamp\nTotal execution time\nTotal processing time\nTry to steal work from other workers\nCreate executor with custom configuration\nSet exchange type and partition function\nCondition variable for work notification\nWork stealing events\nWorker ID\nAssigned worker ID\nWorker load information\nWorker thread main loop\nNumber of worker threads\nWorker threads\nParser errors\nOrbitQL parser\nAdvance to next token and return the previous one\nExpect a specific token type\nExpect an identifier token\nExpect an identifier token, allowing certain keywords to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if we’re at the end of tokens\nCheck if a string is a reserved keyword\nCheck if current token matches any of the given types\nParse a list of tokens into a statement\nParse AND expression\nParse CASE expression\nParse comparison expression\nParse CREATE statement\nParse DELETE statement\nParse DROP statement\nParse equality expression\nParse expressions\nParse expression list (comma-separated)\nParse factor expression (multiplication/division)\nParse FETCH list\nParse a single FROM clause\nParse FROM clauses\nParse INSERT statement\nParse JOIN clause\nParse LIVE statement\nParse OR expression\nParse ORDER BY clause\nParse ORDER BY list\nParse primary expression\nParse RELATE statement\nParse SELECT statement\nParse a single SELECT field\nParse SELECT field list\nParse SELECT statement with CTE support\nParse a single statement\nParse term expression (addition/subtraction)\nParse transaction statement\nParse unary expression\nParse UPDATE statement\nParse a WITH clause (CTE)\nPeek at current token\nPeek ahead by n tokens\nGet previous token\nAggregate expression in execution plan\nColumn statistics\nCost estimation statistics\nComplete execution plan\nIndex statistics\nExecution plan node types\nQuery planning errors\nOrbitQL query planner\nSort expression in execution plan\nTable statistics for cost estimation\nEstimate the cost and cardinality of a plan\nExtract aggregate function from expression\nExtract aggregate expressions from SELECT fields\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet current cost statistics\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate an execution plan from an optimized AST\nPlan DELETE statement\nPlan a FROM clause\nPlan INSERT statement\nPlan a SELECT statement\nPlan UPDATE statement\nUpdate cost statistics\nAction types\nActive alert\nAlert condition\nAlert manager\nAlert operators\nAlert rule\nAlert severity levels\nAlert status\nAlerting configuration\nApplication settings\nAssertion types\nAt-rest encryption\nAudit configuration\nAudit events\nAudit storage\nAudit storage types\nAuthentication methods\nAuthentication configuration\nAuthorization configuration\nAuthorization models\nBackend server configuration\nCORS configuration\nCache configuration\nCache types\nNotification channel types\nComparison operators\nComponent readiness\nComponent status\nConfiguration validator\nCookie configuration\nDashboard definition\nDashboard manager\nDashboard panel\nDatabase configuration\nDeployment configuration\nProduction deployment error types\nDeployment metadata\nDeployment report\nEncryption configuration\nEnvironment definition\nEnvironment manager\nEnvironment status\nEnvironment types\nExpected result\nHealth check configuration\nHealth check configuration\nHealth check types\nHealth checker\nHealth status\nIn-transit encryption\nInfrastructure configuration\nIntegration test case\nIntegration test configuration\nIntegration test result\nIntegration test suite\nIntegration test suite\nJWT configuration\nKey backup configuration\nKey management configuration\nKey store types\nLoad balancer configuration\nLoad balancing algorithms\nLoad patterns\nLoad step\nLoad test action\nLoad test configuration\nLoad test scenario\nLog aggregator\nLog entry\nLog formats\nLog levels\nLog output destinations\nLog rotation configuration\nLogging configuration\nMetric point\nMetric series\nMetrics collector\nMetrics configuration\nMetrics export configuration\nMetrics export types\nMonitoring configuration\nMonitoring metrics summary\nMonitoring system\nNetwork configuration\nNotification channels\nOAuth configuration\nOverall health status\nPanel position\nPanel size\nPanel types\nPerformance test configuration\nPerformance thresholds\nPermission definition\nProduction deployment coordinator\nRamp pattern\nRate limit configuration\nReadiness assessment\nReadiness status\nResource limits\nResponse time metrics\nResult types\nRole definition\nLog rotation strategies\nSSL modes\nSame site policies\nSecurity configuration\nSession configuration\nSession storage types\nSpike pattern\nStep pattern\nStorage configuration\nStorage types\nStress test scenario\nStress testing framework\nSuccess criteria\nTLS configuration\nTest action\nTest action types\nTest assertion\nTest error\nTest metrics\nTest result\nTest runner\nTest runner status\nTest status\nTest summary\nTesting configuration\nTracing configuration\nUnit test configuration\nValidation criteria\nValidation rule\nValidation rule types\nAction type\nAction type\nActions allowed\nActions\nActions\nActive alerts\nServer address\nAlert manager\nAlerting configuration\nLoad balancing algorithm\nAlgorithm\nAlgorithm\nAllowed headers\nAllowed methods\nAllowed origins\nAllowed values\nApplication settings\nAssertion type\nAssertions\nEncryption at rest\nAudience\nAudit settings\nAuthentication settings\nAuthorization URL\nAuthorization settings\nAverage response time\nAverage response time\nBackend servers\nBackup settings\nBuild number\nBurst size\nCA certificate path\nCache settings\nCache type\nCertificate path\nChannel type\nNotification channels\nNotification channels\nChannels to notify\nCheck name\nCheck type\nHealth check configurations\nCipher suites\nClient ID\nClient secret\nGit commit hash\nComponent name\nComponent statuses\nComponent readiness\nCondition\nDeployment configuration\nCollection configuration\nConfiguration\nConfiguration\nConfiguration\nConfiguration\nConfiguration\nConfiguration\nConfiguration validator\nConnection pool size\nConnection timeout\nCookie settings\nCORS settings\nCount\nCoverage threshold\nCPU limit (cores)\nCPU usage\nValidation criteria\nCurrent environment\nCurrent scenario\nCurrent value\nCustom validator\nDashboard manager\nAvailable dashboards\nDatabase settings\nDatabase number\nDatabase setup\nDeployment timestamp\nDeployed by\nDeployment metadata\nRole description\nPermission description\nDescription\nDescription\nDescription\nDescription\nDescription\nDetails\nDetails\nDisk limit (MB)\nDisk usage\nDomain\nTest duration\nTest duration\nDuration\nEnable encryption\nEnable backup\nEnable auditing\nEnable metrics\nEnable tracing\nEnable alerting\nEnabled\nEncryption settings\nEnd time\nEnd time\nHealth check endpoint\nMetrics endpoint\nTrace endpoint\nEnvironment type\nEnvironment type\nTest environment\nEnvironment information\nEnvironment manager\nAvailable environments\nError message\nError rate\nError type\nErrors\nAudit events\nExpected value\nExpected result\nExpected value\nExpiration time\nExport settings\nExport type\nExternal services\nFailed requests\nFeature flags\nFields\nFile descriptor limit\nLog format\nBackup frequency\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate deployment report\nReport generation time\nHealth check settings\nHealth checker\nHealth status\nHealth status\nHealthy threshold\nHost address\nHost\nHTTP only\nAlert ID\nRunner ID\nEncryption in transit\nInfrastructure settings\nInherited roles\nInitialize production deployment system\nInitialize health checks\nIntegration test suite\nIntegration test settings\nIntegration tests passed\nCheck interval\nCollection interval\nInterval\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIssuer\nJWT settings\nKey management\nKey path\nKey size\nLast check time\nLast health check\nLast updated\nLog level\nLevel\nLoad balancer settings\nLoad pattern\nLoad test settings\nBackup location\nLog aggregator\nLog level\nLogging configuration\nLog entries\nMaximum value\nMax age\nMaximum CPU usage\nMaximum error rate\nMaximum acceptable error rate\nMax files to keep\nMax idle connections\nMaximum memory usage\nMaximum response time\nMaximum acceptable response time\nMax file size\nMemory limit (MB)\nMemory usage\nMessage\nError message\nDeployment metadata\nMetadata\nAuthentication method\nMetric name\nCollected metrics\nMetrics collection\nMetrics\nMetrics collector\nMinimum value\nMinimum throughput\nMinimum acceptable throughput\nAuthorization model\nMonitoring settings\nMonitoring metrics\nMonitoring system\nApplication name\nCookie name\nRole name\nPermission name\nRule name\nChannel name\nScenario name\nEnvironment name\nSeries name\nDashboard name\nPanel name\nScenario name\nSuite name\nTest name\nCheck name\nRule name\nNetwork settings\nNetwork bandwidth limit (Mbps)\nNetwork throughput\nCreate new production deployment system\nOAuth settings\nOperator\nOperator\nOutput destinations\nOverall readiness status\nP50 response time\nP90 response time\nP95 response time\nP95 response time\nP99 response time\nP99 response time\nPanel type\nPanels\nParallel execution\nParameters\nParameters\nPassword\nPath\nPattern\nPeak CPU usage\nPeak memory usage\nPerformance test settings\nPerformance tests passed\nPermission definitions\nPermissions\nData points\nConnection pool size\nPool size\nPort\nPort\nPort\nPosition\nPrerequisites\nQuery\nQuery timeout\nQuery timeout\nRamp-up time\nRate limiting\nReadiness assessment\nRecommendations\nRefresh interval\nRelease notes\nRequest rate\nRequest timeout\nRequests per second\nResource pattern\nResource limits\nResource limits\nResponse time\nResponse times\nResult type\nResults storage\nResults\nRetention period\nRetention period\nRole definitions\nLog rotation\nKey rotation interval\nRule name\nRule type\nAlert rules\nValidation rules\nAlert rules\nRun deployment tests\nRun integration tests\nRun performance tests\nRun stress tests\nRun unit tests\nTest runners\nSame site policy\nSampling rate\nTest scenarios\nTest scenarios\nScopes\nSecret key\nSecure flag\nSecurity settings\nService name\nSession settings\nConfiguration settings\nSetup actions\nSetup deployment environment\nSeverity\nSize\nSource\nSSL mode\nStart monitoring system\nStarted at\nStart time\nStart time\nStart time\nStatus\nStatus\nStatus\nStatus\nStatus\nStatus\nOverall status\nStatus\nHealth status cache\nStorage settings\nStorage type\nStorage location\nStorage type\nStorage type\nKey store type\nRotation strategy\nStress testing framework\nStress tests passed\nSuccess criteria\nSuccessful requests\nSuite name\nTags\nTarget\nTarget path\nTeardown actions\nTest case name\nTest cases\nTest data\nTest environment\nTest name\nTest suites\nTest summary\nTesting settings\nThink time\nThread pool size\nThreshold value\nThreshold value\nPerformance thresholds\nThroughput (requests per second)\nConnection timeout\nTimeout\nSession timeout\nTest timeout\nTest timeout\nTimeout\nTimeout\nTimestamp\nTimestamp\nTimestamp\nTLS configuration\nEnable TLS\nTLS version\nToken URL\nTolerance\nTotal requests\nTotal test duration\nTracing configuration\nUnhealthy threshold\nUnit test settings\nUnit tests passed\nDatabase URL\nValidate deployment configuration\nValue\nCertificate validation\nVersion\nVirtual users\nWarmup duration\nWeight\nWeight (percentage)\nWindow duration\nTime window\nActor-specific resource usage\nBottleneck detection during execution\nTypes of performance bottlenecks\nCPU-bound operation\nConfiguration tuning\nCross-model join inefficiency\nData skew in distributed operations\nData transfer information for distributed queries\nDisk I/O bottleneck\nDisk I/O statistics\nDistributed execution optimizations\nDistributed execution profiling information\nIndividual execution phase timing and details\nOverall execution statistics\nHardware recommendations\nIndex recommendations\nMissing or suboptimal indexes\nIndex usage information\nJoin strategy decision information\nMemory exhaustion or inefficient usage\nMemory usage snapshot at a point in time\nMulti-model specific optimizations\nNetwork latency or bandwidth\nNetwork I/O statistics\nOptimization information and decisions\nOptimization suggestions\nPerformance bottleneck identification\nPhase-specific execution details\nActive profiling session\nProfiler configuration\nInefficient query plan\nComprehensive query execution profile\nMain query profiler\nQuery rewriting suggestions\nResource tracking during execution\nResource usage tracking\nSchema design improvements\nCategories of optimization suggestions\nLock contention or synchronization\nSpecific actions to take\nActive profiling sessions\nActor identifier\nActor resource usage (for distributed queries)\nWhich part of the query is affected\nAlternative strategies considered\nOptimization rules that were applied\nAverage network latency\nAverage read latency\nAverage write latency\nBottleneck actors\nBottleneck type\nPerformance bottlenecks identified\nBuild resource usage summary from tracker\nBytes transferred\nTotal bytes processed\nTotal bytes read\nTotal bytes received\nTotal bytes sent\nTotal bytes written\nCache hit ratio\nMemory category (heap, stack, cache, etc.)\nSuggestion category\nChosen join strategy\nSQL/OrbitQL code examples if applicable\nCompression used\nProfiling configuration\nNumber of connections opened\nOptimization rules that were considered but not applied\nCost improvement percentage\nCPU time used\nCPU time used by this actor\nCPU usage per core\nData locality score (0.0 to 1.0)\nNetwork data transfer breakdown\nPhase description\nDescription of the bottleneck\nDetailed description\nDestination actor\nDetailed timing for each operation\nPhase-specific details\nDetect performance bottlenecks\nDisk I/O statistics\nDistributed execution details\nPhase duration\nTransfer duration\nTransfer efficiency (actual vs theoretical max)\nWhether profiling is enabled\nMark the end of the current execution phase\nEstimated cost of using this index\nEstimated cost of chosen strategy\nEstimated performance improvement\nGenerate an EXPLAIN ANALYZE report\nFinish profiling and generate comprehensive profile\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate optimization suggestions\nGet current memory usage in MB\nIndex name\nIndex usage analysis\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nI/O operations performed\nCheck if profiling is enabled\nJoin strategy decisions\nLeft table/collection\nLoad balancing effectiveness\nMaximum profile retention time\nMemory used in MB\nMemory used by this actor\nMemory sampling interval\nMemory usage over time\nPhase name (e.g., “Parsing”, “Planning”, “…\nNetwork bytes sent/received\nNetwork I/O statistics\nNetwork round trips\nNumber of operations performed\nOptimization information\nFinal optimized cost estimate\nOriginal query cost estimate\nOverall execution statistics\nParallel execution efficiency\nQuery parameters used\nParticipating actor nodes\nPeak memory usage\nPercentage of total execution time\nPercentage of total execution time\nExecution phases breakdown\nPriority (1-10, 10 being highest)\nUnique profile ID\nOriginal query text\nNumber of read operations\nReason for choosing this strategy\nRecord execution statistics for a plan node\nNumber of requests sent\nResource usage during execution\nRight table/collection\nTotal rows returned\nReasons rules were not applied\nSelectivity of the index for this query\nEnable or disable profiling\nSeverity (1-10, 10 being most severe)\nReason for not using (if applicable)\nSource actor\nPhase start time relative to query start\nMark the start of a new execution phase\nStart profiling a query\nSub-phases for nested operations\nOptimization suggestions\nTable/collection name\nTime spent on this bottleneck\nTime offset from query start\nShort suggestion title\nTotal execution time\nEnable CPU tracking\nEnable memory tracking\nEnable network tracking\nWhether the index was used\nNumber of write operations\nAdaptive replacement cache\nAll cache entries\nBounded staleness\nCache configuration\nGeneric cache entry\nCache entry metadata for distribution\nCache errors\nCache invalidation coordinator\nCache messages for distributed coordination\nOverall cache statistics\nIndividual cache statistics\nColumn metadata\nColumn statistics\nConsistency levels for distributed caching\nCustom condition\nDefault cache sizes and timeouts\nDistributed cache coordinator\nEventually consistent\nCache eviction strategies\nHeartbeat message\nHistogram bucket\nIndex metadata\nIndex statistics\nIndex types\nCache entry invalidation\nInvalidation event\nCache invalidation rule\nInvalidation targets\nInvalidation triggers\nLeast Frequently Used\nLeast Recently Used\nManual invalidation\nMetadata cache for schema and statistics\nNode status\nPartition metadata\nPeer node information\nPlan cache for storing execution plans\nSpecific cache entries\nMulti-level query caching system\nQuery execution metadata\nQuery hash for cache key\nCached query result\nRandom replacement\nResult cache for storing query results\nSession consistency\nStrong consistency\nCache synchronization request\nCache synchronization response\nTime-based expiration\nTable metadata\nTable modification\nTable statistics for caching\nEntries for specific tables\nEntries with specific tags\nTime-based expiration\nCache entry update\nAccess count\nAccess count\nAdd invalidation rule\nNode address\nAffected entries\nAverage entry size\nAverage value length\nBackground invalidation tasks\nCache execution plan\nCache query result\nCache table metadata\nTime-to-live for cache entries\nCache capacity\nCommunication channels\nClear all caches\nColumn statistics\nColumn information\nIndexed columns\nCache configuration\nConsistency level\nCreation timestamp\nCreation timestamp\nCurrent size\nCached data\nResult data\nData type\nDefault value\nDependency tracking\nIndex depth\nDistributed coordination\nEnable cache compression\nEnable distributed caching\nEnable metadata caching\nEnable plan caching\nEnable result caching\nCache entries\nCache entries\nRow count estimate\nUnique values estimate\nInvalidation event broadcaster\nEvent type\nEviction strategy\nEviction strategy\nCache eviction strategy\nEviction count\nExecution timestamp\nExecution duration\nFrequency\nAccess frequency tracking\nAccess frequency tracking\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet cached execution plan\nGet cached query result\nGet cache statistics\nGet table metadata from cache\nHistogram buckets\nHit rate\nCache statistics\nCache statistics\nCache statistics\nHit count\nRule ID\nEvent ID\nNode ID\nIndex metadata entries\nIndex name\nIndex statistics\nIndex type\nIndexes used\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvalidate cache entries\nInvalidation coordinator\nUnique flag\nLast access timestamp\nLast analyzed timestamp\nLast heartbeat\nLast modified timestamp\nLast updated timestamp\nLeaf pages\nLower bound\nLRU tracking\nLRU tracking\nMaximum result size to cache (in MB)\nMaximum cache size\nMaximum cache size\nMaximum cache size\nMaximum size\nMemory usage in bytes\nMessage handler\nQuery execution metadata\nMetadata cache for schema and statistics\nMetadata cache stats\nMetadata cache size (number of entries)\nMin/max values\nMiss count\nLast modified timestamp\nMost common values\nTable name\nColumn name\nPartition name\nIndex name\nCreate a new query cache manager\nNode ID\nNon-leaf pages\nNull count\nNullable flag\nOverall hit rate\nPartition key\nPartitioning information\nPeer nodes\nCache persistence directory\nPlan cache for execution plans\nPlan cache stats\nPlan cache size (number of entries)\nRule priority\nReplication factor\nResult cache for query results\nResult cache stats\nResult cache size (number of entries)\nRow count\nTotal row count\nRows processed\nInvalidation rules\nSelectivity estimate\nEntry size in bytes\nResult size in bytes\nTable size in bytes\nIndex size in bytes\nEntry size\nStatistics entries\nCache statistics\nNode status\nTable metadata entries\nTable name\nTable name\nTables accessed\nCache tags for invalidation\nTags\nTarget cache entries\nTimestamp\nEviction count\nTotal memory usage\nTrigger condition\nTime-to-live\nTTL\nUnique value count\nUpper bound\nPartition value range\nCreate cache manager with custom configuration\nCategories of spatial functions\nInformation about a spatial function\nSpatial function registry for OrbitQL\nSpatial function parameters\nTypes for spatial function parameters\nReturn types for spatial functions\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all function names\nGet function information\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList all functions in a category\nCreate a new spatial function registry with default …\nRegister a spatial function\nRegister default spatial functions\nColumn-level statistics\nHistogram bucket for data distribution analysis\nIndex statistics for cost estimation\nStatistics collection configuration\nStatistics collection errors\nStatistics manager responsible for collecting and …\nTable-level statistics for cost-based optimization\nCollect statistics for an index\nTracks when tables were last analyzed\nCollect statistics for a table\nAuto-analyze tables that need statistics updates\nEnable automatic statistics collection\nThreshold percentage of changed rows to trigger …\nAverage size of a row in bytes\nAverage width in bytes\nCalculate selectivity for a specific predicate\nTracks row change counts for auto-analyze triggers\nClustering factor (how well ordered the index is)\nPer-column statistics\nConfiguration for statistics collection\nCorrelation with physical row order (-1.0 to 1.0)\nNumber of values in this bucket\nCreate sample histogram for testing\nNumber of distinct values in this bucket\nNumber of distinct keys in the index\nNumber of distinct values across all indexed columns\nEstimate selectivity for range predicates using histogram\nEstimate selectivity for a predicate\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet configuration\nGet index statistics\nGet table statistics\nHistogram buckets for data distribution\nHistogram bounds for value distribution\nNumber of histogram buckets to maintain\nUnique identifier for the index\nIndex size in bytes\nCached index statistics\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhen statistics were last analyzed\nWhen statistics were last updated\nNumber of leaf pages in the index\nLower bound of the bucket (inclusive)\nMaximum time between forced statistics updates\nFrequencies of most common values\nMost common values for this column\nMost common values and their frequencies\nNumber of most common values to track\nNumber of distinct values in this column\nCheck if a table needs statistics update\nCreate a new statistics manager\nFraction of NULL values (0.0 to 1.0)\nFraction of NULL values across all columns (0.0 to 1.0)\nNumber of pages used by the table\nRecord a change to a table (for auto-analyze triggering)\nTotal number of rows in the table\nSample size for statistics collection (0.0 to 1.0)\nIndex selectivity (0.0 to 1.0, lower is more selective)\nCached table statistics\nHeight of the index tree\nUpdate configuration\nUpper bound of the bucket (exclusive)\nColumn statistics for storage optimization\nCompression algorithms supported\nCSV configuration\nCSV file format handler\nFile format handler trait\nLocal file system provider\nParquet configuration\nParquet file format handler\nPartition information\nSimplified S3 client\nS3 configuration\nS3-compatible storage provider\nStorage configuration\nStorage engine abstraction for different storage backends\nStorage errors\nStorage metadata information\nStorage provider trait for different backends\nStorage operation statistics\nAccess key ID\nAverage value length\nAverage read latency\nAverage write latency\nBase directory\nBucket name\nGet the S3 bucket name from configuration\nTotal bytes read\nTotal bytes written\nCache hit count\nCache miss count\nGet a reference to the underlying S3 client\nHTTP client (simplified)\nGet client configuration for debugging\nPartition column\nColumn statistics\nCompression info\nCompression type\nCompression algorithm\nStorage configuration\nS3 configuration\nConfiguration\nConfiguration\nConnection pool size\nDefault storage provider\nDelete file\nField delimiter\nDistinct value count estimate\nEnable columnar optimization\nEnable compression\nEnable dictionary encoding\nPartition pruning enabled\nPredicate pushdown enabled\nEnable statistics\nEndpoint URL (for S3-compatible services)\nCheck if file exists\nFile paths in partition\nFile format\nFile format handlers\nGet format name\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.")