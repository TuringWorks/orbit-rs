searchState.loadedDescShard("orbit_shared", 1, "Returns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet file metadata\nGet storage statistics\nGet table schema\nCheck if client is available\nHas header row\nGet schema from file\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the client is properly configured\nList files in directory\nMaximum value\nMetadata cache\nMinimum value\nLast modified timestamp\nCreate new storage engine\nNull count\nNull value representation\nPartition information\nFile path\nGet provider type\nStorage providers (S3, Azure, GCS, Local)\nQuote character\nRead data in specific format\nRead buffer size\nRead data from storage\nRead operations count\nRead data from storage with format detection\nGet the S3 region from configuration\nRegion\nRegister format handler\nRegister storage provider\nRow count in partition\nRow group size\nSchema information\nSecret access key\nFile size in bytes\nStorage statistics\nSupport predicate pushdown\nSupport projection pushdown\nPartition value\nWrite data in specific format\nWrite buffer size\nWrite data to storage\nWrite operations count\nWrite data to storage\nData change notification for live queries\nTypes of data changes for live queries\nContains the error value\nLive query subscription configuration\nLive query subscription handle\nContains the success value\nStreaming query result that yields rows incrementally\nMetadata for streaming rows\nConfiguration for streaming queries\nStreaming query builder for constructing complex streaming …\nStreaming query executor that can handle large result sets …\nA single row in a streaming result set\nStatistics about streaming operations\nBatch size for streaming results\nBuffer size for internal queues\nCancel live query subscription\nUnique change ID\nChannel for receiving change notifications\nType of change\nTypes of changes to monitor\nCleanup expired subscriptions\nSubscription configuration\nCreate execution plan for streaming\nCreate result stream from execution plan\nSubscription start time\nRow data as key-value pairs\nDebounce interval for change notifications\nEnable compression for large rows\nExecute query with streaming results\nExecute plan and stream results in batches\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet statistics about streaming operations\nGet live query subscription\nWhether to include full row data in change notifications\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if subscription is still active\nWhether this is a partial row (for very wide tables)\nLast update time\nMaximum memory usage for buffering\nMaximum number of queued changes\nMetadata about this row\nNew data (for inserts/updates)\nGet the next change notification\nGet the next updated query result\nNotify about data changes (called by data modification …\nOld data (for updates/deletes)\nQuery parameters\nOriginal query that is being monitored\nChannel for receiving updated query results\nPrimary key or identifier of changed row\nTimeout for individual row fetches\nRow sequence number within the result set\nSet up change monitoring for a live query\nSource table or collection\nCreate live query subscription\nUnique subscription ID\nTable/collection that changed\nRow timestamp (for time-series data)\nTimestamp of change\nTransaction ID if applicable\nRow version (for change tracking)\nTables/collections to monitor for changes\nSchema for record batches\nBitmap for null tracking\nUse bitmaps to track null values\nColumnar data representation for vectorized processing\nDefault batch size for vectorized operations\nJoin side specification\nSkip null handling (for performance-critical paths)\nNull handling strategies for vectorized operations\nRecord batch for columnar processing\nSIMD vector width for different data types\nUse sentinel values to represent nulls\nData types supported by vectorized operations\nGeneric vector register for SIMD operations\nVector register set for managing SIMD operations\nConfiguration for vectorized execution\nVectorization errors\nVectorized aggregation operation\nVectorized execution engine\nVectorized filter operation\nVectorized join operation\nTrait for vectorized operations\nVectorized projection operation\nVectorized scan operation\nAggregate functions\nFallback scalar filter implementation\nApply selection mask to filter records\nApply SIMD-optimized filter\nBatch size for vectorized operations\nPreferred batch size\nBit storage\nBuild side (smaller table)\nColumns in the batch\nFilter condition\nJoin condition\nConfiguration\nCreate vectorized aggregation operator\nCreate constant column from literal value\nCreate vectorized filter operator\nCreate vectorized projection operator\nCreate vectorized scan operator\nRaw data buffer\nData type\nEnable AVX-512 instructions (if available)\nEnable SIMD instructions\nEnable vectorized string operations\nEvaluate binary expression with SIMD optimization\nEvaluate expression on input batch\nExecute operation on a batch of records\nExecute vectorized operation on record batch\nExpressions to compute\nExtract f64 data from column\nExtract i64 data from column\nAvailable registers for different data types\nColumn names and types\nFilter a single column using selection mask\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet configuration\nGroup by expressions\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nJoin type\nNumber of bits\nNumber of elements\nMemory alignment for vectors\nCreate mock data for testing\nColumn name\nCreate a new vectorized executor\nNull handling strategy\nNull bitmap (optional)\nOutput column names\nPredicate for filtering (optional)\nPreferred batch size for this operation\nProjection columns\nNumber of rows\nTable schema\nSchema information\nVectorized arithmetic for f64 columns (using scalar …\nVectorized arithmetic for i64 columns (using scalar …\nVectorized filter for f64 columns (using scalar operations …\nVectorized filter for i64 columns (using scalar operations …\nSIMD instruction width\nCheck if operation supports SIMD\nAvailable vector register sets\nCreate executor with custom configuration\nActor state snapshot containing serialized state and …\nActor state manager that handles persistence operations\nIn-memory persistence backend for testing and development\nTrait for implementing different persistence backends\nConfiguration for persistence layer\nPersistence metrics for monitoring\nActor reference this snapshot belongs to\nEnable automatic snapshots\nBatch size for bulk operations\nCache of recently accessed snapshots\nCalculate SHA-256 hash of the state data\nCleanup expired snapshots\nCompression level (0-9, 0 = no compression)\nConnection timeout for database operations\nTimestamp when snapshot was created\nDelete all snapshots for an actor\nDelete a specific snapshot\nDelete actor state\nEnable encryption for state data\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet persistence metrics\nGet state history for an actor\nGet storage statistics\nGet backend health status\nPerform health check\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if snapshot has expired based on TTL\nList all snapshots for an actor\nLoad the latest snapshot for an actor\nLoad a specific snapshot version\nLoad actor state\nLoad a specific version of actor state\nMaximum retries for failed operations\nMaximum number of snapshots to keep per actor\nEnable metrics collection\nSave an actor snapshot\nSave actor state\nUnique identifier for this snapshot\nInterval between automatic snapshots\nStart background cleanup tasks\nSerialized actor state\nHash of the state data for integrity checking\nTags for categorizing snapshots\nTTL for automatic cleanup (in seconds)\nTimestamp when snapshot was last updated\nVerify integrity of the snapshot\nVersion number for optimistic concurrency control\nAdvanced connection pool implementation with multi-tier …\nCircuit breaker pattern implementation for connection …\nConnection health monitoring implementation\nLoad balancing for connection pooling across multiple nodes\nAdvanced connection pool with multi-tier support\nConfiguration for advanced connection pool\nApplication-side connection pool\nClient-side connection pool\nConnection pool metrics\nDatabase-side connection pool\nPool tier for multi-tier pooling\nConnection wrapper with metadata\nRAII guard for pooled connections\nAcquire a connection from the pool\nAdd a database node to the pool\nAverage acquisition time in milliseconds\nCircuit breaker configuration\nGet a reference to the connection\nGet a mutable reference to the connection\nConnection timeout\nCurrent active connections\nEnable dynamic pool sizing\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet overall health status\nGet pool metrics\nHealth check interval\nIdle timeout before closing connection\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad balancing strategy\nMark the connection as unhealthy (will not be returned to …\nMaximum number of connections\nMaximum lifetime of a connection\nMinimum number of connections\nCreate a new advanced connection pool\nGet the node ID this connection belongs to\nPool hits (reused connections)\nPool misses (new connections)\nRemove a database node from the pool\nReturn a connection to the pool\nStart background maintenance tasks\nTarget utilization for dynamic sizing (0.0-1.0)\nPool tier\nTotal connections acquired\nCircuit breaker for preventing cascading failures\nCircuit breaker configuration\nCircuit breaker states\nInternal state for circuit breaker\nCircuit is closed, requests are allowed\nCircuit is half-open, testing recovery\nCircuit is open, requests are blocked\nExecute a request with circuit breaker protection\nNumber of failures before opening circuit\nTime window for counting failures\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the current state of the circuit breaker\nMaximum number of half-open attempts\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if a request should be allowed\nCreate a new circuit breaker with the given configuration\nRecord a failed request\nRecord a successful request\nDuration to keep circuit open before attempting recovery\nReset the circuit breaker to initial state\nNumber of successful requests needed to close circuit\nHealth check result\nConnection health monitoring\nConnection is degraded but still functional\nConnection has failed\nTrait for health check implementations\nHealth status of a connection\nConnection is healthy and operational\nAdd a health check\nAdjust health status based on response time thresholds\nPerform a health check on the connection\nGet the health check interval\nError message if failed\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the current health status of all connections\nGet the overall health status\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLast check timestamp\nLog unhealthy connection status\nCreate a new health monitor\nPerform health checks on all registered checks\nProcess a single health check and adjust status based on …\nResponse time in milliseconds\nStart monitoring connections\nCurrent health status\nSet response time thresholds\nRoute based on connection affinity\nConnection load balancer\nRoute to node with least connections\nLoad balancer statistics\nLoad balancing strategies\nNode health information\nRandom selection\nRound-robin distribution\nWeighted round-robin based on node capacity\nCurrent active connections\nAdd or update a node\nAverage response time in milliseconds\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet statistics about all nodes\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the node healthy\nMaximum allowed connections\nCreate a new load balancer with the specified strategy\nNode identifier\nRemove a node\nSelect a node for a new connection\nSelect a node using affinity key\nUpdate node connection count\nUpdate node health status\nNode weight (for weighted strategies)\ngRPC service handler for Raft consensus\ngRPC-based Raft transport implementation\nClient connections to other nodes\nConnection timeout\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet or create a client connection to a node\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a gRPC server with this handler\nNode address mapping\nThis node’s ID\ngRPC service definitions for Raft consensus\nRemove a client connection (on failure)\nRequest timeout\nHelper function to start a Raft gRPC server\nAdd or update node address\nAppend entries request\nAppend entries response\nLog entry for Raft\nVote request message\nVote response message\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerated client implementations.\nGenerated server implementations.\nRaft consensus service\nEnable decompressing responses.\nAppend entries (including heartbeats)\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nRequest vote from a candidate\nCompress requests with the given encoding.\nGenerated trait containing gRPC methods that should be …\nRaft consensus service\nGenerated gRPC service name\nEnable decompressing requests with the given encoding.\nAppend entries (including heartbeats)\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nRequest vote from a candidate\nCompress responses with the given encoding, if the client …\nTrait for managing cluster membership\nConfiguration for recovery mechanisms\nRecovery event handler trait\nRecovery statistics\nTransaction recovery checkpoint\nTransaction recovery manager\nAdd a recovery event handler\nBecome the new coordinator and recover transactions\nCheck health of known coordinators\nRecovery checkpoint interval\nActive transaction checkpoints\nClean up old checkpoints\nCluster membership manager\nMaximum time to wait for coordinator recovery\nKnown coordinators and their health status\nCreate a checkpoint for a transaction\nCurrent coordinator (if this node is acting as one)\nCurrent cluster leader for coordination decisions\nElection timeout for new coordinator selection\nEnable automatic failover\nRecovery event handlers\nExecute the appropriate recovery strategy based on …\nFind transactions that need recovery due to coordinator …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet current checkpoints\nGet cluster configuration\nGet current cluster leader\nGet all nodes in the cluster\nGet recovery statistics\nGet the coordinator for a transaction\nHandle coordinator failure\nHandle non-recoverable transaction states\nHandle recovery failure and update statistics\nInterval for checking coordinator health\nTimeout for coordinator health checks\nIncrement total recoveries counter\nInitialize tracking of cluster coordinators\nInitiate recovery process for failed transactions\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if a node is the current leader/coordinator\nMaximum transaction age for recovery\nMonitor recovery progress\nNotify event handlers about coordinator election\nNotify event handlers about recovery completion\nNotify event handlers about recovery start\nCalled when this node becomes coordinator\nCalled when a coordinator failure is detected\nCalled when recovery process completes\nCalled when recovery process starts\nProcess all transactions under coordinator supervision\nReassign transactions from a failed coordinator to the …\nRecover transaction in aborting state\nRecover transaction in committing state\nRecover incomplete transactions on startup\nRecover transaction in prepared state\nRecover transaction in preparing state\nRecover a single transaction\nRegister a transaction with its coordinator\nRemove checkpoint after transaction completion\nNotify cluster of coordinator failure\nCheck if this node should become the new coordinator\nStart the recovery manager\nStart background recovery tasks\nStart leader election\nRecovery statistics\nTransaction-to-coordinator mapping for tracking ownership\nRemove transaction-coordinator mapping\nUpdate an existing checkpoint\nUpdate the current cluster leader\nUpdate statistics for successful recovery\nReplication configuration\nReplication slot represents a consumer’s position in the …\nReplication slot manager\nReplication statistics\nReplication stream for consuming events from a slot\nMark slot as active\nWhether slot is active\nAdvance global LSN\nAdvance slot position (consumer confirms processing)\nEnable automatic slot cleanup\nCleanup stale slots\nConfiguration\nAdditional configuration\nConfirm processing up to LSN\nConfirmed flush LSN (consumer has processed up to this …\nCreate a new replication slot\nCreation timestamp\nGet current LSN\nGlobal LSN counter\nMark slot as inactive\nDrop a replication slot\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet events for a slot since its position\nGet a replication slot\nCheck slot lag\nGet replication statistics\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if slot is lagging too much\nCheck if slot has been inactive for too long\nLast activity timestamp\nList all replication slots\nMaximum lag allowed (in number of events)\nMaximum number of replication slots\nUnique slot name\nCreate a new replication slot manager\nCreate a new replication stream\nCreate a new replication slot\nGet next batch of events\nPlugin/consumer type\nCurrent LSN (Log Sequence Number) position\nGet slot name\nActive slots\nThreshold for considering a slot stale (seconds)\nStatistics\nUpdate slot position\nA route representing a path through the cluster\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSaga was aborted after compensation\nStart compensation process\nSaga failed and is compensating\nSaga completed successfully\nContinue with the next step\nSaga is executing forward steps\nSaga failed and could not be compensated\nSaga is being initialized\nSaga is paused (can be resumed)\nStep failed permanently (no retry)\nStep failed but can be retried\nConfiguration for saga execution\nExecution context passed to saga steps\nDefinition of a complete saga workflow\nEvent handler for saga lifecycle events\nExecution state of a saga instance\nUnique identifier for a saga instance\nThe main saga orchestrator that manages saga execution\nCurrent state of a saga execution\nStatistics for saga execution\nA saga step definition with forward and compensation …\nMetadata for a saga step\nStep was skipped (conditional execution)\nOutcome of processing a step result\nResult of executing a saga step\nStep executed successfully\nAdd an event handler\nAdd a step to the saga definition\nCheckpoint interval for state persistence\nClean up after step execution (resource deallocation, etc.)\nExecute the compensation action for this step\nCompensate a failed saga by running compensation actions\nCompensate a single step\nComplete compensation process successfully\nComplete saga successfully\nDefault timeout for individual steps\nDependencies that must complete before this step\nStep description\nEnable parallel execution where possible\nExecute the forward action of this step\nExecute compensation for all completed steps\nExecute a saga step by step\nExecute all steps in the saga\nExecute a step with retry logic\nFind a step by its ID in the saga definition\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet data value from the context\nGet saga execution by ID\nGet saga statistics\nGet typed data value from the context\nHandle compensation failure\nHandle successful step compensation\nHandle failed step execution\nHandle the result of a step execution\nHandle successful step execution\nCheck if saga has failed\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if all steps are completed\nLoad saga definition and execution for execution\nMark a step as compensated\nMark a step as completed\nMark a step as failed\nMaximum compensation time\nMaximum execution time for the entire saga\nMaximum retry attempts for this step\nMaximum retry attempts per step\nGet metadata for this step\nNotify event handlers that compensation completed\nNotify event handlers that compensation started\nNotify event handlers of saga completion\nNotify event handlers that saga failed\nNotify event handlers of step completion\nNotify event handlers of step start\nCalled when compensation completes\nCalled when compensation starts\nCalled when a saga completes successfully\nCalled when a saga fails\nCalled when a saga starts\nCalled when a step completes\nCalled when a step starts\nWhether this step can be executed in parallel with others\nPrepare the step for execution (resource allocation, …\nPrepare step for execution\nProcess saga execution queue\nRegister a saga definition\nRetry backoff strategy\nSet data value in the context\nCheck if this step should be executed based on context\nStart the orchestrator background processing\nStart a saga execution\nUnique step identifier\nHuman-readable step name\nTags for categorization and monitoring\nStep timeout (overrides default)\nUpdate statistics for completed compensation\nUpdate statistics for failed compensation\nUpdate statistics for successful step compensation\nUpdate statistics for saga completion\nUpdate saga execution state\nUpdate statistics for successful step execution\nValidate the saga definition\nSet saga configuration\nAdd a tag to the saga\nSaga recovery checkpoint containing execution state\nConfiguration for saga recovery integration\nEvent handler that integrates saga recovery with …\nSaga recovery manager that handles saga failures and …\nStatistics for saga recovery operations\nRecovery checkpoint interval\nClean up old saga checkpoints\nContinue saga compensation process\nCreate a recovery checkpoint for a saga execution\nEnable automatic saga failover\nExecute the appropriate recovery strategy based on saga …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet saga recovery statistics\nHandle recovery of compensating saga\nHandle recovery of executing saga\nHandle recovery of initializing saga\nHandle non-recoverable saga states\nHandle recovery of paused saga\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if saga state is recoverable\nMaximum number of recovery attempts\nMaximum time to wait for saga recovery\nPersist saga checkpoint to storage\nReconstruct saga execution from checkpoint\nRecover a specific saga execution\nRecover sagas from a failed coordinator\nRemove saga checkpoint after completion\nRestart saga execution from the beginning\nResume saga execution from current step\nStart the saga recovery manager\nStart background recovery tasks\nStore paused saga for later resumption\nUpdate recovery attempts counter for a saga\nUpdate an existing saga checkpoint\nValidate that recovery attempts are within limits\nSecurity context for a request\nComprehensive security framework\nComprehensive Audit Logging\nGet audit logger\nAudit logger\nGet authentication manager\nAuthentication manager\nAuthentication timestamp\nAdvanced Authentication Mechanisms\nRole-Based Access Control (RBAC) with Fine-Grained …\nClient IP address\nEncryption at Rest and in Transit\nGet encryption manager\nEncryption manager\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new security framework\nCreate a new security context\nSecurity Policy Engine\nGet policy engine\nPolicy engine\nGet RBAC engine\nRBAC engine\nSession identifier\nSQL Injection Prevention and Query Validation\nGet SQL validator\nSQL injection detector\nSubject making the request\nThreat Detection and Response\nGet threat detector\nThreat detection\nValidate and authorize a query\nAdd client IP\nAudit event\nAudit event type\nAudit logger trait\nAudit policy\nAudit query filters\nAudit result\nAudit statistics\nCompliance monitor\nCompliance report\nCompliance rule\nCompliance rule type\nCompliance violation\nIn-memory audit logger\nViolation severity\nAdd a compliance rule\nCalculate integrity hash\nCheck compliance\nCheck for violations\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet audit statistics\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLog an audit event\nCheck if an event matches all filters\nCheck if event matches event type filter\nCheck if event matches resource filter\nCheck if event matches result filter\nCheck if event matches subject filter\nCheck if event matches time range filter\nCreate a new in-memory audit logger\nCreate a new compliance monitor\nCreate a new audit event\nCreate an authentication audit event\nCreate a query audit event\nQuery audit logs\nSet client IP\nSet execution time\nAdd metadata\nCreate with custom policy\nSet result\nMark as sensitive data access\nSet session ID\nAuthentication token\nAuthentication manager that supports multiple providers\nAuthentication provider trait\nLDAP authentication provider\nOAuth2 authentication provider\nSAML authentication provider\nAuthenticate user credentials\nAuthenticate using default provider\nAuthenticate using specific provider\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCheck if token has a specific scope\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if token is valid\nCreate a new LDAP authentication provider\nCreate a new OAuth2 authentication provider\nCreate a new SAML authentication provider\nCreate a new authentication manager\nCreate a new auth token\nGet provider name\nRefresh an authentication token\nRefresh token\nRegister an authentication provider\nRevoke an authentication token\nRevoke token\nValidate an authentication token\nValidate token\nAccess policy\nAction matcher for policies\nAccess condition\nCondition operator\nCondition type\nPermission definition\nPolicy effect\nRBAC engine\nResource matcher for policies\nType of security resource\nRole definition\nRole-based access control trait\nSecurity action\nSecurity resource\nSecurity subject (user or service)\nSubject matcher for policies\nType of security subject\nCheck if action matches\nAdd an action to the permission\nAdd a condition to the permission\nAdd a permission\nAdd a permission to the role\nAdd a policy\nAdd a role\nConvert to string representation\nCheck if subject has access to resource for action\nCheck if subject has permission for action on resource\nCollect inherited permissions recursively\nEvaluate conditions\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet effective permissions for a subject\nGet a role\nGet all permissions for a subject\nAdd role inheritance\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new RBAC engine\nCreate a new role\nCreate a new permission\nCheck if policy matches the request\nCheck if resource matches\nCheck if subject matches\nEncryption algorithm\nEncryption key\nEncryption manager\nKey management system\nKey rotation policy\nKey store type\nTLS configuration\nTLS version\nAdd a key\nDecrypt data\nEncrypt data\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a new encryption key\nGet active key\nGet key by ID\nGet TLS configuration\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if encryption at rest is enabled\nCheck if key is expired\nCheck if encryption in transit is enabled\nCheck if key rotation is needed\nCreate a new key management system\nCreate a new encryption manager\nCreate a new encryption key\nRotate keys\nSet active key\nEnable/disable encryption at rest\nEnable/disable encryption in transit\nCreate a new TLS 1.3 configuration\nAction condition\nCondition operator\nEnvironmental condition\nEnvironmental condition type\nPolicy action\nPolicy condition\nPolicy engine\nPolicy evaluation result\nPolicy evaluator trait\nPolicy rule\nPolicy rule type\nResource condition\nSecurity policy\nSubject condition\nAdd a policy\nAdd a rule to the policy\nEvaluate policies for a request\nEvaluate policies for a request\nEvaluate a single rule\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a policy\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList all policies\nCreate a new policy engine\nCreate a new security policy\nCreate an empty policy condition\nRemove a policy\nQuery validator\nSQL injection detector\nQuery validation result\nAdd blocked operation\nCheck for balanced quotes\nCheck for excessive comments\nCheck table access\nEstimate query complexity\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new SQL injection detector\nCreate a new query validator\nSanitize input\nValidate a SQL query\nValidate a query\nSet allowed tables\nCreate with custom configuration\nAnomaly detector\nBrute force detector\nDetected threat\nThreat assessment result\nThreat detection engine\nThreat rule\nThreat severity\nThreat type\nUser profile for baseline behavior\nCalculate anomaly score\nCalculate risk score based on detected threats\nCheck for brute force attack\nClear failed attempts for a subject/IP\nClear detected threats\nDetect anomaly in user behavior\nDetect threats in access patterns\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all detected threats\nGet recommended actions based on threats\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new threat detection engine\nCreate a new anomaly detector\nCreate a new brute force detector\nRecord failed authentication attempt\nUpdate user profile\nAttack detection result\nAttack detection patterns\nInput sanitization utilities\nRate limit statistics\nAdvanced rate limiter with sliding window algorithm\nSecure configuration manager with environment variable …\nSecurity event logging\nSliding window for rate limiting\nAdd a key to the sensitive keys list\nAdd validation pattern for a configuration key\nClean up old windows to prevent memory leaks\nDetect potential attacks in input\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSecurely get configuration value with validation\nGet required configuration value\nGet current usage statistics for a client\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if a request is allowed for the given client ID\nLog security-relevant events\nCreate a new rate limiter\nCreate a new secure configuration manager\nSanitize file path to prevent directory traversal\nSanitize HTML content\nSanitize for SQL context (basic escaping)\nRemove or escape dangerous characters from user input\nBinary serialization/deserialization error\nContains the error value\nJSON serialization/deserialization error\nContains the success value\nResult type for serialization operations\nSchema validation error\nTrait for serializable data structures\nCommon serialization error type\nReturns the argument unchanged.\nDeserialize from binary format\nDeserialize from JSON bytes\nCalls <code>U::from(self)</code>.\nSerialize to binary format\nSerialize to JSON bytes\nCoordinate Reference System (CRS) support for spatial data.\nSQL-style spatial functions for PostGIS compatibility.\nCore spatial geometry types following OGC Simple Features …\nGPU-accelerated spatial operations for high-performance …\nHigh-performance spatial indexing for efficient spatial …\nSpatial operations and geometric functions.\nReal-time spatial streaming for GPS tracking and IoT …\nAxis order enumeration for coordinate systems.\nParameters for creating a Coordinate Reference System\nCoordinate Reference System definition with EPSG support.\nCoordinate transformation engine for converting between …\nCommon EPSG coordinate systems with their definitions.\nLatitude, Longitude order (some EPSG definitions)\nLongitude, Latitude order\nCoordinate transformation parameters between different CRS.\nX, Y order (easting, northing)\nAdd a new CRS definition to the registry.\nAdd a custom CRS to the registry.\nAuthority name (typically “EPSG”)\nList all available SRIDs in the registry.\nGet the axis order for this CRS (important for some …\nAuthority-specific code\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a coordinate reference system by SRID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this is a geographic (lat/lon) or projected …\nHuman-readable name\nCreate a new EPSG registry with common coordinate systems.\nCreate a new coordinate transformer.\nCreate a new CRS definition.\nPROJ.4 projection string\nGet the registry for direct access.\nEPSG SRID code (e.g., 4326 for WGS84)\nTransform a point from one CRS to another.\nUnits (e.g., “degree”, “meter”)\nUtility functions for common coordinate operations.\nTransform UTM North coordinates to WGS84.\nTransform Web Mercator coordinates to WGS84.\nTransform WGS84 coordinates to UTM North.\nTransform WGS84 coordinates to Web Mercator.\nWell-Known Text (WKT) definition\nCalculate the bearing (azimuth) from one WGS84 point to …\nConvert degrees to radians.\nCalculate the great circle distance between two WGS84 …\nProject a WGS84 point to a destination point given …\nConvert radians to degrees.\nPostGIS-compatible spatial functions.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nST_Area - Calculate area of geometry.\nST_Distance - Calculate distance between geometries.\nST_MakePoint - Create a point with optional SRID.\nST_Point - Create a point geometry.\nST_Within - Test if geometry is within another.\nA bounding box representing the spatial extent of …\nA heterogeneous collection of any geometry types.\nA linear geometry composed of two or more points.\nA closed linear ring used in polygon construction.\nA collection of multiple LineString geometries.\nA collection of multiple Point geometries.\nA collection of multiple Polygon geometries.\nA spatial point with optional elevation and measure values.\nA polygon geometry with exterior boundary and optional …\nSpatial error types for geometry operations.\nUniversal spatial geometry type supporting all OGC Simple …\nCalculate the area of the polygon (exterior area minus …\nCalculate the area enclosed by this ring using the …\nCalculate the area of the bounding box.\nCalculate the bounding box of the LineString.\nCalculate the bounding box of the polygon.\nCalculate the center point of the bounding box.\nCheck if this bounding box contains a point.\nCalculate the 2D distance to another point.\nCalculate the 3D distance to another point (if both have …\nGet the last point of the LineString.\nExterior boundary ring (must be closed)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a simple polygon from a vector of points (no holes).\nGet the geometry type as a string.\nInterior rings representing holes (each must be closed)\nCheck if this bounding box intersects with another.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this point is 3D (has elevation).\nCheck if the LineString is closed (first and last points …\nCheck if the geometry is empty.\nCheck if this point is measured.\nCheck if the ring is valid (closed and has at least 4 …\nCalculate the total length of the LineString.\nOptional M coordinate (measure value)\nCreate a new 2D point.\nCreate a new LineString from a vector of points.\nCreate a new Polygon with an exterior ring and optional …\nCreate a new LinearRing from a vector of points.\nCreate a new bounding box.\nCreate a 3D bounding box.\nOrdered sequence of points forming the line\nPoints forming the ring (first and last must be identical)\nSet the SRID of the geometry.\nGet the SRID of the geometry.\nSpatial Reference System Identifier (EPSG code)\nSpatial Reference System Identifier\nSpatial Reference System Identifier\nGet the first point of the LineString.\nCreate a new 3D point with elevation.\nCreate a new 3D measured point.\nCreate a new measured point.\nX coordinate (longitude in geographic systems)\nY coordinate (latitude in geographic systems)\nOptional Z coordinate (elevation/height)\nClustering algorithms for spatial data.\nSupported GPU compute backends.\nGPU spatial engine supporting multiple compute APIs.\nAssign each point to the closest centroid\nBatch point-in-polygon operations on GPU.\nCalculate the centroid (average position) of a set of …\nHierarchical clustering (CPU fallback).\nCPU fallback implementation.\nDetect the best available GPU backend.\nExpand cluster from a core point using density-connected …\nFind the index of the closest centroid to a given point\nFind neighbors within epsilon distance.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all points assigned to a specific cluster\nDBSCAN clustering implementation.\nK-means clustering implementation.\nSpatial clustering on GPU.\nInitialize centroids using simple distribution across …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new GPU spatial engine.\nProcess neighbor expansion for density connectivity\nCheck if a point should start a new cluster based on …\nUpdate centroids based on current point assignments\nAdaptive spatial indexer that selects the best index for …\nGeohash-based spatial grid index.\nGrid-based indexing for global applications\nGeometry statistics for adaptive index selection.\nIndex statistics for performance monitoring.\nK-d tree for high-dimensional spatial data.\nK-d tree for high-dimensional spatial data\nLinear split algorithm (faster but less optimal)\nQuadTree spatial index for efficient point-based queries.\nHierarchical spatial index for point data\nQuadratic split algorithm\nR*-tree split strategy (best space utilization)\nR-tree spatial index for complex geometries.\nR-tree for complex geometries and range queries\nR-tree split strategies.\nSpatial index enumeration with different algorithms.\nUniversal spatial index interface.\nCalculate statistics for a collection of geometries.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the child quadrant index for a point based on the node…\nHandle insertion into a leaf node, potentially splitting …\nInsert a geometry with an associated ID.\nInsert a geometry into the R-tree.\nInsert a geometry into the geohash grid.\nInsert point into appropriate child quadrant\nInsert a point into the QuadTree.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFind the nearest neighbors to a given point.\nCreate a new adaptive spatial indexer.\nCreate a new QuadTree index.\nCreate a new R-tree index.\nCreate a new Geohash grid index.\nQuery geometries that intersect with the given bounding …\nQuery points within a bounding box.\nQuery geometries within a bounding box.\nRecommend the best spatial index for the given data …\nRedistribute a point to the correct child after node …\nRemove a geometry by ID.\nCheck if a node should be split based on capacity and depth\nGet statistics about the index.\nSpatial operation implementations.\nSpatial relationship types for geometry comparisons.\nCalculate the area of a geometry.\nCalculate the distance between two geometries.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTest if two geometries intersect.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalculate the length/perimeter of a geometry.\nTest if a point is within a polygon using the ray casting …\nSpatial alert types.\nGPS data point for vehicle tracking.\nSpatial alert notification.\nSpatial streaming processor for real-time updates.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new spatial stream processor.\nProcess a batch of GPS updates.\nAggregation functions\nAverage of numeric values\nCollect all values into array\nCount-based window - fixed number of events\nCount of events\nCount distinct values\nFirst value in window\nLast value in window\nMaximum value\nMinimum value\nSession window - dynamic windows based on activity gaps\nSliding window - overlapping windows that slide by a …\nStream event for processing\nStream processor with windowing and aggregation\nStream processing statistics\nSum of numeric values\nTumbling window - non-overlapping fixed-size windows\nResult of window computation\nWindow state for aggregation\nWindow types for stream processing\nAdd event to window\nAggregation function\nExtract numeric value from event\nClear all windows (for testing/cleanup)\nCompute aggregation over events\nCheck if window contains timestamp\nNumber of events in window\nWindow end time\nWindow end time\nEvents in this window\nField to aggregate (if applicable)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet processing statistics\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEvent key for grouping\nKey that was aggregated\nAdditional metadata\nCreate a new stream processor\nCreate a new stream event\nProcess a stream event\nAggregated result\nAggregated result\nWindow start time\nWindow start time\nProcessing statistics\nEvent timestamp\nEvent value\nWindow type\nActive windows by key\nSet field to aggregate\nNumber of events per window\nGap duration to end session\nWindow size\nWindow size\nSlide interval\nKafka CDC consumer that publishes events to Kafka\nKafka producer configuration\nStatistics for Kafka CDC consumer\nRabbitMQ CDC consumer\nRabbitMQ configuration\nStatistics for RabbitMQ CDC consumer\nRetry configuration for webhooks\nSASL configuration for Kafka authentication\nHTTP webhook CDC consumer\nHTTP webhook CDC consumer\nStatistics for webhook CDC consumer\nBatch size in bytes\nKafka broker addresses (comma-separated)\nClient ID\nCompression type (none, gzip, snappy, lz4, zstd)\nEnable idempotence\nExchange name\nExchange type (direct, fanout, topic, headers)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet partition key for event (ensures related events go to …\nGenerate routing key from event\nGet Kafka statistics\nGet RabbitMQ statistics\nGet webhook statistics\nAdditional headers\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLinger time in milliseconds\nHTTP method (POST, PUT)\nCreate a new Kafka CDC consumer\nCreate a new RabbitMQ CDC consumer\nCreate a new webhook CDC consumer\nEnable persistent messages\nRetry configuration\nRouting key pattern\nSASL configuration\nSerialize CDC event to Kafka message\nTimeout in seconds\nTopic to publish events to\nRabbitMQ connection URL\nWebhook URL\nValidate Kafka configuration\nAggregation types for queries and downsampling\nCompression policy for storage optimization\nSupported compression algorithms\nTime series data point\nDownsampling rule for data aggregation\nQuery result for time series data\nRetention policy configuration\nTime series identifier type\nTime series storage backend types\nTime series query range\nMain time series engine configuration\nTime series metadata\nCore time series value types\nTimestamp type using nanosecond precision\nTime series aggregation functions\nTime series data compression algorithms\nCore time series engine implementation\nConvert DateTime to nanosecond timestamp\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTime-based partitioning strategies for time series data\nPostgreSQL TimescaleDB integration for scalable time …\nTime series query language and operations\nRedis TimeSeries integration for high-speed time series …\nTime series data retention management\nTime series storage engine implementations\nConvert nanosecond timestamp to DateTime\nAdvanced aggregation functions for time series data\nCalculate derivative (rate of change over time)\nDetect anomalies using statistical methods\nCalculate exponential weighted moving average\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalculate moving average with configurable window\nCalculate rate of change between consecutive points\nDelta compression for time series data\nDouble delta compression (Facebook Gorilla-style)\nGorilla compression for floating point values\nCompression trait for time series data\nCompress a batch of data points\nGet compression ratio estimate\nFactory function to create compressors\nDecompress data back to data points\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStorage statistics\nMain time series engine\nApply retention policies\nCompact storage (run maintenance operations)\nCreate custom disk storage backend\nCreate hybrid storage backend\nCreate memory storage backend\nCreate PostgreSQL storage backend\nCreate Redis storage backend\nCreate a new time series\nCreate the appropriate storage backend\nDelete a time series\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet series metadata\nGet storage statistics\nInsert multiple data points in batch\nInsert a single data point\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList all time series\nCreate a new time series engine with the given …\nQuery time series data within a time range\nQuery with aggregation\nUpdate series metadata\nComposite partitioning strategy\nPartition by data size\nPartition metadata\nPartition manager for time series data\nPartitioning strategy for time series data\nPartitioning statistics\nPartition by series count per partition\nPartition by time intervals\nRemove old partitions based on retention policy\nCreate a new partition\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDetermine which partition a data point belongs to\nGet partition information\nGet partitioning statistics\nGet partitions that need maintenance (compression, …\nList all partitions within a time range\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMerge small partitions together\nSplit large partitions\nUpdate partition statistics\nChunk information\nCompression configuration\nContinuous aggregates configuration\nHypertable information\nOrder by column configuration\nConnection pool configuration\nPostgreSQL TimescaleDB configuration\nRetention policy configuration\nSort direction\nSSL configuration\nSQL schema for time series tables\nTimescaleDB aggregation functions\nTimescaleDB specific configuration\nTimescaleDB operations and management\nTimescaleDB statistics\nDefault chunk time interval for hypertables\nColumn name\nCompress chunks older than this duration\nManually compress chunks\nCompression settings\nConnection timeout\nContinuous aggregates configuration\nCreate compression policy\nCreate continuous aggregate\nCreate continuous aggregate policy\nCreate a hypertable for time series data\nCreate retention policy\nDatabase name\nManually decompress chunks\nSort direction (ASC or DESC)\nDrop chunks older than this duration\nDrop chunks older than specified time\nEnable compression on a hypertable\nEnable compression\nEnable automatic retention policy jobs\nEnable continuous aggregates\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet chunk information\nGet hypertable information\nGet database statistics\nDatabase host\nIdle timeout before closing a connection\nInitialize TimescaleDB extension and create schema\nInsert time series data in batch\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nJob schedule interval\nMaximum number of connections in the pool\nMax interval per job\nMaximum lifetime of a connection\nMinimum number of connections in the pool\nOrder by columns (for better compression)\nPassword\nConnection pool configuration\nDatabase port\nQuery time series data with optional aggregation\nRefresh interval\nRefresh lag (how far behind real-time to refresh)\nRetention policy settings\nSchema name for time series tables\nSegment by columns (for better compression)\nSSL certificate file path\nSSL configuration\nSSL key file path\nSSL mode (disable, allow, prefer, require, verify-ca, …\nSSL root certificate file path\nTable prefix for time series tables\nTimescaleDB specific configuration\nUsername\nAggregation query specification\nQuery execution step\nValue filter for time series data\nTime series query executor\nQuery execution plan\nSeries selector for querying\nTime series query builder\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCompaction rule information\nRedis TimeSeries duplicate policy\nRedis TimeSeries configuration\nRedis TimeSeries commands and operations\nTime series information returned by TS.INFO\nAdd multiple data points in batch\nAdd a data point to a time series\nRedis TimeSeries aggregation types\nEnable Redis Cluster mode\nRedis Cluster nodes (when cluster_mode is true)\nCommand timeout\nConnection timeout\nCreate compaction rule\nCreate a new time series in Redis\nRedis database number\nDefault duplicate policy\nDefault retention period in milliseconds\nDelete compaction rule\nDelete time series\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRedis server host\nGet information about a time series\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum batch size for bulk operations\nMulti-range query across multiple time series\nRedis password (optional)\nConnection pool size\nRedis server port\nQuery for labels and their values\nQuery time series data within a time range\nEnable Redis TimeSeries module\nTLS CA certificate file path (optional)\nTLS certificate file path (optional)\nEnable TLS/SSL\nTLS key file path (optional)\nStatistics from cleanup operations\nRetention policy manager\nStatistics from cleaning up a single series\nApply downsampling rules for a series\nCleanup a specific series according to its retention policy\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet retention policy for a series\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRemove retention policy for a series\nRun cleanup process for all series\nAdd or update retention policy for a series\nStart the retention cleanup background task\nIn-memory storage implementation\nPostgreSQL TimescaleDB storage implementation\nRedis TimeSeries storage implementation\nStorage engine trait for time series data\nAggregate values according to aggregation type\nApply retention policy\nCompact storage\nCreate a new time series\nDelete a time series\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet storage statistics\nInsert multiple data points in batch\nInsert a single data point\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nQuery data points within a time range\nQuery with aggregation\nUpdate series metadata\nStatistics for the persistent transaction log\nConfiguration for persistent transaction log\nPersistent transaction log entry with additional metadata\nTrait for persistent transaction logging backends\nSQLite-based persistent transaction logger\nAge after which entries can be archived (in seconds)\nArchive old entries\nEnable automatic log rotation\nBatch size for bulk operations\nConfigure database settings\nDatabase file path\nGet discriminant name for transaction event (for indexing)\nEnable Write-Ahead Logging for better performance\nFlush buffered entries to database\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nQuery log entries within a time range\nGet log statistics\nQuery log entries by transaction ID\nInitialize database schema\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPerform log maintenance (cleanup, optimization, etc.)\nConnection pool configuration\nMaximum number of log entries before rotation\nCreate a new SQLite transaction logger\nParse NodeId from string, handling the “(namespace:key)…\nRecover transaction state from logs\nConvert database row to persistent log entry\nStart background maintenance tasks\nWrite multiple log entries in a batch\nInternal batch write implementation\nWrite a single log entry\nPhase 2: Coordinator tells participants to abort\nTransaction was aborted\nTransaction is being aborted\nParticipant acknowledges commit/abort\nPhase 2: Coordinator tells participants to commit\nTransaction successfully committed\nTransaction is being committed\nDistributed transaction containing multiple operations\nTransaction encountered an error\nParticipant cannot commit and wants to abort\nPhase 1: Coordinator asks participants to prepare\nAll participants voted to commit\nTransaction is being prepared\nQuery transaction status\nResponse to status query\nTransaction timed out\nConfiguration for distributed transaction system\nTransaction coordinator that manages distributed …\nTransaction events for logging\nUnique identifier for distributed transactions\nTransaction log entry for audit and recovery\nMessage types for distributed transaction protocol\nTrait for sending transaction messages to participants\nOperation to be executed as part of a distributed …\nTrait for participating in distributed transactions\nTransaction states in the 2-phase commit protocol\nTransaction statistics for monitoring\nVote from a participant in the 2-phase commit protocol\nParticipant is uncertain (network issues, etc.)\nPhase 1: Participant responds with vote\nParticipant is ready to commit\nAbort phase: Rollback any changes made during prepare\nPhase 2: Send abort messages to all participants\nActive transactions being coordinated\nAdd an operation to a transaction\nStart a new distributed transaction\nCheck if all participants voted to commit\nInterval for cleanup of old transactions\nClean up timed out transactions\nCommit phase: Execute the transaction operations\nPhase 2: Send commit messages to all participants\nExecute a distributed transaction using 2-phase commit\nDefault transaction timeout\nEnable transaction logging for audit\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all unique nodes involved in this transaction\nGet transaction statistics\nGet current state of a transaction from participant’s …\nHandle acknowledgment from participant\nHandle incoming transaction messages\nHandle vote from participant\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the transaction has timed out\nLog a transaction event\nMaximum number of concurrent transactions\nMaximum transaction log size\nMessage sender for transaction protocol\nAcknowledgments received from participants\nVotes received from participants\nParticipants involved in this transaction (nodes and …\nPrepare phase: Check if the participant can commit the …\nPhase 1: Send prepare messages to all participants\nRetry attempts for failed operations\nStart background cleanup tasks\nTransaction logs for audit and recovery\nWait for acknowledgments from all participants\nWait for votes from all participants\nLock is available\nDeadlock detection result\nDeadlock detector using wait-for graph\nDistributed lock with metadata\nDistributed lock manager\nExclusive lock - prevents any other locks\nLock is held exclusively\nLock is held by one or more shared holders\nUnique identifier for a distributed lock\nConfiguration for the distributed lock manager\nTypes of locks available\nOwner information for a lock\nLock request information\nStatus of a lock\nShared lock - allows other shared locks but not exclusive\nWait-for graph edge representing a dependency\nLock request is waiting in queue\nAcquire a lock\nAdd a wait-for edge\nClean up expired locks periodically\nDFS-based cycle detection\nDetect deadlock cycles in the wait-for graph\nDetection interval\nWait-for graph edges\nAdd a request to the wait queue\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet lock status\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the lock is available\nCheck if the lock is currently held\nCheck if a specific owner holds this lock\nNotify a waiting transaction that the lock is granted\nProcess the wait queue for a released lock\nProcess the next request in the wait queue\nRelease the lock for a specific owner\nRelease a lock\nRemove transaction from deadlock detection if enabled\nRemove wait-for edges for a transaction\nResource to transactions mapping\nGet the victim transaction to abort (youngest transaction)\nStart background tasks\nStart background deadlock detection\nTransaction to resources mapping\nTry to acquire the lock\nTry to grant a lock to a waiting transaction\nLock metrics collector\nSaga metrics collector\nTransaction metrics collector\nMetrics aggregator for all transaction-related metrics\nStatistics snapshot for monitoring\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet duration since transaction started\nGet duration since saga started\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRecord commit phase duration\nRecord deadlock detected\nRecord deadlock resolved\nRecord lock acquired\nRecord lock released\nRecord lock timeout\nRecord number of participants\nRecord prepare phase duration\nRecord queued sagas\nRecord queued transactions\nRecord saga compensated\nRecord saga completed\nRecord saga failed\nRecord saga started\nRecord step compensated\nRecord step executed\nRecord step failed\nRecord transaction abort\nRecord transaction commit\nRecord transaction failure\nRecord transaction start\nRecord transaction timeout\nRecord waiting locks\nConfiguration for batch processing\nBatch processor for operations\nType alias for batch processor function\nStatistics for batch processing\nA batched operation\nGeneric connection pool\nConnection pool configuration\nConnection pool statistics\nA pooled connection\nRAII guard for resource usage\nResource manager for limiting resource usage\nAcquire resources for an operation\nEnable adaptive batch sizing\nAdd an operation to the batch queue\nAdd a high-priority operation\nCurrent concurrency semaphore\nConnection timeout\nCurrent memory usage estimate\nGet current resource usage\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a connection from the pool\nGet batch statistics\nGet pool statistics\nHealth check interval\nIdle timeout before closing connection\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum number of operations in a batch\nMaximum number of concurrent operations\nMaximum lifetime of a connection\nMaximum memory usage (in bytes)\nMaximum number of connections\nMaximum time to wait before flushing a batch\nMinimum batch size to trigger processing\nMinimum number of idle connections\nProcess a batch\nGet current queue size\nReturn a connection to the pool\nStart batch processing loop\nStart background maintenance tasks\nAudit log entry for transaction operations\nAudit logger trait\nAuthentication token for transactions\nAuthentication provider trait\nAuthorization provider trait\nCustom permission\nIn-memory audit logger (for testing)\nSimple in-memory authentication provider (for testing/demo)\nSimple scope-based authorization provider\nTransaction security context\nCan abort transactions\nCan commit transactions\nCan coordinate transactions\nCan initiate transactions\nCan participate in transactions\nRequired permissions for transaction operations\nCan read transaction state\nTransaction security manager\nType alias for user credentials storage (username -&gt; …\nAdd a user (for testing/setup)\nAuthenticate a request and return a token\nAuthenticate credentials and create security context\nCheck if a token has the required permissions\nCheck if security context has required permissions\nCreate a security context for system operations\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet effective permissions for a token\nCheck if token has all required scopes\nCheck if token has any of the required scopes\nCheck if token has a specific scope\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if token is valid\nLog an audit entry\nQuery audit logs\nRefresh an authentication token\nRevoke an authentication token\nValidate security context\nValidate an authentication token\nConnection pool for managing gRPC connections\ngRPC-based transaction message sender\nTrait for resolving node IDs to endpoint URLs\nConfiguration for gRPC transport\nClean up idle connections\nConnection timeout\nConvert transaction message to protobuf format\nCreate a new connection to the endpoint\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet or create a connection to the specified endpoint\nGet transport statistics\nGet connection statistics\nEnable HTTP2 adaptive window\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKeep-alive interval\nKeep-alive timeout\nMaximum number of concurrent connections per endpoint\nMaximum message size\nRequest timeout\nResolve an addressable reference to its hosting node\nResolve a node ID to its gRPC endpoint URL\nRetry attempts for failed requests\nRetry backoff initial delay\nRetry backoff multiplier\nSend message with retry logic\nStart background maintenance tasks\nEnable TCP keepalive\nUpdate connection metrics\nAbort message (Phase 2)\nAcknowledgment message\nRequest for broadcasting message\nResponse for broadcast message\nCommit message (Phase 2)\nHealth check request\nHealth check response\nPrepare message (Phase 1)\nQuery status message\nStatus response message\nTarget for broadcast\nTransaction ID\nTransaction message proto\nRequest for sending transaction message\nResponse for transaction message\nTransaction operation\nTransaction state\nTransaction status request\nTransaction status response\nTransaction vote\nVote message (Phase 1 response)\nReturns the value of <code>compensation_data</code>, or the default …\nJSON serialized\nReturns the value of <code>details</code>, or the default value if …\nReturns the value of <code>error</code>, or the default value if <code>error</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nNested message and enum types in <code>HealthCheckResponse</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nJSON serialized\nReturns the value of <code>reason</code>, or the default value if <code>reason</code>…\nSets <code>state_type</code> to the provided enum value.\nSets <code>status</code> to the provided enum value.\nSets <code>vote_type</code> to the provided enum value.\nReturns the enum value of <code>state_type</code>, or the default if …\nReturns the enum value of <code>status</code>, or the default if the …\nNested message and enum types in <code>TransactionMessageProto</code>.\nGenerated client implementations.\nGenerated server implementations.\nNested message and enum types in <code>TransactionStateProto</code>.\nNested message and enum types in <code>TransactionVoteProto</code>.\nReturns the enum value of <code>vote_type</code>, or the default if the …\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>Status</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Status</code>.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nEnable decompressing responses.\nBroadcast transaction message to multiple participants\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nGet transaction status from coordinator\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nSend a transaction message to a participant\nHealth check for transaction participants\nGenerated gRPC service name\nGenerated trait containing gRPC methods that should be …\nEnable decompressing requests with the given encoding.\nBroadcast transaction message to multiple participants\nReturns the argument unchanged.\nGet transaction status from coordinator\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress responses with the given encoding, if the client …\nSend a transaction message to a participant\nHealth check for transaction participants\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>StateType</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>StateType</code>.\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>VoteType</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>VoteType</code>.\nExecute after the operation\nExecute before the operation\nDELETE operations\nINSERT operations\nExecute once per affected row\nExecute once per statement\nContext passed to trigger functions during execution\nTrigger coordinator that manages all triggers and their …\nTrigger definition and metadata\nDML events that can fire triggers\nTrigger executor that runs trigger functions\nTrait for implementing trigger functions\nLevel at which the trigger executes\nResult of trigger execution\nTrigger statistics\nWhen a trigger should fire relative to the DML operation\nTRUNCATE operations\nUPDATE operations\nGet average execution time in microseconds\nCheck recursion depth and increment if within limits\nClear all triggers\nAdditional context data\nCreation timestamp\nDecrement recursion depth and clean up if zero\nGet function description\nExecution duration in microseconds\nWhether this trigger is enabled\nError message (if failed)\nEvaluate WHEN condition\nEvent type\nEvents that fire this trigger\nExecute the trigger function\nExecute a trigger\nExecute all matching triggers and return results\nTrigger executor\nFailed executions\nCreate a failure result\nFire triggers for a CDC event\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate context from CDC event\nOptional function arguments\nFunction to execute (function name or inline code)\nRegistry of available trigger functions\nGet matching triggers for the given table, timing, and …\nGet trigger statistics\nGet a specific trigger\nGet all triggers for a table\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExecution level (ROW/STATEMENT)\nCheck if trigger should fire for a given event\nMaximum recursion depth allowed\nMetadata\nAdditional result metadata\nModified row values (for BEFORE triggers that modify data)\nGet function name\nTrigger name\nCreate a new trigger executor\nCreate a new trigger coordinator\nCreate a new trigger definition\nNew row values (for INSERT/UPDATE)\nOld row values (for UPDATE/DELETE)\nRecursion depth tracking to prevent infinite loops\nRegister a trigger function\nRegister a trigger function\nRegister a trigger definition\nSchema name (if applicable)\nCheck if trigger should be executed based on WHEN condition\nStatistics\nCreate a successful result\nWhether execution was successful\nGet success rate as a percentage\nCreate a successful result with modified row\nSuccessful executions\nTable name the trigger is on\nTable name\nCurrent timestamp\nWhen to fire (BEFORE/AFTER)\nTotal execution time in microseconds\nTotal trigger executions\nTotal number of registered triggers\nTransaction ID (if in transaction)\nUnique trigger ID\nThe trigger being executed\nTrigger name for logging\nTrigger definitions indexed by table\nUnregister a trigger function\nUnregister a trigger\nUpdate trigger execution statistics\nLast modification timestamp\nOptional WHEN condition (SQL expression)\nSet function arguments\nAdd context data\nSet execution duration\nCreate with custom max recursion depth\nAdd metadata\nSet schema\nSet WHEN condition")