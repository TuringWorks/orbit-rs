# Orbit-RS Universal Deployment Configuration
# Supports Kubernetes, Docker Compose, and Standalone deployments

# Global configuration
global:
  cluster_name: "orbit-rs-cluster"
  node_discovery_timeout: 30s
  election_timeout_min: 150ms
  election_timeout_max: 300ms
  heartbeat_interval: 50ms

# Kubernetes deployment configuration
kubernetes:
  namespace: "orbit-rs"
  service_name: "orbit-server"

  # Leader election configuration
  leader_election:
    enabled: true
    lease_name: "orbit-leader-election"
    lease_duration: 30s
    renew_deadline: 20s
    retry_period: 5s
    enable_raft_fallback: true

  # Service discovery
  discovery:
    method: "kubernetes_api"
    service_account: "orbit-server"

  # StatefulSet configuration
  statefulset:
    replicas: 3
    pod_template:
      env:
        - name: DEPLOYMENT_MODE
          value: "kubernetes"
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: SERVICE_ACCOUNT
          value: "orbit-server"
        - name: ORBIT_REPLICA_COUNT
          value: "3"
        - name: ORBIT_DISCOVERY_DNS
          value: "orbit-server-headless.orbit-rs.svc.cluster.local"

  # RBAC permissions for leader election
  rbac:
    enable_leader_election: true
    lease_permissions:
      - get
      - list
      - watch
      - create
      - update
      - delete
    pod_permissions:
      - get
      - list
      - watch

# Docker Compose deployment configuration
docker_compose:
  # Service configuration
  service:
    name: "orbit-server"
    replicas: 3

  # Leader election (uses Raft consensus)
  leader_election:
    enabled: true
    method: "raft"
    enable_k8s_fallback: false

  # Node discovery
  discovery:
    method: "compose_dns"
    compose_project: "${COMPOSE_PROJECT_NAME}"

  # Environment variables for compose
  environment:
    - DEPLOYMENT_MODE=docker_compose
    - COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME}
    - COMPOSE_SERVICE=orbit-server
    - ORBIT_REPLICA_COUNT=3
    - ORBIT_DISCOVERY_DNS=orbit-server

# Digital Ocean deployment configuration
digital_ocean:
  # Digital Ocean API configuration
  api:
    token: "${DO_API_TOKEN}"  # Digital Ocean API token
    endpoint: "https://api.digitalocean.com/v2"
    timeout: 30s
    retry_count: 3

  # Droplet configuration
  droplets:
    # Standard compute droplets
    standard:
      image: "ubuntu-22-04-x64"
      size: "s-2vcpu-4gb"  # 2 vCPU, 4GB RAM
      region: "nyc3"  # Primary region
      backup_regions: ["sfo3", "ams3"]  # Fallback regions
      count: 3
      ssh_keys: ["${DO_SSH_KEY_ID}"]
      user_data_file: "scripts/droplet-init.sh"
      tags: ["orbit-rs", "standard-compute"]
      
    # GPU-enabled droplets for compute-intensive workloads
    gpu:
      image: "gpu-h100x1-base"  # NVIDIA H100 optimized image
      size: "gd-8vcpu-32gb-nvidia-h100x1"  # GPU droplet with H100
      region: "nyc3"  # GPU availability by region
      backup_regions: ["sfo3"]  # Limited GPU regions
      count: 2
      ssh_keys: ["${DO_SSH_KEY_ID}"]
      user_data_file: "scripts/gpu-droplet-init.sh"
      tags: ["orbit-rs", "gpu-compute", "ml-workload"]
      
      # GPU-specific configuration
      gpu_config:
        driver_version: "535.154.05"  # NVIDIA driver version
        cuda_version: "12.2"  # CUDA toolkit version
        enable_persistence_mode: true
        memory_clock: 1215  # GPU memory clock (MHz)
        graphics_clock: 1410  # GPU graphics clock (MHz)
        power_limit: 350  # Power limit (watts)
        enable_mig: false  # Multi-Instance GPU
        
      # Monitoring and optimization
      monitoring:
        gpu_metrics: true
        temperature_threshold: 83  # Celsius
        power_threshold: 300  # Watts
        memory_threshold: 80  # Percentage
        enable_nvml: true
        
  # Load balancer configuration
  load_balancer:
    name: "orbit-rs-lb"
    algorithm: "round_robin"  # or "least_connections", "ip_hash"
    region: "nyc3"
    size: "lb-small"  # lb-small, lb-medium, lb-large
    health_check:
      protocol: "http"
      port: 8080
      path: "/health"
      interval: 10
      timeout: 5
      unhealthy_threshold: 3
      healthy_threshold: 2
    
    # GPU-aware load balancing
    gpu_routing:
      enabled: true
      route_by_gpu_availability: true
      route_by_gpu_memory: true
      sticky_sessions: true  # For ML training consistency
      
  # Digital Ocean Spaces object storage
  spaces:
    name: "${DO_SPACES_NAME}"
    region: "${DO_SPACES_REGION}"
    endpoint: "${DO_SPACES_REGION}.digitaloceanspaces.com"
    access_key: "${DO_SPACES_ACCESS_KEY}"
    secret_key: "${DO_SPACES_SECRET_KEY}"
    enable_cdn: true
    cdn_endpoint: "${DO_SPACES_NAME}.${DO_SPACES_REGION}.cdn.digitaloceanspaces.com"
    prefix: "orbit-rs"
    enable_encryption: true
    retention_policy:
      logs: "30d"
      metrics: "90d"
      snapshots: "1y"
      
  # Networking configuration
  networking:
    vpc:
      name: "orbit-rs-vpc"
      ip_range: "10.116.0.0/20"
      region: "nyc3"
      
    firewall:
      name: "orbit-rs-firewall"
      inbound_rules:
        - protocol: "tcp"
          ports: "22"  # SSH
          sources:
            addresses: ["0.0.0.0/0"]  # Restrict in production
        - protocol: "tcp"
          ports: "50051"  # gRPC
          sources:
            load_balancer_uids: ["${DO_LB_ID}"]
        - protocol: "tcp"
          ports: "8080"  # HTTP API
          sources:
            load_balancer_uids: ["${DO_LB_ID}"]
        - protocol: "tcp"
          ports: "9090"  # Metrics
          sources:
            addresses: ["10.116.0.0/20"]  # VPC only
      outbound_rules:
        - protocol: "tcp"
          ports: "443"  # HTTPS
          destinations:
            addresses: ["0.0.0.0/0"]
        - protocol: "tcp"
          ports: "80"  # HTTP
          destinations:
            addresses: ["0.0.0.0/0"]
            
  # Auto-scaling configuration
  auto_scaling:
    enabled: true
    min_instances: 2
    max_instances: 10
    target_cpu_utilization: 70  # Percentage
    target_gpu_utilization: 80  # Percentage (for GPU droplets)
    scale_up_cooldown: "5m"
    scale_down_cooldown: "10m"
    
    # GPU-specific scaling
    gpu_scaling:
      enabled: true
      min_gpu_instances: 1
      max_gpu_instances: 4
      gpu_memory_threshold: 85  # Percentage
      scale_up_on_queue_length: 5  # Scale up when job queue > 5
      
  # Cost optimization
  cost_optimization:
    enable_reserved_instances: false  # Reserved pricing not available yet
    enable_spot_instances: false  # Not available for GPU droplets
    shutdown_schedule:
      enabled: false  # Set to true for dev environments
      weekday_shutdown: "20:00"  # 8 PM EST
      weekend_shutdown: "18:00"  # 6 PM EST
      startup: "08:00"  # 8 AM EST
      timezone: "America/New_York"
      
# Standalone deployment configuration
standalone:
  # Cluster configuration
  cluster:
    nodes:
      - "node-1.orbit.local:50051"
      - "node-2.orbit.local:50051"
      - "node-3.orbit.local:50051"

  # Leader election (Raft only)
  leader_election:
    enabled: true
    method: "raft"
    enable_k8s_fallback: false

  # Node discovery methods
  discovery:
    method: "static"  # or "dns", "consul", "etcd"

    # DNS discovery configuration
    dns:
      service_name: "orbit-cluster.local"
      port: 50051

    # Consul discovery configuration
    consul:
      address: "consul.service.consul:8500"
      service_name: "orbit-server"
      health_check: true

    # etcd discovery configuration
    etcd:
      endpoints:
        - "etcd-1.orbit.local:2379"
        - "etcd-2.orbit.local:2379"
        - "etcd-3.orbit.local:2379"
      key_prefix: "/orbit-rs/nodes"

# Security configuration
security:
  # TLS configuration
  tls:
    enabled: true
    cert_file: "/app/certs/tls.crt"
    key_file: "/app/certs/tls.key"
    ca_file: "/app/certs/ca.crt"

  # Authentication
  auth:
    enabled: false
    method: "mtls"  # or "jwt", "rbac"

# Storage configuration
storage:
  # Election state persistence
  election_state:
    enabled: true
    path: "/app/data/election-state.json"
    backup_enabled: true
    backup_interval: "1h"

  # Transaction logs
  transaction_logs:
    path: "/app/data/transactions.db"
    backup_enabled: true

# Monitoring and observability
monitoring:
  # Metrics
  metrics:
    enabled: true
    port: 9090
    path: "/metrics"

  # Health checks
  health:
    enabled: true
    port: 8080
    path: "/health"

  # Logging
  logging:
    level: "info"
    format: "json"

# Performance tuning
performance:
  # Resource limits
  resources:
    cpu_limit: "1000m"
    memory_limit: "2Gi"
    cpu_request: "500m"
    memory_request: "1Gi"

  # Connection pooling
  connection_pool:
    max_connections: 100
    idle_timeout: "30s"

  # Batch processing
  batch:
    max_batch_size: 1000
    batch_timeout: "100ms"

---
# Environment-specific overrides

# Development environment
apiVersion: v1
kind: ConfigMap
metadata:
  name: orbit-rs-dev-config
data:
  DEPLOYMENT_MODE: "kubernetes"
  ORBIT_LOG_LEVEL: "debug"
  ORBIT_REPLICA_COUNT: "1"
  ORBIT_ELECTION_TIMEOUT_MIN: "50ms"
  ORBIT_ELECTION_TIMEOUT_MAX: "100ms"

---
# Staging environment
apiVersion: v1
kind: ConfigMap
metadata:
  name: orbit-rs-staging-config
data:
  DEPLOYMENT_MODE: "kubernetes"
  ORBIT_LOG_LEVEL: "info"
  ORBIT_REPLICA_COUNT: "3"
  ORBIT_ELECTION_TIMEOUT_MIN: "150ms"
  ORBIT_ELECTION_TIMEOUT_MAX: "300ms"

---
# Production environment
apiVersion: v1
kind: ConfigMap
metadata:
  name: orbit-rs-prod-config
data:
  DEPLOYMENT_MODE: "kubernetes"
  ORBIT_LOG_LEVEL: "warn"
  ORBIT_REPLICA_COUNT: "5"
  ORBIT_ELECTION_TIMEOUT_MIN: "200ms"
  ORBIT_ELECTION_TIMEOUT_MAX: "400ms"
  ORBIT_ENABLE_TLS: "true"
  ORBIT_ENABLE_AUTH: "true"
