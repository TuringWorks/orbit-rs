---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orbit-operator
  namespace: orbit-operator-system
  labels:
    app.kubernetes.io/name: orbit-operator
    app.kubernetes.io/component: controller
    app.kubernetes.io/version: "0.1.0"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: orbit-operator
      app.kubernetes.io/component: controller
  template:
    metadata:
      labels:
        app.kubernetes.io/name: orbit-operator
        app.kubernetes.io/component: controller
        app.kubernetes.io/version: "0.1.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: orbit-operator
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: operator
        image: orbit-rs/orbit-operator:latest
        imagePullPolicy: IfNotPresent
        command: ["/usr/local/bin/orbit-operator"]
        ports:
        - name: metrics
          containerPort: 8080
          protocol: TCP
        - name: health
          containerPort: 8081
          protocol: TCP
        env:
        - name: RUST_LOG
          value: "info"
        - name: RUST_BACKTRACE
          value: "1"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: WATCH_NAMESPACE
          value: ""  # Watch all namespaces
        - name: METRICS_ADDR
          value: "0.0.0.0:8080"
        - name: HEALTH_ADDR
          value: "0.0.0.0:8081"
        - name: LOG_LEVEL
          value: "info"
        - name: LEADER_ELECTION_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: LEADER_ELECTION_NAME
          value: "orbit-operator-leader-election"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /healthz
            port: health
          initialDelaySeconds: 15
          periodSeconds: 20
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /readyz
            port: health
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
                - arm64
      tolerations:
      - key: node.kubernetes.io/not-ready
        operator: Exists
        effect: NoExecute
        tolerationSeconds: 300
      - key: node.kubernetes.io/unreachable
        operator: Exists
        effect: NoExecute
        tolerationSeconds: 300
      terminationGracePeriodSeconds: 30

---
apiVersion: v1
kind: Service
metadata:
  name: orbit-operator-metrics
  namespace: orbit-operator-system
  labels:
    app.kubernetes.io/name: orbit-operator
    app.kubernetes.io/component: metrics
spec:
  type: ClusterIP
  ports:
  - name: metrics
    port: 8080
    targetPort: metrics
    protocol: TCP
  - name: health
    port: 8081
    targetPort: health
    protocol: TCP
  selector:
    app.kubernetes.io/name: orbit-operator
    app.kubernetes.io/component: controller

---
# ServiceMonitor for Prometheus Operator (if available)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: orbit-operator
  namespace: orbit-operator-system
  labels:
    app.kubernetes.io/name: orbit-operator
    app.kubernetes.io/component: monitoring
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: orbit-operator
      app.kubernetes.io/component: metrics
  endpoints:
  - port: metrics
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s

---
# PodDisruptionBudget for operator availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: orbit-operator
  namespace: orbit-operator-system
  labels:
    app.kubernetes.io/name: orbit-operator
    app.kubernetes.io/component: availability
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: orbit-operator
      app.kubernetes.io/component: controller