---
# Ultra-high density storage class for 3-node 1PB deployment
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: orbit-ultra-dense-nvme
  labels:
    app.kubernetes.io/name: orbit-rs
    app.kubernetes.io/component: ultra-dense-storage
    density-tier: maximum
annotations:
  storageclass.kubernetes.io/is-default-class: "false"
  orbit-rs.io/storage-tier: "ultra-dense"
provisioner: ebs.csi.aws.com  # AWS - adjust for your cloud
parameters:
  type: gp3                    # High-performance GP3
  iops: "64000"                # Maximum IOPS (64K)
  throughput: "4000"           # Maximum throughput (4 GB/s)
  encrypted: "true"
  fsType: ext4
  # Mount options optimized for ultra-dense storage
mountOptions:
  - "noatime"
  - "nodiratime"
  - "data=writeback"
  - "commit=60"              # Reduce commit frequency for performance
  - "barrier=0"              # Disable barriers for performance (risk/benefit)
allowVolumeExpansion: true
reclaimPolicy: Retain
volumeBindingMode: WaitForFirstConsumer

---
# Local NVMe storage class for bare metal deployment
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: orbit-local-nvme-ultra
  labels:
    app.kubernetes.io/name: orbit-rs
    app.kubernetes.io/component: local-ultra-storage
    performance-tier: maximum
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
reclaimPolicy: Delete

---
# Node-specific local storage for ultra-dense deployment
# Node 1 - Primary storage
apiVersion: v1
kind: PersistentVolume
metadata:
  name: orbit-ultra-node1-primary
  labels:
    app.kubernetes.io/name: orbit-rs
    orbit-node: "node1"
    orbit-role: "primary"
spec:
  capacity:
    storage: 800Ti  # 800TB primary storage
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: orbit-local-nvme-ultra
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: orbit-rs.io/node-id
          operator: In
          values:
          - "node1"
        - key: orbit-rs.io/storage-tier
          operator: In
          values:
          - "ultra-dense"
  local:
    path: /mnt/orbit-ultra-storage
    fsType: ext4

---
# Node 2 - Secondary storage
apiVersion: v1
kind: PersistentVolume
metadata:
  name: orbit-ultra-node2-secondary
  labels:
    app.kubernetes.io/name: orbit-rs
    orbit-node: "node2"
    orbit-role: "secondary"
spec:
  capacity:
    storage: 800Ti  # 800TB secondary storage
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: orbit-local-nvme-ultra
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: orbit-rs.io/node-id
          operator: In
          values:
          - "node2"
  local:
    path: /mnt/orbit-ultra-storage
    fsType: ext4

---
# Node 3 - Tertiary storage
apiVersion: v1
kind: PersistentVolume
metadata:
  name: orbit-ultra-node3-tertiary
  labels:
    app.kubernetes.io/name: orbit-rs
    orbit-node: "node3"
    orbit-role: "tertiary"
spec:
  capacity:
    storage: 800Ti  # 800TB tertiary storage
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: orbit-local-nvme-ultra
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: orbit-rs.io/node-id
          operator: In
          values:
          - "node3"
  local:
    path: /mnt/orbit-ultra-storage
    fsType: ext4

---
# Storage preparation script ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: orbit-storage-prep-script
  namespace: orbit-rs
  labels:
    app.kubernetes.io/name: orbit-rs
    app.kubernetes.io/component: storage-preparation
data:
  prepare-storage.sh: |
    #!/bin/bash
    set -euo pipefail
    
    echo "Preparing ultra-dense storage for node $(hostname)"
    
    # Create RAID 0 across all available NVMe drives for maximum capacity
    NVME_DRIVES=($(lsblk -d -o name | grep nvme | head -10))  # Up to 10 drives
    NVME_PATHS=()
    
    for drive in "${NVME_DRIVES[@]}"; do
        if [[ -b "/dev/$drive" ]]; then
            NVME_PATHS+=("/dev/$drive")
            echo "Found NVMe drive: /dev/$drive"
        fi
    done
    
    if [[ ${#NVME_PATHS[@]} -eq 0 ]]; then
        echo "ERROR: No NVMe drives found"
        exit 1
    fi
    
    echo "Creating RAID 0 across ${#NVME_PATHS[@]} NVMe drives..."
    
    # Stop existing RAID if present
    mdadm --stop /dev/md0 2>/dev/null || true
    
    # Create RAID 0 for maximum capacity and performance
    mdadm --create /dev/md0 \
        --level=0 \
        --raid-devices=${#NVME_PATHS[@]} \
        "${NVME_PATHS[@]}" \
        --force
    
    # Wait for RAID to be ready
    mdadm --wait /dev/md0
    
    # Format with ext4, optimized for large files and mmap
    mkfs.ext4 -F \
        -O extent,flex_bg,sparse_super2,large_file,huge_file \
        -E lazy_itable_init=0,lazy_journal_init=0 \
        -m 1 \
        -b 4096 \
        /dev/md0
    
    # Create mount point
    mkdir -p /mnt/orbit-ultra-storage
    
    # Mount with performance optimizations
    mount -o noatime,nodiratime,data=writeback,commit=60,barrier=0 \
        /dev/md0 /mnt/orbit-ultra-storage
    
    # Set ownership
    chown 1001:1001 /mnt/orbit-ultra-storage
    chmod 755 /mnt/orbit-ultra-storage
    
    # Add to fstab for persistence
    echo "/dev/md0 /mnt/orbit-ultra-storage ext4 noatime,nodiratime,data=writeback,commit=60,barrier=0 0 2" >> /etc/fstab
    
    # Verify the setup
    df -h /mnt/orbit-ultra-storage
    echo "Ultra-dense storage preparation complete"
    
    # Pre-allocate some large files to reduce fragmentation
    echo "Pre-allocating storage structure..."
    mkdir -p /mnt/orbit-ultra-storage/{data,logs,snapshots,temp}
    
    # Create sparse files to reserve space and reduce fragmentation
    for i in {1..10}; do
        fallocate -l 50T "/mnt/orbit-ultra-storage/data/orbit-data-${i}.mmap" || \
        dd if=/dev/zero of="/mnt/orbit-ultra-storage/data/orbit-data-${i}.mmap" \
           bs=1M count=1 seek=$((50 * 1024 * 1024 - 1)) 2>/dev/null || true
    done
    
    echo "Storage structure pre-allocation complete"