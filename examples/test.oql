-- Example OrbitQL queries demonstrating multi-model operations

-- Simple document query
SELECT name, email, profile.age 
FROM users 
WHERE active = true AND created_at > time::now() - 30d;

-- Graph traversal query
SELECT user.name,
       ->follows->user.name AS friends,
       ->follows->user->posted->post.title AS friend_posts
FROM users AS user
WHERE user.country = 'US'
FETCH friends, friend_posts;

-- Time-series data aggregation
SELECT 
    device_id,
    AVG(cpu_usage) AS avg_cpu,
    MAX(memory_usage) AS peak_memory,
    COUNT(*) AS sample_count
FROM metrics
WHERE timestamp >= time::now() - 1h
GROUP BY device_id, time::floor(timestamp, 5m)
ORDER BY timestamp DESC;

-- Multi-model relation creation
CREATE users SET {
    name: 'Alice Johnson',
    email: 'alice@example.com',
    profile: {
        age: 29,
        location: 'San Francisco',
        interests: ['technology', 'hiking', 'photography']
    }
};

-- Graph relationship
RELATE user:alice->follows->user:bob SET {
    timestamp: time::now(),
    notification_enabled: true
};

-- Live query subscription
LIVE SELECT * 
FROM orders 
WHERE status = 'pending' AND created_at > time::now() - 1h;

-- Complex multi-table join with graph operations
SELECT 
    o.id AS order_id,
    u.name AS customer_name,
    p.name AS product_name,
    o.quantity,
    o.total_amount,
    ->reviewed_by->user.name AS reviewers
FROM orders AS o
JOIN users AS u ON o.user_id = u.id
JOIN products AS p ON o.product_id = p.id
WHERE o.created_at >= '2024-01-01'
AND EXISTS (
    SELECT 1 FROM payments pay 
    WHERE pay.order_id = o.id 
    AND pay.status = 'completed'
)
RELATE o->contains->p SET { timestamp: time::now() }
FETCH reviewers;